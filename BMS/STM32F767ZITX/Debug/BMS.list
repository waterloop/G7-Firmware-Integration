
BMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008910  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d0  08008b10  08008b10  00009b10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094e0  080094e0  0000b064  2**0
                  CONTENTS
  4 .ARM          00000008  080094e0  080094e0  0000a4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094e8  080094e8  0000b064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094e8  080094e8  0000a4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080094ec  080094ec  0000a4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080094f0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cf4  20000064  08009554  0000b064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d58  08009554  0000bd58  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a2d8  00000000  00000000  0000b092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004391  00000000  00000000  0002536a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001658  00000000  00000000  00029700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001121  00000000  00000000  0002ad58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ad64  00000000  00000000  0002be79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c43f  00000000  00000000  00056bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109427  00000000  00000000  0007301c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017c443  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e50  00000000  00000000  0017c488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  001822d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000064 	.word	0x20000064
 800021c:	00000000 	.word	0x00000000
 8000220:	08008af8 	.word	0x08008af8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000068 	.word	0x20000068
 800023c:	08008af8 	.word	0x08008af8

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96a 	b.w	800052c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	460c      	mov	r4, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14e      	bne.n	800031a <__udivmoddi4+0xaa>
 800027c:	4694      	mov	ip, r2
 800027e:	458c      	cmp	ip, r1
 8000280:	4686      	mov	lr, r0
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	d962      	bls.n	800034e <__udivmoddi4+0xde>
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0320 	rsb	r3, r2, #32
 800028e:	4091      	lsls	r1, r2
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	fa0c fc02 	lsl.w	ip, ip, r2
 8000298:	4319      	orrs	r1, r3
 800029a:	fa00 fe02 	lsl.w	lr, r0, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb04 f106 	mul.w	r1, r4, r6
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002c6:	f080 8112 	bcs.w	80004ee <__udivmoddi4+0x27e>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 810f 	bls.w	80004ee <__udivmoddi4+0x27e>
 80002d0:	3c02      	subs	r4, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb1 f0f7 	udiv	r0, r1, r7
 80002de:	fb07 1110 	mls	r1, r7, r0, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	429e      	cmp	r6, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f6:	f080 80fc 	bcs.w	80004f2 <__udivmoddi4+0x282>
 80002fa:	429e      	cmp	r6, r3
 80002fc:	f240 80f9 	bls.w	80004f2 <__udivmoddi4+0x282>
 8000300:	4463      	add	r3, ip
 8000302:	3802      	subs	r0, #2
 8000304:	1b9b      	subs	r3, r3, r6
 8000306:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa6>
 800030e:	40d3      	lsrs	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xba>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb4>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa6>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x150>
 8000332:	42a3      	cmp	r3, r4
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xcc>
 8000336:	4290      	cmp	r0, r2
 8000338:	f0c0 80f0 	bcc.w	800051c <__udivmoddi4+0x2ac>
 800033c:	1a86      	subs	r6, r0, r2
 800033e:	eb64 0303 	sbc.w	r3, r4, r3
 8000342:	2001      	movs	r0, #1
 8000344:	2d00      	cmp	r5, #0
 8000346:	d0e6      	beq.n	8000316 <__udivmoddi4+0xa6>
 8000348:	e9c5 6300 	strd	r6, r3, [r5]
 800034c:	e7e3      	b.n	8000316 <__udivmoddi4+0xa6>
 800034e:	2a00      	cmp	r2, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x204>
 8000354:	eba1 040c 	sub.w	r4, r1, ip
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb4 f6f8 	udiv	r6, r4, r8
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	fb08 4416 	mls	r4, r8, r6, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	4298      	cmp	r0, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x11c>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x11a>
 8000384:	4298      	cmp	r0, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 800038a:	4626      	mov	r6, r4
 800038c:	1a1c      	subs	r4, r3, r0
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	fbb4 f0f8 	udiv	r0, r4, r8
 8000396:	fb08 4410 	mls	r4, r8, r0, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x148>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x146>
 80003b0:	429f      	cmp	r7, r3
 80003b2:	f200 80b0 	bhi.w	8000516 <__udivmoddi4+0x2a6>
 80003b6:	4620      	mov	r0, r4
 80003b8:	1bdb      	subs	r3, r3, r7
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x9c>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d0:	fa04 f301 	lsl.w	r3, r4, r1
 80003d4:	ea43 030c 	orr.w	r3, r3, ip
 80003d8:	40f4      	lsrs	r4, r6
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb4 fef0 	udiv	lr, r4, r0
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fb00 441e 	mls	r4, r0, lr, r4
 80003f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f4:	fb0e f90c 	mul.w	r9, lr, ip
 80003f8:	45a1      	cmp	r9, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90a      	bls.n	8000416 <__udivmoddi4+0x1a6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000406:	f080 8084 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 800040a:	45a1      	cmp	r9, r4
 800040c:	f240 8081 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000410:	f1ae 0e02 	sub.w	lr, lr, #2
 8000414:	443c      	add	r4, r7
 8000416:	eba4 0409 	sub.w	r4, r4, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000422:	fb00 4413 	mls	r4, r0, r3, r4
 8000426:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	45a4      	cmp	ip, r4
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1d2>
 8000432:	193c      	adds	r4, r7, r4
 8000434:	f103 30ff 	add.w	r0, r3, #4294967295
 8000438:	d267      	bcs.n	800050a <__udivmoddi4+0x29a>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d965      	bls.n	800050a <__udivmoddi4+0x29a>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000446:	fba0 9302 	umull	r9, r3, r0, r2
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	429c      	cmp	r4, r3
 8000450:	46ce      	mov	lr, r9
 8000452:	469c      	mov	ip, r3
 8000454:	d351      	bcc.n	80004fa <__udivmoddi4+0x28a>
 8000456:	d04e      	beq.n	80004f6 <__udivmoddi4+0x286>
 8000458:	b155      	cbz	r5, 8000470 <__udivmoddi4+0x200>
 800045a:	ebb8 030e 	subs.w	r3, r8, lr
 800045e:	eb64 040c 	sbc.w	r4, r4, ip
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	40cb      	lsrs	r3, r1
 8000468:	431e      	orrs	r6, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c5 6400 	strd	r6, r4, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	e750      	b.n	8000316 <__udivmoddi4+0xa6>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f103 	lsr.w	r1, r0, r3
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	fa24 f303 	lsr.w	r3, r4, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	430c      	orrs	r4, r1
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fa1f f78c 	uxth.w	r7, ip
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3110 	mls	r1, r8, r0, r3
 800049c:	0c23      	lsrs	r3, r4, #16
 800049e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a2:	fb00 f107 	mul.w	r1, r0, r7
 80004a6:	4299      	cmp	r1, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x24c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b2:	d22c      	bcs.n	800050e <__udivmoddi4+0x29e>
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d92a      	bls.n	800050e <__udivmoddi4+0x29e>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c4:	fb08 3311 	mls	r3, r8, r1, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb01 f307 	mul.w	r3, r1, r7
 80004d0:	42a3      	cmp	r3, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x276>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004dc:	d213      	bcs.n	8000506 <__udivmoddi4+0x296>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d911      	bls.n	8000506 <__udivmoddi4+0x296>
 80004e2:	3902      	subs	r1, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	1ae4      	subs	r4, r4, r3
 80004e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ec:	e739      	b.n	8000362 <__udivmoddi4+0xf2>
 80004ee:	4604      	mov	r4, r0
 80004f0:	e6f0      	b.n	80002d4 <__udivmoddi4+0x64>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e706      	b.n	8000304 <__udivmoddi4+0x94>
 80004f6:	45c8      	cmp	r8, r9
 80004f8:	d2ae      	bcs.n	8000458 <__udivmoddi4+0x1e8>
 80004fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000502:	3801      	subs	r0, #1
 8000504:	e7a8      	b.n	8000458 <__udivmoddi4+0x1e8>
 8000506:	4631      	mov	r1, r6
 8000508:	e7ed      	b.n	80004e6 <__udivmoddi4+0x276>
 800050a:	4603      	mov	r3, r0
 800050c:	e799      	b.n	8000442 <__udivmoddi4+0x1d2>
 800050e:	4630      	mov	r0, r6
 8000510:	e7d4      	b.n	80004bc <__udivmoddi4+0x24c>
 8000512:	46d6      	mov	lr, sl
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1a6>
 8000516:	4463      	add	r3, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74d      	b.n	80003b8 <__udivmoddi4+0x148>
 800051c:	4606      	mov	r6, r0
 800051e:	4623      	mov	r3, r4
 8000520:	4608      	mov	r0, r1
 8000522:	e70f      	b.n	8000344 <__udivmoddi4+0xd4>
 8000524:	3e02      	subs	r6, #2
 8000526:	4463      	add	r3, ip
 8000528:	e730      	b.n	800038c <__udivmoddi4+0x11c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000536:	463b      	mov	r3, r7
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000542:	4b21      	ldr	r3, [pc, #132]	@ (80005c8 <MX_ADC1_Init+0x98>)
 8000544:	4a21      	ldr	r2, [pc, #132]	@ (80005cc <MX_ADC1_Init+0x9c>)
 8000546:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000548:	4b1f      	ldr	r3, [pc, #124]	@ (80005c8 <MX_ADC1_Init+0x98>)
 800054a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800054e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000550:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <MX_ADC1_Init+0x98>)
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000556:	4b1c      	ldr	r3, [pc, #112]	@ (80005c8 <MX_ADC1_Init+0x98>)
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800055c:	4b1a      	ldr	r3, [pc, #104]	@ (80005c8 <MX_ADC1_Init+0x98>)
 800055e:	2200      	movs	r2, #0
 8000560:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000562:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <MX_ADC1_Init+0x98>)
 8000564:	2200      	movs	r2, #0
 8000566:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800056a:	4b17      	ldr	r3, [pc, #92]	@ (80005c8 <MX_ADC1_Init+0x98>)
 800056c:	2200      	movs	r2, #0
 800056e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000570:	4b15      	ldr	r3, [pc, #84]	@ (80005c8 <MX_ADC1_Init+0x98>)
 8000572:	4a17      	ldr	r2, [pc, #92]	@ (80005d0 <MX_ADC1_Init+0xa0>)
 8000574:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000576:	4b14      	ldr	r3, [pc, #80]	@ (80005c8 <MX_ADC1_Init+0x98>)
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800057c:	4b12      	ldr	r3, [pc, #72]	@ (80005c8 <MX_ADC1_Init+0x98>)
 800057e:	2201      	movs	r2, #1
 8000580:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000582:	4b11      	ldr	r3, [pc, #68]	@ (80005c8 <MX_ADC1_Init+0x98>)
 8000584:	2200      	movs	r2, #0
 8000586:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800058a:	4b0f      	ldr	r3, [pc, #60]	@ (80005c8 <MX_ADC1_Init+0x98>)
 800058c:	2201      	movs	r2, #1
 800058e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000590:	480d      	ldr	r0, [pc, #52]	@ (80005c8 <MX_ADC1_Init+0x98>)
 8000592:	f001 fab3 	bl	8001afc <HAL_ADC_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800059c:	f000 fe24 	bl	80011e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80005a0:	2305      	movs	r3, #5
 80005a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ac:	463b      	mov	r3, r7
 80005ae:	4619      	mov	r1, r3
 80005b0:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <MX_ADC1_Init+0x98>)
 80005b2:	f001 fbff 	bl	8001db4 <HAL_ADC_ConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005bc:	f000 fe14 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	3710      	adds	r7, #16
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000080 	.word	0x20000080
 80005cc:	40012000 	.word	0x40012000
 80005d0:	0f000001 	.word	0x0f000001

080005d4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005da:	463b      	mov	r3, r7
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80005e6:	4b44      	ldr	r3, [pc, #272]	@ (80006f8 <MX_ADC3_Init+0x124>)
 80005e8:	4a44      	ldr	r2, [pc, #272]	@ (80006fc <MX_ADC3_Init+0x128>)
 80005ea:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005ec:	4b42      	ldr	r3, [pc, #264]	@ (80006f8 <MX_ADC3_Init+0x124>)
 80005ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005f2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80005f4:	4b40      	ldr	r3, [pc, #256]	@ (80006f8 <MX_ADC3_Init+0x124>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005fa:	4b3f      	ldr	r3, [pc, #252]	@ (80006f8 <MX_ADC3_Init+0x124>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000600:	4b3d      	ldr	r3, [pc, #244]	@ (80006f8 <MX_ADC3_Init+0x124>)
 8000602:	2201      	movs	r2, #1
 8000604:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000606:	4b3c      	ldr	r3, [pc, #240]	@ (80006f8 <MX_ADC3_Init+0x124>)
 8000608:	2200      	movs	r2, #0
 800060a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800060e:	4b3a      	ldr	r3, [pc, #232]	@ (80006f8 <MX_ADC3_Init+0x124>)
 8000610:	2200      	movs	r2, #0
 8000612:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000614:	4b38      	ldr	r3, [pc, #224]	@ (80006f8 <MX_ADC3_Init+0x124>)
 8000616:	4a3a      	ldr	r2, [pc, #232]	@ (8000700 <MX_ADC3_Init+0x12c>)
 8000618:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800061a:	4b37      	ldr	r3, [pc, #220]	@ (80006f8 <MX_ADC3_Init+0x124>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 6;
 8000620:	4b35      	ldr	r3, [pc, #212]	@ (80006f8 <MX_ADC3_Init+0x124>)
 8000622:	2206      	movs	r2, #6
 8000624:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000626:	4b34      	ldr	r3, [pc, #208]	@ (80006f8 <MX_ADC3_Init+0x124>)
 8000628:	2200      	movs	r2, #0
 800062a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800062e:	4b32      	ldr	r3, [pc, #200]	@ (80006f8 <MX_ADC3_Init+0x124>)
 8000630:	2201      	movs	r2, #1
 8000632:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000634:	4830      	ldr	r0, [pc, #192]	@ (80006f8 <MX_ADC3_Init+0x124>)
 8000636:	f001 fa61 	bl	8001afc <HAL_ADC_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000640:	f000 fdd2 	bl	80011e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000644:	2303      	movs	r3, #3
 8000646:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000648:	2301      	movs	r3, #1
 800064a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000650:	463b      	mov	r3, r7
 8000652:	4619      	mov	r1, r3
 8000654:	4828      	ldr	r0, [pc, #160]	@ (80006f8 <MX_ADC3_Init+0x124>)
 8000656:	f001 fbad 	bl	8001db4 <HAL_ADC_ConfigChannel>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000660:	f000 fdc2 	bl	80011e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000664:	2308      	movs	r3, #8
 8000666:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000668:	2302      	movs	r3, #2
 800066a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	4619      	mov	r1, r3
 8000670:	4821      	ldr	r0, [pc, #132]	@ (80006f8 <MX_ADC3_Init+0x124>)
 8000672:	f001 fb9f 	bl	8001db4 <HAL_ADC_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 800067c:	f000 fdb4 	bl	80011e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000680:	2309      	movs	r3, #9
 8000682:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000684:	2303      	movs	r3, #3
 8000686:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	481a      	ldr	r0, [pc, #104]	@ (80006f8 <MX_ADC3_Init+0x124>)
 800068e:	f001 fb91 	bl	8001db4 <HAL_ADC_ConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000698:	f000 fda6 	bl	80011e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800069c:	230a      	movs	r3, #10
 800069e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	4619      	mov	r1, r3
 80006a8:	4813      	ldr	r0, [pc, #76]	@ (80006f8 <MX_ADC3_Init+0x124>)
 80006aa:	f001 fb83 	bl	8001db4 <HAL_ADC_ConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 80006b4:	f000 fd98 	bl	80011e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80006b8:	230d      	movs	r3, #13
 80006ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80006bc:	2305      	movs	r3, #5
 80006be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	480c      	ldr	r0, [pc, #48]	@ (80006f8 <MX_ADC3_Init+0x124>)
 80006c6:	f001 fb75 	bl	8001db4 <HAL_ADC_ConfigChannel>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 80006d0:	f000 fd8a 	bl	80011e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80006d4:	230f      	movs	r3, #15
 80006d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80006d8:	2306      	movs	r3, #6
 80006da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <MX_ADC3_Init+0x124>)
 80006e2:	f001 fb67 	bl	8001db4 <HAL_ADC_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 80006ec:	f000 fd7c 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200000c8 	.word	0x200000c8
 80006fc:	40012200 	.word	0x40012200
 8000700:	0f000001 	.word	0x0f000001

08000704 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08e      	sub	sp, #56	@ 0x38
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a5b      	ldr	r2, [pc, #364]	@ (8000890 <HAL_ADC_MspInit+0x18c>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d124      	bne.n	8000770 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000726:	4b5b      	ldr	r3, [pc, #364]	@ (8000894 <HAL_ADC_MspInit+0x190>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800072a:	4a5a      	ldr	r2, [pc, #360]	@ (8000894 <HAL_ADC_MspInit+0x190>)
 800072c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000730:	6453      	str	r3, [r2, #68]	@ 0x44
 8000732:	4b58      	ldr	r3, [pc, #352]	@ (8000894 <HAL_ADC_MspInit+0x190>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800073a:	623b      	str	r3, [r7, #32]
 800073c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b55      	ldr	r3, [pc, #340]	@ (8000894 <HAL_ADC_MspInit+0x190>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a54      	ldr	r2, [pc, #336]	@ (8000894 <HAL_ADC_MspInit+0x190>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b52      	ldr	r3, [pc, #328]	@ (8000894 <HAL_ADC_MspInit+0x190>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	61fb      	str	r3, [r7, #28]
 8000754:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000756:	2360      	movs	r3, #96	@ 0x60
 8000758:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800075a:	2303      	movs	r3, #3
 800075c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000766:	4619      	mov	r1, r3
 8000768:	484b      	ldr	r0, [pc, #300]	@ (8000898 <HAL_ADC_MspInit+0x194>)
 800076a:	f002 fc7f 	bl	800306c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800076e:	e08b      	b.n	8000888 <HAL_ADC_MspInit+0x184>
  else if(adcHandle->Instance==ADC3)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a49      	ldr	r2, [pc, #292]	@ (800089c <HAL_ADC_MspInit+0x198>)
 8000776:	4293      	cmp	r3, r2
 8000778:	f040 8086 	bne.w	8000888 <HAL_ADC_MspInit+0x184>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800077c:	4b45      	ldr	r3, [pc, #276]	@ (8000894 <HAL_ADC_MspInit+0x190>)
 800077e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000780:	4a44      	ldr	r2, [pc, #272]	@ (8000894 <HAL_ADC_MspInit+0x190>)
 8000782:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000786:	6453      	str	r3, [r2, #68]	@ 0x44
 8000788:	4b42      	ldr	r3, [pc, #264]	@ (8000894 <HAL_ADC_MspInit+0x190>)
 800078a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000794:	4b3f      	ldr	r3, [pc, #252]	@ (8000894 <HAL_ADC_MspInit+0x190>)
 8000796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000798:	4a3e      	ldr	r2, [pc, #248]	@ (8000894 <HAL_ADC_MspInit+0x190>)
 800079a:	f043 0320 	orr.w	r3, r3, #32
 800079e:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a0:	4b3c      	ldr	r3, [pc, #240]	@ (8000894 <HAL_ADC_MspInit+0x190>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a4:	f003 0320 	and.w	r3, r3, #32
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ac:	4b39      	ldr	r3, [pc, #228]	@ (8000894 <HAL_ADC_MspInit+0x190>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b0:	4a38      	ldr	r2, [pc, #224]	@ (8000894 <HAL_ADC_MspInit+0x190>)
 80007b2:	f043 0304 	orr.w	r3, r3, #4
 80007b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b8:	4b36      	ldr	r3, [pc, #216]	@ (8000894 <HAL_ADC_MspInit+0x190>)
 80007ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007bc:	f003 0304 	and.w	r3, r3, #4
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c4:	4b33      	ldr	r3, [pc, #204]	@ (8000894 <HAL_ADC_MspInit+0x190>)
 80007c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c8:	4a32      	ldr	r2, [pc, #200]	@ (8000894 <HAL_ADC_MspInit+0x190>)
 80007ca:	f043 0301 	orr.w	r3, r3, #1
 80007ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d0:	4b30      	ldr	r3, [pc, #192]	@ (8000894 <HAL_ADC_MspInit+0x190>)
 80007d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d4:	f003 0301 	and.w	r3, r3, #1
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_10;
 80007dc:	f44f 6385 	mov.w	r3, #1064	@ 0x428
 80007e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e2:	2303      	movs	r3, #3
 80007e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ee:	4619      	mov	r1, r3
 80007f0:	482b      	ldr	r0, [pc, #172]	@ (80008a0 <HAL_ADC_MspInit+0x19c>)
 80007f2:	f002 fc3b 	bl	800306c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80007f6:	2309      	movs	r3, #9
 80007f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fa:	2303      	movs	r3, #3
 80007fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000806:	4619      	mov	r1, r3
 8000808:	4826      	ldr	r0, [pc, #152]	@ (80008a4 <HAL_ADC_MspInit+0x1a0>)
 800080a:	f002 fc2f 	bl	800306c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800080e:	2308      	movs	r3, #8
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000812:	2303      	movs	r3, #3
 8000814:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800081e:	4619      	mov	r1, r3
 8000820:	481d      	ldr	r0, [pc, #116]	@ (8000898 <HAL_ADC_MspInit+0x194>)
 8000822:	f002 fc23 	bl	800306c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8000826:	4b20      	ldr	r3, [pc, #128]	@ (80008a8 <HAL_ADC_MspInit+0x1a4>)
 8000828:	4a20      	ldr	r2, [pc, #128]	@ (80008ac <HAL_ADC_MspInit+0x1a8>)
 800082a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800082c:	4b1e      	ldr	r3, [pc, #120]	@ (80008a8 <HAL_ADC_MspInit+0x1a4>)
 800082e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000832:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000834:	4b1c      	ldr	r3, [pc, #112]	@ (80008a8 <HAL_ADC_MspInit+0x1a4>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800083a:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <HAL_ADC_MspInit+0x1a4>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000840:	4b19      	ldr	r3, [pc, #100]	@ (80008a8 <HAL_ADC_MspInit+0x1a4>)
 8000842:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000846:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000848:	4b17      	ldr	r3, [pc, #92]	@ (80008a8 <HAL_ADC_MspInit+0x1a4>)
 800084a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800084e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000850:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <HAL_ADC_MspInit+0x1a4>)
 8000852:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000856:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000858:	4b13      	ldr	r3, [pc, #76]	@ (80008a8 <HAL_ADC_MspInit+0x1a4>)
 800085a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800085e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000860:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <HAL_ADC_MspInit+0x1a4>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000866:	4b10      	ldr	r3, [pc, #64]	@ (80008a8 <HAL_ADC_MspInit+0x1a4>)
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800086c:	480e      	ldr	r0, [pc, #56]	@ (80008a8 <HAL_ADC_MspInit+0x1a4>)
 800086e:	f002 f885 	bl	800297c <HAL_DMA_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <HAL_ADC_MspInit+0x178>
      Error_Handler();
 8000878:	f000 fcb6 	bl	80011e8 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a0a      	ldr	r2, [pc, #40]	@ (80008a8 <HAL_ADC_MspInit+0x1a4>)
 8000880:	639a      	str	r2, [r3, #56]	@ 0x38
 8000882:	4a09      	ldr	r2, [pc, #36]	@ (80008a8 <HAL_ADC_MspInit+0x1a4>)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000888:	bf00      	nop
 800088a:	3738      	adds	r7, #56	@ 0x38
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40012000 	.word	0x40012000
 8000894:	40023800 	.word	0x40023800
 8000898:	40020000 	.word	0x40020000
 800089c:	40012200 	.word	0x40012200
 80008a0:	40021400 	.word	0x40021400
 80008a4:	40020800 	.word	0x40020800
 80008a8:	20000110 	.word	0x20000110
 80008ac:	40026410 	.word	0x40026410

080008b0 <MX_CAN2_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80008b4:	4b16      	ldr	r3, [pc, #88]	@ (8000910 <MX_CAN2_Init+0x60>)
 80008b6:	4a17      	ldr	r2, [pc, #92]	@ (8000914 <MX_CAN2_Init+0x64>)
 80008b8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80008ba:	4b15      	ldr	r3, [pc, #84]	@ (8000910 <MX_CAN2_Init+0x60>)
 80008bc:	2210      	movs	r2, #16
 80008be:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80008c0:	4b13      	ldr	r3, [pc, #76]	@ (8000910 <MX_CAN2_Init+0x60>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008c6:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <MX_CAN2_Init+0x60>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 80008cc:	4b10      	ldr	r3, [pc, #64]	@ (8000910 <MX_CAN2_Init+0x60>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000910 <MX_CAN2_Init+0x60>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80008d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000910 <MX_CAN2_Init+0x60>)
 80008da:	2200      	movs	r2, #0
 80008dc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80008de:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <MX_CAN2_Init+0x60>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80008e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000910 <MX_CAN2_Init+0x60>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80008ea:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <MX_CAN2_Init+0x60>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80008f0:	4b07      	ldr	r3, [pc, #28]	@ (8000910 <MX_CAN2_Init+0x60>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80008f6:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <MX_CAN2_Init+0x60>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	@ (8000910 <MX_CAN2_Init+0x60>)
 80008fe:	f001 fd2b 	bl	8002358 <HAL_CAN_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000908:	f000 fc6e 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000170 	.word	0x20000170
 8000914:	40006800 	.word	0x40006800

08000918 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN3_Init 0 */

  /* USER CODE BEGIN CAN3_Init 1 */

  /* USER CODE END CAN3_Init 1 */
  hcan3.Instance = CAN3;
 800091c:	4b16      	ldr	r3, [pc, #88]	@ (8000978 <MX_CAN3_Init+0x60>)
 800091e:	4a17      	ldr	r2, [pc, #92]	@ (800097c <MX_CAN3_Init+0x64>)
 8000920:	601a      	str	r2, [r3, #0]
  hcan3.Init.Prescaler = 16;
 8000922:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_CAN3_Init+0x60>)
 8000924:	2210      	movs	r2, #16
 8000926:	605a      	str	r2, [r3, #4]
  hcan3.Init.Mode = CAN_MODE_NORMAL;
 8000928:	4b13      	ldr	r3, [pc, #76]	@ (8000978 <MX_CAN3_Init+0x60>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800092e:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_CAN3_Init+0x60>)
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
  hcan3.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000934:	4b10      	ldr	r3, [pc, #64]	@ (8000978 <MX_CAN3_Init+0x60>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  hcan3.Init.TimeSeg2 = CAN_BS2_1TQ;
 800093a:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_CAN3_Init+0x60>)
 800093c:	2200      	movs	r2, #0
 800093e:	615a      	str	r2, [r3, #20]
  hcan3.Init.TimeTriggeredMode = DISABLE;
 8000940:	4b0d      	ldr	r3, [pc, #52]	@ (8000978 <MX_CAN3_Init+0x60>)
 8000942:	2200      	movs	r2, #0
 8000944:	761a      	strb	r2, [r3, #24]
  hcan3.Init.AutoBusOff = DISABLE;
 8000946:	4b0c      	ldr	r3, [pc, #48]	@ (8000978 <MX_CAN3_Init+0x60>)
 8000948:	2200      	movs	r2, #0
 800094a:	765a      	strb	r2, [r3, #25]
  hcan3.Init.AutoWakeUp = DISABLE;
 800094c:	4b0a      	ldr	r3, [pc, #40]	@ (8000978 <MX_CAN3_Init+0x60>)
 800094e:	2200      	movs	r2, #0
 8000950:	769a      	strb	r2, [r3, #26]
  hcan3.Init.AutoRetransmission = DISABLE;
 8000952:	4b09      	ldr	r3, [pc, #36]	@ (8000978 <MX_CAN3_Init+0x60>)
 8000954:	2200      	movs	r2, #0
 8000956:	76da      	strb	r2, [r3, #27]
  hcan3.Init.ReceiveFifoLocked = DISABLE;
 8000958:	4b07      	ldr	r3, [pc, #28]	@ (8000978 <MX_CAN3_Init+0x60>)
 800095a:	2200      	movs	r2, #0
 800095c:	771a      	strb	r2, [r3, #28]
  hcan3.Init.TransmitFifoPriority = DISABLE;
 800095e:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_CAN3_Init+0x60>)
 8000960:	2200      	movs	r2, #0
 8000962:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	@ (8000978 <MX_CAN3_Init+0x60>)
 8000966:	f001 fcf7 	bl	8002358 <HAL_CAN_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_CAN3_Init+0x5c>
  {
    Error_Handler();
 8000970:	f000 fc3a 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN3_Init 2 */

  /* USER CODE END CAN3_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000198 	.word	0x20000198
 800097c:	40003400 	.word	0x40003400

08000980 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08c      	sub	sp, #48	@ 0x30
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN2)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a34      	ldr	r2, [pc, #208]	@ (8000a70 <HAL_CAN_MspInit+0xf0>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d135      	bne.n	8000a0e <HAL_CAN_MspInit+0x8e>
  {
  /* USER CODE BEGIN CAN2_MspInit 0 */

  /* USER CODE END CAN2_MspInit 0 */
    /* CAN2 clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 80009a2:	4b34      	ldr	r3, [pc, #208]	@ (8000a74 <HAL_CAN_MspInit+0xf4>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a6:	4a33      	ldr	r2, [pc, #204]	@ (8000a74 <HAL_CAN_MspInit+0xf4>)
 80009a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80009ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ae:	4b31      	ldr	r3, [pc, #196]	@ (8000a74 <HAL_CAN_MspInit+0xf4>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80009b6:	61bb      	str	r3, [r7, #24]
 80009b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000a74 <HAL_CAN_MspInit+0xf4>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009be:	4a2d      	ldr	r2, [pc, #180]	@ (8000a74 <HAL_CAN_MspInit+0xf4>)
 80009c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000a74 <HAL_CAN_MspInit+0xf4>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	4b28      	ldr	r3, [pc, #160]	@ (8000a74 <HAL_CAN_MspInit+0xf4>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a27      	ldr	r2, [pc, #156]	@ (8000a74 <HAL_CAN_MspInit+0xf4>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b25      	ldr	r3, [pc, #148]	@ (8000a74 <HAL_CAN_MspInit+0xf4>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB6     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 80009ea:	f44f 5382 	mov.w	r3, #4160	@ 0x1040
 80009ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f8:	2303      	movs	r3, #3
 80009fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80009fc:	2309      	movs	r3, #9
 80009fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	481c      	ldr	r0, [pc, #112]	@ (8000a78 <HAL_CAN_MspInit+0xf8>)
 8000a08:	f002 fb30 	bl	800306c <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN3_MspInit 1 */

  /* USER CODE END CAN3_MspInit 1 */
  }
}
 8000a0c:	e02c      	b.n	8000a68 <HAL_CAN_MspInit+0xe8>
  else if(canHandle->Instance==CAN3)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a1a      	ldr	r2, [pc, #104]	@ (8000a7c <HAL_CAN_MspInit+0xfc>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d127      	bne.n	8000a68 <HAL_CAN_MspInit+0xe8>
    __HAL_RCC_CAN3_CLK_ENABLE();
 8000a18:	4b16      	ldr	r3, [pc, #88]	@ (8000a74 <HAL_CAN_MspInit+0xf4>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1c:	4a15      	ldr	r2, [pc, #84]	@ (8000a74 <HAL_CAN_MspInit+0xf4>)
 8000a1e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a22:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a24:	4b13      	ldr	r3, [pc, #76]	@ (8000a74 <HAL_CAN_MspInit+0xf4>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a30:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <HAL_CAN_MspInit+0xf4>)
 8000a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a34:	4a0f      	ldr	r2, [pc, #60]	@ (8000a74 <HAL_CAN_MspInit+0xf4>)
 8000a36:	f043 0302 	orr.w	r3, r3, #2
 8000a3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a74 <HAL_CAN_MspInit+0xf4>)
 8000a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a40:	f003 0302 	and.w	r3, r3, #2
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000a48:	2318      	movs	r3, #24
 8000a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8000a58:	230b      	movs	r3, #11
 8000a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <HAL_CAN_MspInit+0xf8>)
 8000a64:	f002 fb02 	bl	800306c <HAL_GPIO_Init>
}
 8000a68:	bf00      	nop
 8000a6a:	3730      	adds	r7, #48	@ 0x30
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40006800 	.word	0x40006800
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020400 	.word	0x40020400
 8000a7c:	40003400 	.word	0x40003400

08000a80 <CAN_frame_init>:
#define WARN_OFFSET             0xFF

static uint32_t tx_mailbox;
#define WARN_OFFSET 0xFF

CAN_Frame_t CAN_frame_init(CAN_HandleTypeDef* handler, uint32_t id) {
 8000a80:	b4b0      	push	{r4, r5, r7}
 8000a82:	b08d      	sub	sp, #52	@ 0x34
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
    // default conditions
    CAN_Frame_t ret = {
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	2300      	movs	r3, #0
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	2300      	movs	r3, #0
 8000a96:	61bb      	str	r3, [r7, #24]
 8000a98:	2308      	movs	r3, #8
 8000a9a:	61fb      	str	r3, [r7, #28]
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .time_stamp = 0,
        .id = id,
        .data = {0}
        };

    return ret;
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	461d      	mov	r5, r3
 8000ab0:	f107 0410 	add.w	r4, r7, #16
 8000ab4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ab6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ab8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000abc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000ac0:	68f8      	ldr	r0, [r7, #12]
 8000ac2:	3734      	adds	r7, #52	@ 0x34
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bcb0      	pop	{r4, r5, r7}
 8000ac8:	4770      	bx	lr
	...

08000acc <CAN_send_frame>:

void CAN_send_frame(CAN_Frame_t self) {
 8000acc:	b084      	sub	sp, #16
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b086      	sub	sp, #24
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	f107 0c20 	add.w	ip, r7, #32
 8000ad8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    CAN_TxHeaderTypeDef tx_header = {
        .IDE = self.id_type,
        .RTR = self.rtr,
        .DLC = self.data_length,
        .StdId = self.id,
 8000adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    CAN_TxHeaderTypeDef tx_header = {
 8000ade:	603b      	str	r3, [r7, #0]
        .ExtId = self.id,
 8000ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    CAN_TxHeaderTypeDef tx_header = {
 8000ae2:	607b      	str	r3, [r7, #4]
        .IDE = self.id_type,
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    CAN_TxHeaderTypeDef tx_header = {
 8000ae6:	60bb      	str	r3, [r7, #8]
        .RTR = self.rtr,
 8000ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    CAN_TxHeaderTypeDef tx_header = {
 8000aea:	60fb      	str	r3, [r7, #12]
        .DLC = self.data_length,
 8000aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    CAN_TxHeaderTypeDef tx_header = {
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	2300      	movs	r3, #0
 8000af2:	753b      	strb	r3, [r7, #20]
        .TransmitGlobalTime = DISABLE
    };

    if (HAL_CAN_AddTxMessage(self.hcan, &tx_header, self.data, &tx_mailbox) != HAL_OK) {
 8000af4:	6a38      	ldr	r0, [r7, #32]
 8000af6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8000afa:	4639      	mov	r1, r7
 8000afc:	4b07      	ldr	r3, [pc, #28]	@ (8000b1c <CAN_send_frame+0x50>)
 8000afe:	f001 fd26 	bl	800254e <HAL_CAN_AddTxMessage>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <CAN_send_frame+0x40>
        Error_Handler();
 8000b08:	f000 fb6e 	bl	80011e8 <Error_Handler>
    }
}
 8000b0c:	bf00      	nop
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b16:	b004      	add	sp, #16
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	200001c0 	.word	0x200001c0

08000b20 <CAN_set_segment>:
    }

    return ret;
}

uint8_t CAN_set_segment(CAN_Frame_t* self, Data_Segment_t segment, uint32_t data) {
 8000b20:	b480      	push	{r7}
 8000b22:	b087      	sub	sp, #28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	1d38      	adds	r0, r7, #4
 8000b2a:	e880 0006 	stmia.w	r0, {r1, r2}
 8000b2e:	603b      	str	r3, [r7, #0]
    // return if IDs don't match
    if ((self->id != segment.id) && ((self->id << WARN_OFFSET) != segment.id)) {
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	695a      	ldr	r2, [r3, #20]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d009      	beq.n	8000b4e <CAN_set_segment+0x2e>
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	22ff      	movs	r2, #255	@ 0xff
 8000b40:	fa03 f202 	lsl.w	r2, r3, r2
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d001      	beq.n	8000b4e <CAN_set_segment+0x2e>
        return 1;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e01e      	b.n	8000b8c <CAN_set_segment+0x6c>
    }

    uint8_t length = (segment.end - segment.start) + 1; // segment numbering is 1-based indexing
 8000b4e:	7a7a      	ldrb	r2, [r7, #9]
 8000b50:	7a3b      	ldrb	r3, [r7, #8]
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	3301      	adds	r3, #1
 8000b58:	75bb      	strb	r3, [r7, #22]
    for(uint8_t i = 0; i < length; i++) {
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	75fb      	strb	r3, [r7, #23]
 8000b5e:	e010      	b.n	8000b82 <CAN_set_segment+0x62>
        self -> data[(segment.start - 1) + i] = ((data >> (8 * i)) & 0xFF); // converting to little endian format
 8000b60:	7dfb      	ldrb	r3, [r7, #23]
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	683a      	ldr	r2, [r7, #0]
 8000b66:	fa22 f103 	lsr.w	r1, r2, r3
 8000b6a:	7a3b      	ldrb	r3, [r7, #8]
 8000b6c:	1e5a      	subs	r2, r3, #1
 8000b6e:	7dfb      	ldrb	r3, [r7, #23]
 8000b70:	4413      	add	r3, r2
 8000b72:	b2c9      	uxtb	r1, r1
 8000b74:	68fa      	ldr	r2, [r7, #12]
 8000b76:	4413      	add	r3, r2
 8000b78:	460a      	mov	r2, r1
 8000b7a:	761a      	strb	r2, [r3, #24]
    for(uint8_t i = 0; i < length; i++) {
 8000b7c:	7dfb      	ldrb	r3, [r7, #23]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	75fb      	strb	r3, [r7, #23]
 8000b82:	7dfa      	ldrb	r2, [r7, #23]
 8000b84:	7dbb      	ldrb	r3, [r7, #22]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d3ea      	bcc.n	8000b60 <CAN_set_segment+0x40>
    }

    return 0;
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	371c      	adds	r7, #28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <MX_DMA_Init+0x38>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd0 <MX_DMA_Init+0x38>)
 8000ba4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <MX_DMA_Init+0x38>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2105      	movs	r1, #5
 8000bba:	2038      	movs	r0, #56	@ 0x38
 8000bbc:	f001 fea7 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000bc0:	2038      	movs	r0, #56	@ 0x38
 8000bc2:	f001 fec0 	bl	8002946 <HAL_NVIC_EnableIRQ>

}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of TempSem */
  TempSemHandle = osSemaphoreNew(1, 0, &TempSem_attributes);
 8000bd8:	4a14      	ldr	r2, [pc, #80]	@ (8000c2c <MX_FREERTOS_Init+0x58>)
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f004 fa39 	bl	8005054 <osSemaphoreNew>
 8000be2:	4603      	mov	r3, r0
 8000be4:	4a12      	ldr	r2, [pc, #72]	@ (8000c30 <MX_FREERTOS_Init+0x5c>)
 8000be6:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of temp_sensor_data */
  temp_sensor_dataHandle = osMessageQueueNew (16, sizeof(uint32_t), &temp_sensor_data_attributes);
 8000be8:	4a12      	ldr	r2, [pc, #72]	@ (8000c34 <MX_FREERTOS_Init+0x60>)
 8000bea:	2104      	movs	r1, #4
 8000bec:	2010      	movs	r0, #16
 8000bee:	f004 fb8b 	bl	8005308 <osMessageQueueNew>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a10      	ldr	r2, [pc, #64]	@ (8000c38 <MX_FREERTOS_Init+0x64>)
 8000bf6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000bf8:	4a10      	ldr	r2, [pc, #64]	@ (8000c3c <MX_FREERTOS_Init+0x68>)
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4810      	ldr	r0, [pc, #64]	@ (8000c40 <MX_FREERTOS_Init+0x6c>)
 8000bfe:	f004 f955 	bl	8004eac <osThreadNew>
 8000c02:	4603      	mov	r3, r0
 8000c04:	4a0f      	ldr	r2, [pc, #60]	@ (8000c44 <MX_FREERTOS_Init+0x70>)
 8000c06:	6013      	str	r3, [r2, #0]

  /* creation of temp_sense */
  temp_senseHandle = osThreadNew(StartTemp_Sense, NULL, &temp_sense_attributes);
 8000c08:	4a0f      	ldr	r2, [pc, #60]	@ (8000c48 <MX_FREERTOS_Init+0x74>)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	480f      	ldr	r0, [pc, #60]	@ (8000c4c <MX_FREERTOS_Init+0x78>)
 8000c0e:	f004 f94d 	bl	8004eac <osThreadNew>
 8000c12:	4603      	mov	r3, r0
 8000c14:	4a0e      	ldr	r2, [pc, #56]	@ (8000c50 <MX_FREERTOS_Init+0x7c>)
 8000c16:	6013      	str	r3, [r2, #0]

  /* creation of can_transmitter */
  can_transmitterHandle = osThreadNew(StartCan_Transmitter, NULL, &can_transmitter_attributes);
 8000c18:	4a0e      	ldr	r2, [pc, #56]	@ (8000c54 <MX_FREERTOS_Init+0x80>)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	480e      	ldr	r0, [pc, #56]	@ (8000c58 <MX_FREERTOS_Init+0x84>)
 8000c1e:	f004 f945 	bl	8004eac <osThreadNew>
 8000c22:	4603      	mov	r3, r0
 8000c24:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <MX_FREERTOS_Init+0x88>)
 8000c26:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	08008c28 	.word	0x08008c28
 8000c30:	200001d4 	.word	0x200001d4
 8000c34:	08008c10 	.word	0x08008c10
 8000c38:	200001d0 	.word	0x200001d0
 8000c3c:	08008ba4 	.word	0x08008ba4
 8000c40:	08000c61 	.word	0x08000c61
 8000c44:	200001c4 	.word	0x200001c4
 8000c48:	08008bc8 	.word	0x08008bc8
 8000c4c:	08000c71 	.word	0x08000c71
 8000c50:	200001c8 	.word	0x200001c8
 8000c54:	08008bec 	.word	0x08008bec
 8000c58:	08000ced 	.word	0x08000ced
 8000c5c:	200001cc 	.word	0x200001cc

08000c60 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f004 f9c5 	bl	8004ff8 <osDelay>
 8000c6e:	e7fb      	b.n	8000c68 <StartDefaultTask+0x8>

08000c70 <StartTemp_Sense>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTemp_Sense */
void StartTemp_Sense(void *argument)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	f5ad 6d9d 	sub.w	sp, sp, #1256	@ 0x4e8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8000c7c:	f2a3 43e4 	subw	r3, r3, #1252	@ 0x4e4
 8000c80:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTemp_Sense */
	uint32_t adc_data[NUM_MUX];
	uint32_t temp_average[NUM_MUX] = {0}; //average temp from the previous iterations
 8000c82:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]
 8000c92:	615a      	str	r2, [r3, #20]
	uint32_t temp_data[NUM_SAMPLES][NUM_MUX] = {0};
 8000c94:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8000c98:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	f007 fdb9 	bl	800881c <memset>
  /* Infinite loop */
  for(;;)
  {
	//Measures average thermistor temperature of each MUX
	measureTempADC(temp_average, adc_data, temp_data);
 8000caa:	f107 0208 	add.w	r2, r7, #8
 8000cae:	f507 619a 	add.w	r1, r7, #1232	@ 0x4d0
 8000cb2:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 fbd2 	bl	8001460 <measureTempADC>
	osMessageQueuePut(temp_sensor_dataHandle, temp_average, 0, osWaitForever);
 8000cbc:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <StartTemp_Sense+0x74>)
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	f507 6197 	add.w	r1, r7, #1208	@ 0x4b8
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f004 fba3 	bl	8005414 <osMessageQueuePut>
	osSemaphoreRelease(TempSemHandle);
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <StartTemp_Sense+0x78>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f004 fac0 	bl	8005258 <osSemaphoreRelease>
    osDelay(1);
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f004 f98d 	bl	8004ff8 <osDelay>
	measureTempADC(temp_average, adc_data, temp_data);
 8000cde:	bf00      	nop
 8000ce0:	e7e3      	b.n	8000caa <StartTemp_Sense+0x3a>
 8000ce2:	bf00      	nop
 8000ce4:	200001d0 	.word	0x200001d0
 8000ce8:	200001d4 	.word	0x200001d4

08000cec <StartCan_Transmitter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCan_Transmitter */
void StartCan_Transmitter(void *argument)
{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b097      	sub	sp, #92	@ 0x5c
 8000cf0:	af04      	add	r7, sp, #16
 8000cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCan_Transmitter */

	//create buffer int array/ use to pull data
	uint32_t temp_buffer[NUM_MUX] = {0};
 8000cf4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
 8000d04:	615a      	str	r2, [r3, #20]
	//Initialize the tx CAN frame, use this to send out data (frame is a package of mail)
	CAN_Frame_t tx_frame = CAN_frame_init(&hcan2, BMS_BOARD);
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	22ff      	movs	r2, #255	@ 0xff
 8000d0c:	492e      	ldr	r1, [pc, #184]	@ (8000dc8 <StartCan_Transmitter+0xdc>)
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f7ff feb6 	bl	8000a80 <CAN_frame_init>
	//Error code initialization
	uint8_t error_code = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  /* Infinite loop */
  for(;;)
  {
	//semaphore acquire (counter--)
	osSemaphoreAcquire(TempSemHandle, osWaitForever);
 8000d1a:	4b2c      	ldr	r3, [pc, #176]	@ (8000dcc <StartCan_Transmitter+0xe0>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f04f 31ff 	mov.w	r1, #4294967295
 8000d22:	4618      	mov	r0, r3
 8000d24:	f004 fa32 	bl	800518c <osSemaphoreAcquire>
	//receives the message from the transmitter
	//grab value from os queue and put into buffer
	osMessageQueueGet(temp_sensor_dataHandle, temp_buffer, NULL, osWaitForever);
 8000d28:	4b29      	ldr	r3, [pc, #164]	@ (8000dd0 <StartCan_Transmitter+0xe4>)
 8000d2a:	6818      	ldr	r0, [r3, #0]
 8000d2c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000d30:	f04f 33ff 	mov.w	r3, #4294967295
 8000d34:	2200      	movs	r2, #0
 8000d36:	f004 fbe1 	bl	80054fc <osMessageQueueGet>

	//CAN_set_segment for each value in the temp buffer
	CAN_set_segment(&tx_frame, MUX1_TEMP , temp_buffer[0]);
 8000d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d3c:	4a25      	ldr	r2, [pc, #148]	@ (8000dd4 <StartCan_Transmitter+0xe8>)
 8000d3e:	f107 000c 	add.w	r0, r7, #12
 8000d42:	ca06      	ldmia	r2, {r1, r2}
 8000d44:	f7ff feec 	bl	8000b20 <CAN_set_segment>
	CAN_set_segment(&tx_frame, MUX2_TEMP , temp_buffer[1]);
 8000d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000d4a:	4a23      	ldr	r2, [pc, #140]	@ (8000dd8 <StartCan_Transmitter+0xec>)
 8000d4c:	f107 000c 	add.w	r0, r7, #12
 8000d50:	ca06      	ldmia	r2, {r1, r2}
 8000d52:	f7ff fee5 	bl	8000b20 <CAN_set_segment>
	CAN_set_segment(&tx_frame, MUX3_TEMP , temp_buffer[2]);
 8000d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d58:	4a20      	ldr	r2, [pc, #128]	@ (8000ddc <StartCan_Transmitter+0xf0>)
 8000d5a:	f107 000c 	add.w	r0, r7, #12
 8000d5e:	ca06      	ldmia	r2, {r1, r2}
 8000d60:	f7ff fede 	bl	8000b20 <CAN_set_segment>
	CAN_set_segment(&tx_frame, MUX4_TEMP , temp_buffer[3]);
 8000d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000d66:	4a1e      	ldr	r2, [pc, #120]	@ (8000de0 <StartCan_Transmitter+0xf4>)
 8000d68:	f107 000c 	add.w	r0, r7, #12
 8000d6c:	ca06      	ldmia	r2, {r1, r2}
 8000d6e:	f7ff fed7 	bl	8000b20 <CAN_set_segment>
	CAN_set_segment(&tx_frame, MUX5_TEMP , temp_buffer[4]);
 8000d72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d74:	4a1b      	ldr	r2, [pc, #108]	@ (8000de4 <StartCan_Transmitter+0xf8>)
 8000d76:	f107 000c 	add.w	r0, r7, #12
 8000d7a:	ca06      	ldmia	r2, {r1, r2}
 8000d7c:	f7ff fed0 	bl	8000b20 <CAN_set_segment>
	CAN_set_segment(&tx_frame, MUX6_TEMP , temp_buffer[5]);
 8000d80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000d82:	4a19      	ldr	r2, [pc, #100]	@ (8000de8 <StartCan_Transmitter+0xfc>)
 8000d84:	f107 000c 	add.w	r0, r7, #12
 8000d88:	ca06      	ldmia	r2, {r1, r2}
 8000d8a:	f7ff fec9 	bl	8000b20 <CAN_set_segment>

	//error code something
	CAN_set_segment(&tx_frame, BMS_ERROR_CODE, error_code);
 8000d8e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000d92:	4a16      	ldr	r2, [pc, #88]	@ (8000dec <StartCan_Transmitter+0x100>)
 8000d94:	f107 000c 	add.w	r0, r7, #12
 8000d98:	ca06      	ldmia	r2, {r1, r2}
 8000d9a:	f7ff fec1 	bl	8000b20 <CAN_set_segment>

	//Send data to RPI
    if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan2)) {
 8000d9e:	480a      	ldr	r0, [pc, #40]	@ (8000dc8 <StartCan_Transmitter+0xdc>)
 8000da0:	f001 fca5 	bl	80026ee <HAL_CAN_GetTxMailboxesFreeLevel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d00a      	beq.n	8000dc0 <StartCan_Transmitter+0xd4>
    	CAN_send_frame(tx_frame);
 8000daa:	466c      	mov	r4, sp
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000db2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000db6:	f107 030c 	add.w	r3, r7, #12
 8000dba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000dbc:	f7ff fe86 	bl	8000acc <CAN_send_frame>
    }

	osDelay(1);
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f004 f919 	bl	8004ff8 <osDelay>
	osSemaphoreAcquire(TempSemHandle, osWaitForever);
 8000dc6:	e7a8      	b.n	8000d1a <StartCan_Transmitter+0x2e>
 8000dc8:	20000170 	.word	0x20000170
 8000dcc:	200001d4 	.word	0x200001d4
 8000dd0:	200001d0 	.word	0x200001d0
 8000dd4:	08008b6c 	.word	0x08008b6c
 8000dd8:	08008b74 	.word	0x08008b74
 8000ddc:	08008b7c 	.word	0x08008b7c
 8000de0:	08008b84 	.word	0x08008b84
 8000de4:	08008b8c 	.word	0x08008b8c
 8000de8:	08008b94 	.word	0x08008b94
 8000dec:	08008b9c 	.word	0x08008b9c

08000df0 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08e      	sub	sp, #56	@ 0x38
 8000df4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e06:	4b9e      	ldr	r3, [pc, #632]	@ (8001080 <MX_GPIO_Init+0x290>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	4a9d      	ldr	r2, [pc, #628]	@ (8001080 <MX_GPIO_Init+0x290>)
 8000e0c:	f043 0310 	orr.w	r3, r3, #16
 8000e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e12:	4b9b      	ldr	r3, [pc, #620]	@ (8001080 <MX_GPIO_Init+0x290>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	f003 0310 	and.w	r3, r3, #16
 8000e1a:	623b      	str	r3, [r7, #32]
 8000e1c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1e:	4b98      	ldr	r3, [pc, #608]	@ (8001080 <MX_GPIO_Init+0x290>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	4a97      	ldr	r2, [pc, #604]	@ (8001080 <MX_GPIO_Init+0x290>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2a:	4b95      	ldr	r3, [pc, #596]	@ (8001080 <MX_GPIO_Init+0x290>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	61fb      	str	r3, [r7, #28]
 8000e34:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e36:	4b92      	ldr	r3, [pc, #584]	@ (8001080 <MX_GPIO_Init+0x290>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	4a91      	ldr	r2, [pc, #580]	@ (8001080 <MX_GPIO_Init+0x290>)
 8000e3c:	f043 0320 	orr.w	r3, r3, #32
 8000e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e42:	4b8f      	ldr	r3, [pc, #572]	@ (8001080 <MX_GPIO_Init+0x290>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	f003 0320 	and.w	r3, r3, #32
 8000e4a:	61bb      	str	r3, [r7, #24]
 8000e4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e4e:	4b8c      	ldr	r3, [pc, #560]	@ (8001080 <MX_GPIO_Init+0x290>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	4a8b      	ldr	r2, [pc, #556]	@ (8001080 <MX_GPIO_Init+0x290>)
 8000e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5a:	4b89      	ldr	r3, [pc, #548]	@ (8001080 <MX_GPIO_Init+0x290>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b86      	ldr	r3, [pc, #536]	@ (8001080 <MX_GPIO_Init+0x290>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a85      	ldr	r2, [pc, #532]	@ (8001080 <MX_GPIO_Init+0x290>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b83      	ldr	r3, [pc, #524]	@ (8001080 <MX_GPIO_Init+0x290>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	4b80      	ldr	r3, [pc, #512]	@ (8001080 <MX_GPIO_Init+0x290>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	4a7f      	ldr	r2, [pc, #508]	@ (8001080 <MX_GPIO_Init+0x290>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8a:	4b7d      	ldr	r3, [pc, #500]	@ (8001080 <MX_GPIO_Init+0x290>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e96:	4b7a      	ldr	r3, [pc, #488]	@ (8001080 <MX_GPIO_Init+0x290>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9a:	4a79      	ldr	r2, [pc, #484]	@ (8001080 <MX_GPIO_Init+0x290>)
 8000e9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ea0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea2:	4b77      	ldr	r3, [pc, #476]	@ (8001080 <MX_GPIO_Init+0x290>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eae:	4b74      	ldr	r3, [pc, #464]	@ (8001080 <MX_GPIO_Init+0x290>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	4a73      	ldr	r2, [pc, #460]	@ (8001080 <MX_GPIO_Init+0x290>)
 8000eb4:	f043 0308 	orr.w	r3, r3, #8
 8000eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eba:	4b71      	ldr	r3, [pc, #452]	@ (8001080 <MX_GPIO_Init+0x290>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	f003 0308 	and.w	r3, r3, #8
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2108      	movs	r1, #8
 8000eca:	486e      	ldr	r0, [pc, #440]	@ (8001084 <MX_GPIO_Init+0x294>)
 8000ecc:	f002 fa7a 	bl	80033c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2107      	movs	r1, #7
 8000ed4:	486c      	ldr	r0, [pc, #432]	@ (8001088 <MX_GPIO_Init+0x298>)
 8000ed6:	f002 fa75 	bl	80033c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000ee0:	486a      	ldr	r0, [pc, #424]	@ (800108c <MX_GPIO_Init+0x29c>)
 8000ee2:	f002 fa6f 	bl	80033c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2142      	movs	r1, #66	@ 0x42
 8000eea:	4869      	ldr	r0, [pc, #420]	@ (8001090 <MX_GPIO_Init+0x2a0>)
 8000eec:	f002 fa6a 	bl	80033c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f04:	4619      	mov	r1, r3
 8000f06:	485f      	ldr	r0, [pc, #380]	@ (8001084 <MX_GPIO_Init+0x294>)
 8000f08:	f002 f8b0 	bl	800306c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f12:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f20:	4619      	mov	r1, r3
 8000f22:	485c      	ldr	r0, [pc, #368]	@ (8001094 <MX_GPIO_Init+0x2a4>)
 8000f24:	f002 f8a2 	bl	800306c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000f28:	2307      	movs	r3, #7
 8000f2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4852      	ldr	r0, [pc, #328]	@ (8001088 <MX_GPIO_Init+0x298>)
 8000f40:	f002 f894 	bl	800306c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f44:	2332      	movs	r3, #50	@ 0x32
 8000f46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f50:	2303      	movs	r3, #3
 8000f52:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f54:	230b      	movs	r3, #11
 8000f56:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	484d      	ldr	r0, [pc, #308]	@ (8001094 <MX_GPIO_Init+0x2a4>)
 8000f60:	f002 f884 	bl	800306c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000f64:	2386      	movs	r3, #134	@ 0x86
 8000f66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f74:	230b      	movs	r3, #11
 8000f76:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4846      	ldr	r0, [pc, #280]	@ (8001098 <MX_GPIO_Init+0x2a8>)
 8000f80:	f002 f874 	bl	800306c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000f84:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	483b      	ldr	r0, [pc, #236]	@ (800108c <MX_GPIO_Init+0x29c>)
 8000f9e:	f002 f865 	bl	800306c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG1 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|USB_PowerSwitchOn_Pin;
 8000fa2:	2342      	movs	r3, #66	@ 0x42
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4835      	ldr	r0, [pc, #212]	@ (8001090 <MX_GPIO_Init+0x2a0>)
 8000fba:	f002 f857 	bl	800306c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000fbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fd0:	230b      	movs	r3, #11
 8000fd2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd8:	4619      	mov	r1, r3
 8000fda:	482c      	ldr	r0, [pc, #176]	@ (800108c <MX_GPIO_Init+0x29c>)
 8000fdc:	f002 f846 	bl	800306c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fe0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fe4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ff2:	2307      	movs	r3, #7
 8000ff4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4827      	ldr	r0, [pc, #156]	@ (800109c <MX_GPIO_Init+0x2ac>)
 8000ffe:	f002 f835 	bl	800306c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001002:	2380      	movs	r3, #128	@ 0x80
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001006:	2300      	movs	r3, #0
 8001008:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001012:	4619      	mov	r1, r3
 8001014:	481e      	ldr	r0, [pc, #120]	@ (8001090 <MX_GPIO_Init+0x2a0>)
 8001016:	f002 f829 	bl	800306c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800101a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800101e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	2302      	movs	r3, #2
 8001022:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800102c:	230a      	movs	r3, #10
 800102e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001030:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001034:	4619      	mov	r1, r3
 8001036:	4818      	ldr	r0, [pc, #96]	@ (8001098 <MX_GPIO_Init+0x2a8>)
 8001038:	f002 f818 	bl	800306c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800103c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001040:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001042:	2300      	movs	r3, #0
 8001044:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800104a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800104e:	4619      	mov	r1, r3
 8001050:	4811      	ldr	r0, [pc, #68]	@ (8001098 <MX_GPIO_Init+0x2a8>)
 8001052:	f002 f80b 	bl	800306c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001056:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800105a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001068:	230b      	movs	r3, #11
 800106a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800106c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001070:	4619      	mov	r1, r3
 8001072:	4807      	ldr	r0, [pc, #28]	@ (8001090 <MX_GPIO_Init+0x2a0>)
 8001074:	f001 fffa 	bl	800306c <HAL_GPIO_Init>

}
 8001078:	bf00      	nop
 800107a:	3738      	adds	r7, #56	@ 0x38
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40023800 	.word	0x40023800
 8001084:	40021000 	.word	0x40021000
 8001088:	40021400 	.word	0x40021400
 800108c:	40020400 	.word	0x40020400
 8001090:	40021800 	.word	0x40021800
 8001094:	40020800 	.word	0x40020800
 8001098:	40020000 	.word	0x40020000
 800109c:	40020c00 	.word	0x40020c00

080010a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a4:	f000 fca9 	bl	80019fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a8:	f000 f82c 	bl	8001104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ac:	f7ff fea0 	bl	8000df0 <MX_GPIO_Init>
  MX_DMA_Init();
 80010b0:	f7ff fd72 	bl	8000b98 <MX_DMA_Init>
  MX_ADC1_Init();
 80010b4:	f7ff fa3c 	bl	8000530 <MX_ADC1_Init>
  MX_ADC3_Init();
 80010b8:	f7ff fa8c 	bl	80005d4 <MX_ADC3_Init>
  MX_CAN3_Init();
 80010bc:	f7ff fc2c 	bl	8000918 <MX_CAN3_Init>
  MX_TIM3_Init();
 80010c0:	f000 fab8 	bl	8001634 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010c4:	f000 fb2e 	bl	8001724 <MX_TIM4_Init>
  MX_CAN2_Init();
 80010c8:	f7ff fbf2 	bl	80008b0 <MX_CAN2_Init>
  MX_TIM2_Init();
 80010cc:	f000 fa3a 	bl	8001544 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc3, adc_data, NUM_MUX);
 80010d0:	2206      	movs	r2, #6
 80010d2:	4909      	ldr	r1, [pc, #36]	@ (80010f8 <main+0x58>)
 80010d4:	4809      	ldr	r0, [pc, #36]	@ (80010fc <main+0x5c>)
 80010d6:	f000 fd55 	bl	8001b84 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80010da:	2100      	movs	r1, #0
 80010dc:	4808      	ldr	r0, [pc, #32]	@ (8001100 <main+0x60>)
 80010de:	f002 ff43 	bl	8003f68 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010e2:	f003 fe79 	bl	8004dd8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80010e6:	f7ff fd75 	bl	8000bd4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80010ea:	f003 fea9 	bl	8004e40 <osKernelStart>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //Code for sending CAN message
	  HAL_Delay(SAMPLE_DELAY);
 80010ee:	200a      	movs	r0, #10
 80010f0:	f000 fce0 	bl	8001ab4 <HAL_Delay>
 80010f4:	e7fb      	b.n	80010ee <main+0x4e>
 80010f6:	bf00      	nop
 80010f8:	200001d8 	.word	0x200001d8
 80010fc:	200000c8 	.word	0x200000c8
 8001100:	200001f0 	.word	0x200001f0

08001104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b094      	sub	sp, #80	@ 0x50
 8001108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	2234      	movs	r2, #52	@ 0x34
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f007 fb82 	bl	800881c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001128:	f002 f966 	bl	80033f8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800112c:	4b2c      	ldr	r3, [pc, #176]	@ (80011e0 <SystemClock_Config+0xdc>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001130:	4a2b      	ldr	r2, [pc, #172]	@ (80011e0 <SystemClock_Config+0xdc>)
 8001132:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001136:	6413      	str	r3, [r2, #64]	@ 0x40
 8001138:	4b29      	ldr	r3, [pc, #164]	@ (80011e0 <SystemClock_Config+0xdc>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001144:	4b27      	ldr	r3, [pc, #156]	@ (80011e4 <SystemClock_Config+0xe0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800114c:	4a25      	ldr	r2, [pc, #148]	@ (80011e4 <SystemClock_Config+0xe0>)
 800114e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b23      	ldr	r3, [pc, #140]	@ (80011e4 <SystemClock_Config+0xe0>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800115c:	603b      	str	r3, [r7, #0]
 800115e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001160:	2301      	movs	r3, #1
 8001162:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001164:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001168:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800116a:	2302      	movs	r3, #2
 800116c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800116e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001172:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001174:	2304      	movs	r3, #4
 8001176:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001178:	2360      	movs	r3, #96	@ 0x60
 800117a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800117c:	2302      	movs	r3, #2
 800117e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001180:	2304      	movs	r3, #4
 8001182:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001184:	2302      	movs	r3, #2
 8001186:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4618      	mov	r0, r3
 800118e:	f002 f993 	bl	80034b8 <HAL_RCC_OscConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001198:	f000 f826 	bl	80011e8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800119c:	f002 f93c 	bl	8003418 <HAL_PWREx_EnableOverDrive>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80011a6:	f000 f81f 	bl	80011e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011aa:	230f      	movs	r3, #15
 80011ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ae:	2302      	movs	r3, #2
 80011b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	2103      	movs	r1, #3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f002 fc24 	bl	8003a14 <HAL_RCC_ClockConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80011d2:	f000 f809 	bl	80011e8 <Error_Handler>
  }
}
 80011d6:	bf00      	nop
 80011d8:	3750      	adds	r7, #80	@ 0x50
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40007000 	.word	0x40007000

080011e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011ec:	b672      	cpsid	i
}
 80011ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <Error_Handler+0x8>

080011f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <HAL_MspInit+0x4c>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	4a10      	ldr	r2, [pc, #64]	@ (8001240 <HAL_MspInit+0x4c>)
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001204:	6413      	str	r3, [r2, #64]	@ 0x40
 8001206:	4b0e      	ldr	r3, [pc, #56]	@ (8001240 <HAL_MspInit+0x4c>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	4b0b      	ldr	r3, [pc, #44]	@ (8001240 <HAL_MspInit+0x4c>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001216:	4a0a      	ldr	r2, [pc, #40]	@ (8001240 <HAL_MspInit+0x4c>)
 8001218:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800121c:	6453      	str	r3, [r2, #68]	@ 0x44
 800121e:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <HAL_MspInit+0x4c>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	210f      	movs	r1, #15
 800122e:	f06f 0001 	mvn.w	r0, #1
 8001232:	f001 fb6c 	bl	800290e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <NMI_Handler+0x4>

0800124c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <MemManage_Handler+0x4>

0800125c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <BusFault_Handler+0x4>

08001264 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <UsageFault_Handler+0x4>

0800126c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127e:	f000 fbf9 	bl	8001a74 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001282:	f006 f953 	bl	800752c <xTaskGetSchedulerState>
 8001286:	4603      	mov	r3, r0
 8001288:	2b01      	cmp	r3, #1
 800128a:	d001      	beq.n	8001290 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800128c:	f007 f844 	bl	8008318 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}

08001294 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001298:	4802      	ldr	r0, [pc, #8]	@ (80012a4 <DMA2_Stream0_IRQHandler+0x10>)
 800129a:	f001 fc7d 	bl	8002b98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000110 	.word	0x20000110

080012a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012ac:	4b06      	ldr	r3, [pc, #24]	@ (80012c8 <SystemInit+0x20>)
 80012ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012b2:	4a05      	ldr	r2, [pc, #20]	@ (80012c8 <SystemInit+0x20>)
 80012b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <enqueue>:
//Function: Adds temperature sample to array stored in memory and updates final average temperature table
//Inputs:   temp_average(old array of average temperatures for each MUX over n samples),
//          temp_snapshot(array containing 1 sample of MUX temperature data),
//          temp_data(array stored in memory containing past n temperature samples)
//Outputs:  average_mux_temp(updated array of average temperatures for each MUX over n samples), temp_data(modified temperature array)
void enqueue(uint32_t *temp_average, uint32_t temp_snapshot[NUM_MUX], uint32_t *temp_data[NUM_MUX]) {
 80012cc:	b480      	push	{r7}
 80012ce:	b087      	sub	sp, #28
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
	rear = (rear + 1) % NUM_SAMPLES;
 80012d8:	4b31      	ldr	r3, [pc, #196]	@ (80013a0 <enqueue+0xd4>)
 80012da:	f993 3000 	ldrsb.w	r3, [r3]
 80012de:	3301      	adds	r3, #1
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b30      	ldr	r3, [pc, #192]	@ (80013a4 <enqueue+0xd8>)
 80012e4:	fba3 1302 	umull	r1, r3, r3, r2
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	2132      	movs	r1, #50	@ 0x32
 80012ec:	fb01 f303 	mul.w	r3, r1, r3
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	b25a      	sxtb	r2, r3
 80012f4:	4b2a      	ldr	r3, [pc, #168]	@ (80013a0 <enqueue+0xd4>)
 80012f6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0U; i < NUM_MUX; ++i){
 80012f8:	2300      	movs	r3, #0
 80012fa:	75fb      	strb	r3, [r7, #23]
 80012fc:	e046      	b.n	800138c <enqueue+0xc0>
		temp_average[i] -= temp_data[rear][i] / NUM_SAMPLES;
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	4413      	add	r3, r2
 8001306:	6819      	ldr	r1, [r3, #0]
 8001308:	4b25      	ldr	r3, [pc, #148]	@ (80013a0 <enqueue+0xd4>)
 800130a:	f993 3000 	ldrsb.w	r3, [r3]
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	4413      	add	r3, r2
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	7dfb      	ldrb	r3, [r7, #23]
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	4413      	add	r3, r2
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a21      	ldr	r2, [pc, #132]	@ (80013a4 <enqueue+0xd8>)
 8001320:	fba2 2303 	umull	r2, r3, r2, r3
 8001324:	091a      	lsrs	r2, r3, #4
 8001326:	7dfb      	ldrb	r3, [r7, #23]
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	68f8      	ldr	r0, [r7, #12]
 800132c:	4403      	add	r3, r0
 800132e:	1a8a      	subs	r2, r1, r2
 8001330:	601a      	str	r2, [r3, #0]
		temp_data[rear][i] = temp_snapshot[i];
 8001332:	7dfb      	ldrb	r3, [r7, #23]
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	441a      	add	r2, r3
 800133a:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <enqueue+0xd4>)
 800133c:	f993 3000 	ldrsb.w	r3, [r3]
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	440b      	add	r3, r1
 8001346:	6819      	ldr	r1, [r3, #0]
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	601a      	str	r2, [r3, #0]
		temp_average[i] += temp_data[rear][i] / NUM_SAMPLES;
 8001352:	7dfb      	ldrb	r3, [r7, #23]
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	4413      	add	r3, r2
 800135a:	6819      	ldr	r1, [r3, #0]
 800135c:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <enqueue+0xd4>)
 800135e:	f993 3000 	ldrsb.w	r3, [r3]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	7dfb      	ldrb	r3, [r7, #23]
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a0c      	ldr	r2, [pc, #48]	@ (80013a4 <enqueue+0xd8>)
 8001374:	fba2 2303 	umull	r2, r3, r2, r3
 8001378:	091a      	lsrs	r2, r3, #4
 800137a:	7dfb      	ldrb	r3, [r7, #23]
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	4403      	add	r3, r0
 8001382:	440a      	add	r2, r1
 8001384:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0U; i < NUM_MUX; ++i){
 8001386:	7dfb      	ldrb	r3, [r7, #23]
 8001388:	3301      	adds	r3, #1
 800138a:	75fb      	strb	r3, [r7, #23]
 800138c:	7dfb      	ldrb	r3, [r7, #23]
 800138e:	2b05      	cmp	r3, #5
 8001390:	d9b5      	bls.n	80012fe <enqueue+0x32>
	}
	return;
 8001392:	bf00      	nop
}
 8001394:	371c      	adds	r7, #28
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000004 	.word	0x20000004
 80013a4:	51eb851f 	.word	0x51eb851f

080013a8 <calculateTemperature>:

//Function: Calculates thermistor value in resistance and converts to degrees C using the Steinhart-Hart equation
//Inputs:   adc_data(reading from the ADC)
//Outputs:  tempSteinhart(temperature in degrees C)
uint32_t calculateTemperature (uint32_t adc_data) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	//Convert the ADC value being read into a resistance.
	//R = 8250 / (4096 / (ADC*GainTranslation) - 1)
	uint32_t voltage_out = adc_data * VOLTAGE_SUPPLY / 4095U;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	ee07 3a90 	vmov	s15, r3
 80013b6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80013ba:	eeb0 6b04 	vmov.f64	d6, #4	@ 0x40200000  2.5
 80013be:	ee27 6b06 	vmul.f64	d6, d7, d6
 80013c2:	ed9f 5b21 	vldr	d5, [pc, #132]	@ 8001448 <calculateTemperature+0xa0>
 80013c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013ca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80013ce:	ee17 3a90 	vmov	r3, s15
 80013d2:	617b      	str	r3, [r7, #20]
	uint32_t thermistor_resistance = voltage_out * R10K / (VOLTAGE_SUPPLY - voltage_out);
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80013da:	fb02 f303 	mul.w	r3, r2, r3
 80013de:	ee07 3a90 	vmov	s15, r3
 80013e2:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	ee07 3a90 	vmov	s15, r3
 80013ec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80013f0:	eeb0 6b04 	vmov.f64	d6, #4	@ 0x40200000  2.5
 80013f4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80013f8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001400:	ee17 3a90 	vmov	r3, s15
 8001404:	613b      	str	r3, [r7, #16]

	//Calculates Temperature from Resistance of thermistor using the Simplified B parameter Steinhart Equation.
	//1/Temp = 1/NominalTemp + (1/B)*1n(Thermistor Resistance/NominalResistance)
	uint32_t temp_steinhart = -ABSOLUTE_ZERO + (1.0/((1.0/ (NOMINAL_TEMPERATURE + ABSOLUTE_ZERO)) + (log(thermistor_resistance / NOMINAL_RESISTANCE) / B_COEFFICIENT)));
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001410:	eeb0 0b47 	vmov.f64	d0, d7
 8001414:	f007 fa44 	bl	80088a0 <log>
 8001418:	eeb0 7b40 	vmov.f64	d7, d0
 800141c:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8001450 <calculateTemperature+0xa8>
 8001420:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001424:	eeb7 5b00 	vmov.f64	d5, #112	@ 0x3f800000  1.0
 8001428:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800142c:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 8001458 <calculateTemperature+0xb0>
 8001430:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001434:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001438:	ee17 3a90 	vmov	r3, s15
 800143c:	60fb      	str	r3, [r7, #12]
	return temp_steinhart;
 800143e:	68fb      	ldr	r3, [r7, #12]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3718      	adds	r7, #24
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	00000000 	.word	0x00000000
 800144c:	40affe00 	.word	0x40affe00
 8001450:	d2922395 	.word	0xd2922395
 8001454:	3f6de1a6 	.word	0x3f6de1a6
 8001458:	66666666 	.word	0x66666666
 800145c:	40711266 	.word	0x40711266

08001460 <measureTempADC>:
//Inputs:   adc_data(array containing measured values from ADCs),
//          temp_data(array stored in memory containing past n temperature samples),
//          temp_average(array containing average multiplexor temperature)
//Outputs:  temp_data(modified temperature array)
void measureTempADC(uint32_t *temp_average, uint32_t *adc_data, uint32_t *temp_data[NUM_MUX])
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08c      	sub	sp, #48	@ 0x30
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
	uint32_t temp_snapshot[NUM_MUX] = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
 800147c:	615a      	str	r2, [r3, #20]
	for(uint8_t i = 0U; i < NUM_THERM_PER_MUX; ++i){
 800147e:	2300      	movs	r3, #0
 8001480:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001484:	e04d      	b.n	8001522 <measureTempADC+0xc2>
		//Increment orientation of MUX control lines.
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, i & 0x1);
 8001486:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	b2db      	uxtb	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	2101      	movs	r1, #1
 8001494:	482a      	ldr	r0, [pc, #168]	@ (8001540 <measureTempADC+0xe0>)
 8001496:	f001 ff95 	bl	80033c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, i >> 1 & 0x1);
 800149a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800149e:	085b      	lsrs	r3, r3, #1
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	461a      	mov	r2, r3
 80014aa:	2102      	movs	r1, #2
 80014ac:	4824      	ldr	r0, [pc, #144]	@ (8001540 <measureTempADC+0xe0>)
 80014ae:	f001 ff89 	bl	80033c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, i >> 2 & 0x1);
 80014b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014b6:	089b      	lsrs	r3, r3, #2
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	461a      	mov	r2, r3
 80014c2:	2104      	movs	r1, #4
 80014c4:	481e      	ldr	r0, [pc, #120]	@ (8001540 <measureTempADC+0xe0>)
 80014c6:	f001 ff7d 	bl	80033c4 <HAL_GPIO_WritePin>

		//Record average temperature of each MUX.
		for(uint8_t i = 0U; i < NUM_MUX; ++i){
 80014ca:	2300      	movs	r3, #0
 80014cc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80014d0:	e01e      	b.n	8001510 <measureTempADC+0xb0>
			temp_snapshot[i] += calculateTemperature(adc_data[i]) / NUM_THERM_PER_MUX;
 80014d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	68ba      	ldr	r2, [r7, #8]
 80014da:	4413      	add	r3, r2
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff ff62 	bl	80013a8 <calculateTemperature>
 80014e4:	4603      	mov	r3, r0
 80014e6:	08d9      	lsrs	r1, r3, #3
 80014e8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	3330      	adds	r3, #48	@ 0x30
 80014f0:	443b      	add	r3, r7
 80014f2:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80014f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80014fa:	440a      	add	r2, r1
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	3330      	adds	r3, #48	@ 0x30
 8001500:	443b      	add	r3, r7
 8001502:	f843 2c1c 	str.w	r2, [r3, #-28]
		for(uint8_t i = 0U; i < NUM_MUX; ++i){
 8001506:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800150a:	3301      	adds	r3, #1
 800150c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8001510:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001514:	2b05      	cmp	r3, #5
 8001516:	d9dc      	bls.n	80014d2 <measureTempADC+0x72>
	for(uint8_t i = 0U; i < NUM_THERM_PER_MUX; ++i){
 8001518:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800151c:	3301      	adds	r3, #1
 800151e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001522:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001526:	2b07      	cmp	r3, #7
 8001528:	d9ad      	bls.n	8001486 <measureTempADC+0x26>
		}
	}
	enqueue(temp_average, temp_snapshot, temp_data);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	4619      	mov	r1, r3
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f7ff feca 	bl	80012cc <enqueue>
	return;
 8001538:	bf00      	nop
}
 800153a:	3730      	adds	r7, #48	@ 0x30
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40021400 	.word	0x40021400

08001544 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08e      	sub	sp, #56	@ 0x38
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001564:	463b      	mov	r3, r7
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]
 8001572:	615a      	str	r2, [r3, #20]
 8001574:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001576:	4b2e      	ldr	r3, [pc, #184]	@ (8001630 <MX_TIM2_Init+0xec>)
 8001578:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800157c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 800157e:	4b2c      	ldr	r3, [pc, #176]	@ (8001630 <MX_TIM2_Init+0xec>)
 8001580:	225f      	movs	r2, #95	@ 0x5f
 8001582:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001584:	4b2a      	ldr	r3, [pc, #168]	@ (8001630 <MX_TIM2_Init+0xec>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800158a:	4b29      	ldr	r3, [pc, #164]	@ (8001630 <MX_TIM2_Init+0xec>)
 800158c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001590:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001592:	4b27      	ldr	r3, [pc, #156]	@ (8001630 <MX_TIM2_Init+0xec>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001598:	4b25      	ldr	r3, [pc, #148]	@ (8001630 <MX_TIM2_Init+0xec>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800159e:	4824      	ldr	r0, [pc, #144]	@ (8001630 <MX_TIM2_Init+0xec>)
 80015a0:	f002 fc2a 	bl	8003df8 <HAL_TIM_Base_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80015aa:	f7ff fe1d 	bl	80011e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015b8:	4619      	mov	r1, r3
 80015ba:	481d      	ldr	r0, [pc, #116]	@ (8001630 <MX_TIM2_Init+0xec>)
 80015bc:	f002 fee2 	bl	8004384 <HAL_TIM_ConfigClockSource>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80015c6:	f7ff fe0f 	bl	80011e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015ca:	4819      	ldr	r0, [pc, #100]	@ (8001630 <MX_TIM2_Init+0xec>)
 80015cc:	f002 fc6b 	bl	8003ea6 <HAL_TIM_PWM_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80015d6:	f7ff fe07 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e2:	f107 031c 	add.w	r3, r7, #28
 80015e6:	4619      	mov	r1, r3
 80015e8:	4811      	ldr	r0, [pc, #68]	@ (8001630 <MX_TIM2_Init+0xec>)
 80015ea:	f003 fb5f 	bl	8004cac <HAL_TIMEx_MasterConfigSynchronization>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80015f4:	f7ff fdf8 	bl	80011e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015f8:	2360      	movs	r3, #96	@ 0x60
 80015fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80015fc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001600:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800160a:	463b      	mov	r3, r7
 800160c:	2200      	movs	r2, #0
 800160e:	4619      	mov	r1, r3
 8001610:	4807      	ldr	r0, [pc, #28]	@ (8001630 <MX_TIM2_Init+0xec>)
 8001612:	f002 fda3 	bl	800415c <HAL_TIM_PWM_ConfigChannel>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800161c:	f7ff fde4 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001620:	4803      	ldr	r0, [pc, #12]	@ (8001630 <MX_TIM2_Init+0xec>)
 8001622:	f000 f93d 	bl	80018a0 <HAL_TIM_MspPostInit>

}
 8001626:	bf00      	nop
 8001628:	3738      	adds	r7, #56	@ 0x38
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200001f0 	.word	0x200001f0

08001634 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08e      	sub	sp, #56	@ 0x38
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001654:	463b      	mov	r3, r7
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
 8001660:	611a      	str	r2, [r3, #16]
 8001662:	615a      	str	r2, [r3, #20]
 8001664:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001666:	4b2d      	ldr	r3, [pc, #180]	@ (800171c <MX_TIM3_Init+0xe8>)
 8001668:	4a2d      	ldr	r2, [pc, #180]	@ (8001720 <MX_TIM3_Init+0xec>)
 800166a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800166c:	4b2b      	ldr	r3, [pc, #172]	@ (800171c <MX_TIM3_Init+0xe8>)
 800166e:	2200      	movs	r2, #0
 8001670:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001672:	4b2a      	ldr	r3, [pc, #168]	@ (800171c <MX_TIM3_Init+0xe8>)
 8001674:	2200      	movs	r2, #0
 8001676:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001678:	4b28      	ldr	r3, [pc, #160]	@ (800171c <MX_TIM3_Init+0xe8>)
 800167a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800167e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001680:	4b26      	ldr	r3, [pc, #152]	@ (800171c <MX_TIM3_Init+0xe8>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001686:	4b25      	ldr	r3, [pc, #148]	@ (800171c <MX_TIM3_Init+0xe8>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800168c:	4823      	ldr	r0, [pc, #140]	@ (800171c <MX_TIM3_Init+0xe8>)
 800168e:	f002 fbb3 	bl	8003df8 <HAL_TIM_Base_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001698:	f7ff fda6 	bl	80011e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800169c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016a6:	4619      	mov	r1, r3
 80016a8:	481c      	ldr	r0, [pc, #112]	@ (800171c <MX_TIM3_Init+0xe8>)
 80016aa:	f002 fe6b 	bl	8004384 <HAL_TIM_ConfigClockSource>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80016b4:	f7ff fd98 	bl	80011e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016b8:	4818      	ldr	r0, [pc, #96]	@ (800171c <MX_TIM3_Init+0xe8>)
 80016ba:	f002 fbf4 	bl	8003ea6 <HAL_TIM_PWM_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80016c4:	f7ff fd90 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	4619      	mov	r1, r3
 80016d6:	4811      	ldr	r0, [pc, #68]	@ (800171c <MX_TIM3_Init+0xe8>)
 80016d8:	f003 fae8 	bl	8004cac <HAL_TIMEx_MasterConfigSynchronization>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80016e2:	f7ff fd81 	bl	80011e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e6:	2360      	movs	r3, #96	@ 0x60
 80016e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016f6:	463b      	mov	r3, r7
 80016f8:	2200      	movs	r2, #0
 80016fa:	4619      	mov	r1, r3
 80016fc:	4807      	ldr	r0, [pc, #28]	@ (800171c <MX_TIM3_Init+0xe8>)
 80016fe:	f002 fd2d 	bl	800415c <HAL_TIM_PWM_ConfigChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001708:	f7ff fd6e 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800170c:	4803      	ldr	r0, [pc, #12]	@ (800171c <MX_TIM3_Init+0xe8>)
 800170e:	f000 f8c7 	bl	80018a0 <HAL_TIM_MspPostInit>

}
 8001712:	bf00      	nop
 8001714:	3738      	adds	r7, #56	@ 0x38
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2000023c 	.word	0x2000023c
 8001720:	40000400 	.word	0x40000400

08001724 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08e      	sub	sp, #56	@ 0x38
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800172a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001744:	463b      	mov	r3, r7
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
 8001750:	611a      	str	r2, [r3, #16]
 8001752:	615a      	str	r2, [r3, #20]
 8001754:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001756:	4b2d      	ldr	r3, [pc, #180]	@ (800180c <MX_TIM4_Init+0xe8>)
 8001758:	4a2d      	ldr	r2, [pc, #180]	@ (8001810 <MX_TIM4_Init+0xec>)
 800175a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800175c:	4b2b      	ldr	r3, [pc, #172]	@ (800180c <MX_TIM4_Init+0xe8>)
 800175e:	2200      	movs	r2, #0
 8001760:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001762:	4b2a      	ldr	r3, [pc, #168]	@ (800180c <MX_TIM4_Init+0xe8>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001768:	4b28      	ldr	r3, [pc, #160]	@ (800180c <MX_TIM4_Init+0xe8>)
 800176a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800176e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001770:	4b26      	ldr	r3, [pc, #152]	@ (800180c <MX_TIM4_Init+0xe8>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001776:	4b25      	ldr	r3, [pc, #148]	@ (800180c <MX_TIM4_Init+0xe8>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800177c:	4823      	ldr	r0, [pc, #140]	@ (800180c <MX_TIM4_Init+0xe8>)
 800177e:	f002 fb3b 	bl	8003df8 <HAL_TIM_Base_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001788:	f7ff fd2e 	bl	80011e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800178c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001790:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001792:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001796:	4619      	mov	r1, r3
 8001798:	481c      	ldr	r0, [pc, #112]	@ (800180c <MX_TIM4_Init+0xe8>)
 800179a:	f002 fdf3 	bl	8004384 <HAL_TIM_ConfigClockSource>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80017a4:	f7ff fd20 	bl	80011e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017a8:	4818      	ldr	r0, [pc, #96]	@ (800180c <MX_TIM4_Init+0xe8>)
 80017aa:	f002 fb7c 	bl	8003ea6 <HAL_TIM_PWM_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80017b4:	f7ff fd18 	bl	80011e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	4619      	mov	r1, r3
 80017c6:	4811      	ldr	r0, [pc, #68]	@ (800180c <MX_TIM4_Init+0xe8>)
 80017c8:	f003 fa70 	bl	8004cac <HAL_TIMEx_MasterConfigSynchronization>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80017d2:	f7ff fd09 	bl	80011e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017d6:	2360      	movs	r3, #96	@ 0x60
 80017d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017e6:	463b      	mov	r3, r7
 80017e8:	2208      	movs	r2, #8
 80017ea:	4619      	mov	r1, r3
 80017ec:	4807      	ldr	r0, [pc, #28]	@ (800180c <MX_TIM4_Init+0xe8>)
 80017ee:	f002 fcb5 	bl	800415c <HAL_TIM_PWM_ConfigChannel>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80017f8:	f7ff fcf6 	bl	80011e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017fc:	4803      	ldr	r0, [pc, #12]	@ (800180c <MX_TIM4_Init+0xe8>)
 80017fe:	f000 f84f 	bl	80018a0 <HAL_TIM_MspPostInit>

}
 8001802:	bf00      	nop
 8001804:	3738      	adds	r7, #56	@ 0x38
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000288 	.word	0x20000288
 8001810:	40000800 	.word	0x40000800

08001814 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001814:	b480      	push	{r7}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001824:	d10c      	bne.n	8001840 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001826:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <HAL_TIM_Base_MspInit+0x80>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800182a:	4a1a      	ldr	r2, [pc, #104]	@ (8001894 <HAL_TIM_Base_MspInit+0x80>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6413      	str	r3, [r2, #64]	@ 0x40
 8001832:	4b18      	ldr	r3, [pc, #96]	@ (8001894 <HAL_TIM_Base_MspInit+0x80>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800183e:	e022      	b.n	8001886 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a14      	ldr	r2, [pc, #80]	@ (8001898 <HAL_TIM_Base_MspInit+0x84>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d10c      	bne.n	8001864 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800184a:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <HAL_TIM_Base_MspInit+0x80>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184e:	4a11      	ldr	r2, [pc, #68]	@ (8001894 <HAL_TIM_Base_MspInit+0x80>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	6413      	str	r3, [r2, #64]	@ 0x40
 8001856:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <HAL_TIM_Base_MspInit+0x80>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	693b      	ldr	r3, [r7, #16]
}
 8001862:	e010      	b.n	8001886 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0c      	ldr	r2, [pc, #48]	@ (800189c <HAL_TIM_Base_MspInit+0x88>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d10b      	bne.n	8001886 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800186e:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <HAL_TIM_Base_MspInit+0x80>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	4a08      	ldr	r2, [pc, #32]	@ (8001894 <HAL_TIM_Base_MspInit+0x80>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	6413      	str	r3, [r2, #64]	@ 0x40
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <HAL_TIM_Base_MspInit+0x80>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
}
 8001886:	bf00      	nop
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40000400 	.word	0x40000400
 800189c:	40000800 	.word	0x40000800

080018a0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	@ 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018c0:	d11d      	bne.n	80018fe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	4b33      	ldr	r3, [pc, #204]	@ (8001990 <HAL_TIM_MspPostInit+0xf0>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c6:	4a32      	ldr	r2, [pc, #200]	@ (8001990 <HAL_TIM_MspPostInit+0xf0>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ce:	4b30      	ldr	r3, [pc, #192]	@ (8001990 <HAL_TIM_MspPostInit+0xf0>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e8:	2300      	movs	r3, #0
 80018ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018ec:	2301      	movs	r3, #1
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	4827      	ldr	r0, [pc, #156]	@ (8001994 <HAL_TIM_MspPostInit+0xf4>)
 80018f8:	f001 fbb8 	bl	800306c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80018fc:	e043      	b.n	8001986 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a25      	ldr	r2, [pc, #148]	@ (8001998 <HAL_TIM_MspPostInit+0xf8>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d11c      	bne.n	8001942 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001908:	4b21      	ldr	r3, [pc, #132]	@ (8001990 <HAL_TIM_MspPostInit+0xf0>)
 800190a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190c:	4a20      	ldr	r2, [pc, #128]	@ (8001990 <HAL_TIM_MspPostInit+0xf0>)
 800190e:	f043 0304 	orr.w	r3, r3, #4
 8001912:	6313      	str	r3, [r2, #48]	@ 0x30
 8001914:	4b1e      	ldr	r3, [pc, #120]	@ (8001990 <HAL_TIM_MspPostInit+0xf0>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001920:	2340      	movs	r3, #64	@ 0x40
 8001922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001930:	2302      	movs	r3, #2
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	4818      	ldr	r0, [pc, #96]	@ (800199c <HAL_TIM_MspPostInit+0xfc>)
 800193c:	f001 fb96 	bl	800306c <HAL_GPIO_Init>
}
 8001940:	e021      	b.n	8001986 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM4)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a16      	ldr	r2, [pc, #88]	@ (80019a0 <HAL_TIM_MspPostInit+0x100>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d11c      	bne.n	8001986 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194c:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <HAL_TIM_MspPostInit+0xf0>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001950:	4a0f      	ldr	r2, [pc, #60]	@ (8001990 <HAL_TIM_MspPostInit+0xf0>)
 8001952:	f043 0302 	orr.w	r3, r3, #2
 8001956:	6313      	str	r3, [r2, #48]	@ 0x30
 8001958:	4b0d      	ldr	r3, [pc, #52]	@ (8001990 <HAL_TIM_MspPostInit+0xf0>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001964:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001976:	2302      	movs	r3, #2
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	4808      	ldr	r0, [pc, #32]	@ (80019a4 <HAL_TIM_MspPostInit+0x104>)
 8001982:	f001 fb73 	bl	800306c <HAL_GPIO_Init>
}
 8001986:	bf00      	nop
 8001988:	3728      	adds	r7, #40	@ 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023800 	.word	0x40023800
 8001994:	40020000 	.word	0x40020000
 8001998:	40000400 	.word	0x40000400
 800199c:	40020800 	.word	0x40020800
 80019a0:	40000800 	.word	0x40000800
 80019a4:	40020400 	.word	0x40020400

080019a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019ac:	480d      	ldr	r0, [pc, #52]	@ (80019e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ae:	490e      	ldr	r1, [pc, #56]	@ (80019e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019b0:	4a0e      	ldr	r2, [pc, #56]	@ (80019ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b4:	e002      	b.n	80019bc <LoopCopyDataInit>

080019b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ba:	3304      	adds	r3, #4

080019bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c0:	d3f9      	bcc.n	80019b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c2:	4a0b      	ldr	r2, [pc, #44]	@ (80019f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019c4:	4c0b      	ldr	r4, [pc, #44]	@ (80019f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c8:	e001      	b.n	80019ce <LoopFillZerobss>

080019ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019cc:	3204      	adds	r2, #4

080019ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d0:	d3fb      	bcc.n	80019ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019d2:	f7ff fc69 	bl	80012a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019d6:	f006 ff2f 	bl	8008838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019da:	f7ff fb61 	bl	80010a0 <main>
  bx  lr    
 80019de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019e0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80019e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80019ec:	080094f0 	.word	0x080094f0
  ldr r2, =_sbss
 80019f0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80019f4:	20004d58 	.word	0x20004d58

080019f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f8:	e7fe      	b.n	80019f8 <ADC_IRQHandler>

080019fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fe:	2003      	movs	r0, #3
 8001a00:	f000 ff7a 	bl	80028f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a04:	200f      	movs	r0, #15
 8001a06:	f000 f805 	bl	8001a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a0a:	f7ff fbf3 	bl	80011f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a1c:	4b12      	ldr	r3, [pc, #72]	@ (8001a68 <HAL_InitTick+0x54>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <HAL_InitTick+0x58>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	4619      	mov	r1, r3
 8001a26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 ff95 	bl	8002962 <HAL_SYSTICK_Config>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e00e      	b.n	8001a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2b0f      	cmp	r3, #15
 8001a46:	d80a      	bhi.n	8001a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a50:	f000 ff5d 	bl	800290e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a54:	4a06      	ldr	r2, [pc, #24]	@ (8001a70 <HAL_InitTick+0x5c>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e000      	b.n	8001a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	2000000c 	.word	0x2000000c
 8001a70:	20000008 	.word	0x20000008

08001a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <HAL_IncTick+0x20>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <HAL_IncTick+0x24>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	4a04      	ldr	r2, [pc, #16]	@ (8001a98 <HAL_IncTick+0x24>)
 8001a86:	6013      	str	r3, [r2, #0]
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	2000000c 	.word	0x2000000c
 8001a98:	200002d4 	.word	0x200002d4

08001a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	@ (8001ab0 <HAL_GetTick+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	200002d4 	.word	0x200002d4

08001ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001abc:	f7ff ffee 	bl	8001a9c <HAL_GetTick>
 8001ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001acc:	d005      	beq.n	8001ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ace:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <HAL_Delay+0x44>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ada:	bf00      	nop
 8001adc:	f7ff ffde 	bl	8001a9c <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d8f7      	bhi.n	8001adc <HAL_Delay+0x28>
  {
  }
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	2000000c 	.word	0x2000000c

08001afc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e031      	b.n	8001b76 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7fe fdf2 	bl	8000704 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d116      	bne.n	8001b68 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b3e:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <HAL_ADC_Init+0x84>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	f043 0202 	orr.w	r2, r3, #2
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 fa88 	bl	8002060 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	f023 0303 	bic.w	r3, r3, #3
 8001b5e:	f043 0201 	orr.w	r2, r3, #1
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b66:	e001      	b.n	8001b6c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	ffffeefd 	.word	0xffffeefd

08001b84 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_ADC_Start_DMA+0x1e>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e0d4      	b.n	8001d4c <HAL_ADC_Start_DMA+0x1c8>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d018      	beq.n	8001bea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0201 	orr.w	r2, r2, #1
 8001bc6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001bc8:	4b62      	ldr	r3, [pc, #392]	@ (8001d54 <HAL_ADC_Start_DMA+0x1d0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a62      	ldr	r2, [pc, #392]	@ (8001d58 <HAL_ADC_Start_DMA+0x1d4>)
 8001bce:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd2:	0c9a      	lsrs	r2, r3, #18
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001bdc:	e002      	b.n	8001be4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f9      	bne.n	8001bde <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	f040 809c 	bne.w	8001d32 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bfe:	4b57      	ldr	r3, [pc, #348]	@ (8001d5c <HAL_ADC_Start_DMA+0x1d8>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d007      	beq.n	8001c28 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c20:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c34:	d106      	bne.n	8001c44 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3a:	f023 0206 	bic.w	r2, r3, #6
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	645a      	str	r2, [r3, #68]	@ 0x44
 8001c42:	e002      	b.n	8001c4a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c56:	4a42      	ldr	r2, [pc, #264]	@ (8001d60 <HAL_ADC_Start_DMA+0x1dc>)
 8001c58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c5e:	4a41      	ldr	r2, [pc, #260]	@ (8001d64 <HAL_ADC_Start_DMA+0x1e0>)
 8001c60:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c66:	4a40      	ldr	r2, [pc, #256]	@ (8001d68 <HAL_ADC_Start_DMA+0x1e4>)
 8001c68:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001c72:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001c82:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689a      	ldr	r2, [r3, #8]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c92:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	334c      	adds	r3, #76	@ 0x4c
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	68ba      	ldr	r2, [r7, #8]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f000 ff18 	bl	8002ad8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001ca8:	4b30      	ldr	r3, [pc, #192]	@ (8001d6c <HAL_ADC_Start_DMA+0x1e8>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10f      	bne.n	8001cd4 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d143      	bne.n	8001d4a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	e03a      	b.n	8001d4a <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a25      	ldr	r2, [pc, #148]	@ (8001d70 <HAL_ADC_Start_DMA+0x1ec>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d10e      	bne.n	8001cfc <HAL_ADC_Start_DMA+0x178>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d107      	bne.n	8001cfc <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689a      	ldr	r2, [r3, #8]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001cfa:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <HAL_ADC_Start_DMA+0x1e8>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0310 	and.w	r3, r3, #16
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d120      	bne.n	8001d4a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a19      	ldr	r2, [pc, #100]	@ (8001d74 <HAL_ADC_Start_DMA+0x1f0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d11b      	bne.n	8001d4a <HAL_ADC_Start_DMA+0x1c6>
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d114      	bne.n	8001d4a <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	e00b      	b.n	8001d4a <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	f043 0210 	orr.w	r2, r3, #16
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d42:	f043 0201 	orr.w	r2, r3, #1
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000000 	.word	0x20000000
 8001d58:	431bde83 	.word	0x431bde83
 8001d5c:	fffff8fe 	.word	0xfffff8fe
 8001d60:	08002255 	.word	0x08002255
 8001d64:	0800230f 	.word	0x0800230f
 8001d68:	0800232b 	.word	0x0800232b
 8001d6c:	40012300 	.word	0x40012300
 8001d70:	40012000 	.word	0x40012000
 8001d74:	40012200 	.word	0x40012200

08001d78 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d101      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x1c>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	e136      	b.n	800203e <HAL_ADC_ConfigChannel+0x28a>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b09      	cmp	r3, #9
 8001dde:	d93a      	bls.n	8001e56 <HAL_ADC_ConfigChannel+0xa2>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001de8:	d035      	beq.n	8001e56 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68d9      	ldr	r1, [r3, #12]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	4613      	mov	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3b1e      	subs	r3, #30
 8001e00:	2207      	movs	r2, #7
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43da      	mvns	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	400a      	ands	r2, r1
 8001e0e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a8d      	ldr	r2, [pc, #564]	@ (800204c <HAL_ADC_ConfigChannel+0x298>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10a      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68d9      	ldr	r1, [r3, #12]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	061a      	lsls	r2, r3, #24
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e2e:	e035      	b.n	8001e9c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68d9      	ldr	r1, [r3, #12]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	4618      	mov	r0, r3
 8001e42:	4603      	mov	r3, r0
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4403      	add	r3, r0
 8001e48:	3b1e      	subs	r3, #30
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e54:	e022      	b.n	8001e9c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6919      	ldr	r1, [r3, #16]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	461a      	mov	r2, r3
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43da      	mvns	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	400a      	ands	r2, r1
 8001e78:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6919      	ldr	r1, [r3, #16]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4403      	add	r3, r0
 8001e92:	409a      	lsls	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b06      	cmp	r3, #6
 8001ea2:	d824      	bhi.n	8001eee <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3b05      	subs	r3, #5
 8001eb6:	221f      	movs	r2, #31
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43da      	mvns	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	400a      	ands	r2, r1
 8001ec4:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	3b05      	subs	r3, #5
 8001ee0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	635a      	str	r2, [r3, #52]	@ 0x34
 8001eec:	e04c      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b0c      	cmp	r3, #12
 8001ef4:	d824      	bhi.n	8001f40 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	3b23      	subs	r3, #35	@ 0x23
 8001f08:	221f      	movs	r2, #31
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	400a      	ands	r2, r1
 8001f16:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	4618      	mov	r0, r3
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	3b23      	subs	r3, #35	@ 0x23
 8001f32:	fa00 f203 	lsl.w	r2, r0, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f3e:	e023      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	3b41      	subs	r3, #65	@ 0x41
 8001f52:	221f      	movs	r2, #31
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43da      	mvns	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	400a      	ands	r2, r1
 8001f60:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	3b41      	subs	r3, #65	@ 0x41
 8001f7c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a30      	ldr	r2, [pc, #192]	@ (8002050 <HAL_ADC_ConfigChannel+0x29c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d10a      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x1f4>
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001f9a:	d105      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002054 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	4a2c      	ldr	r2, [pc, #176]	@ (8002054 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fa2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001fa6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a28      	ldr	r2, [pc, #160]	@ (8002050 <HAL_ADC_ConfigChannel+0x29c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d10f      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x21e>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b12      	cmp	r3, #18
 8001fb8:	d10b      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001fba:	4b26      	ldr	r3, [pc, #152]	@ (8002054 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	4a25      	ldr	r2, [pc, #148]	@ (8002054 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fc0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001fc4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001fc6:	4b23      	ldr	r3, [pc, #140]	@ (8002054 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4a22      	ldr	r2, [pc, #136]	@ (8002054 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fcc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fd0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8002050 <HAL_ADC_ConfigChannel+0x29c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d12b      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x280>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a1a      	ldr	r2, [pc, #104]	@ (800204c <HAL_ADC_ConfigChannel+0x298>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d003      	beq.n	8001fee <HAL_ADC_ConfigChannel+0x23a>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b11      	cmp	r3, #17
 8001fec:	d122      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001fee:	4b19      	ldr	r3, [pc, #100]	@ (8002054 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	4a18      	ldr	r2, [pc, #96]	@ (8002054 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ff4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001ff8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001ffa:	4b16      	ldr	r3, [pc, #88]	@ (8002054 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4a15      	ldr	r2, [pc, #84]	@ (8002054 <HAL_ADC_ConfigChannel+0x2a0>)
 8002000:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002004:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a10      	ldr	r2, [pc, #64]	@ (800204c <HAL_ADC_ConfigChannel+0x298>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d111      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002010:	4b11      	ldr	r3, [pc, #68]	@ (8002058 <HAL_ADC_ConfigChannel+0x2a4>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a11      	ldr	r2, [pc, #68]	@ (800205c <HAL_ADC_ConfigChannel+0x2a8>)
 8002016:	fba2 2303 	umull	r2, r3, r2, r3
 800201a:	0c9a      	lsrs	r2, r3, #18
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002026:	e002      	b.n	800202e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	3b01      	subs	r3, #1
 800202c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f9      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	10000012 	.word	0x10000012
 8002050:	40012000 	.word	0x40012000
 8002054:	40012300 	.word	0x40012300
 8002058:	20000000 	.word	0x20000000
 800205c:	431bde83 	.word	0x431bde83

08002060 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002068:	4b78      	ldr	r3, [pc, #480]	@ (800224c <ADC_Init+0x1ec>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4a77      	ldr	r2, [pc, #476]	@ (800224c <ADC_Init+0x1ec>)
 800206e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002072:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002074:	4b75      	ldr	r3, [pc, #468]	@ (800224c <ADC_Init+0x1ec>)
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	4973      	ldr	r1, [pc, #460]	@ (800224c <ADC_Init+0x1ec>)
 800207e:	4313      	orrs	r3, r2
 8002080:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002090:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6859      	ldr	r1, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	021a      	lsls	r2, r3, #8
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80020b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6859      	ldr	r1, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6899      	ldr	r1, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ee:	4a58      	ldr	r2, [pc, #352]	@ (8002250 <ADC_Init+0x1f0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d022      	beq.n	800213a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002102:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6899      	ldr	r1, [r3, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002124:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6899      	ldr	r1, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	e00f      	b.n	800215a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002148:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002158:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0202 	bic.w	r2, r2, #2
 8002168:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6899      	ldr	r1, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	005a      	lsls	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d01b      	beq.n	80021c0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002196:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80021a6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6859      	ldr	r1, [r3, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b2:	3b01      	subs	r3, #1
 80021b4:	035a      	lsls	r2, r3, #13
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	e007      	b.n	80021d0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80021de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	051a      	lsls	r2, r3, #20
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002204:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6899      	ldr	r1, [r3, #8]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002212:	025a      	lsls	r2, r3, #9
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800222a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6899      	ldr	r1, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	029a      	lsls	r2, r3, #10
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	430a      	orrs	r2, r1
 800223e:	609a      	str	r2, [r3, #8]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	40012300 	.word	0x40012300
 8002250:	0f000001 	.word	0x0f000001

08002254 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002260:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800226a:	2b00      	cmp	r3, #0
 800226c:	d13c      	bne.n	80022e8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d12b      	bne.n	80022e0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800228c:	2b00      	cmp	r3, #0
 800228e:	d127      	bne.n	80022e0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002296:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800229a:	2b00      	cmp	r3, #0
 800229c:	d006      	beq.n	80022ac <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d119      	bne.n	80022e0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0220 	bic.w	r2, r2, #32
 80022ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d105      	bne.n	80022e0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d8:	f043 0201 	orr.w	r2, r3, #1
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f7ff fd49 	bl	8001d78 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80022e6:	e00e      	b.n	8002306 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f7ff fd53 	bl	8001da0 <HAL_ADC_ErrorCallback>
}
 80022fa:	e004      	b.n	8002306 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	4798      	blx	r3
}
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b084      	sub	sp, #16
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800231a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f7ff fd35 	bl	8001d8c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002336:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2240      	movs	r2, #64	@ 0x40
 800233c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002342:	f043 0204 	orr.w	r2, r3, #4
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f7ff fd28 	bl	8001da0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002350:	bf00      	nop
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e0ed      	b.n	8002546 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d102      	bne.n	800237c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f7fe fb02 	bl	8000980 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800238c:	f7ff fb86 	bl	8001a9c <HAL_GetTick>
 8002390:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002392:	e012      	b.n	80023ba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002394:	f7ff fb82 	bl	8001a9c <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b0a      	cmp	r3, #10
 80023a0:	d90b      	bls.n	80023ba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2205      	movs	r2, #5
 80023b2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0c5      	b.n	8002546 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0e5      	beq.n	8002394 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0202 	bic.w	r2, r2, #2
 80023d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023d8:	f7ff fb60 	bl	8001a9c <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023de:	e012      	b.n	8002406 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023e0:	f7ff fb5c 	bl	8001a9c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b0a      	cmp	r3, #10
 80023ec:	d90b      	bls.n	8002406 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2205      	movs	r2, #5
 80023fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e09f      	b.n	8002546 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1e5      	bne.n	80023e0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7e1b      	ldrb	r3, [r3, #24]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d108      	bne.n	800242e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	e007      	b.n	800243e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800243c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	7e5b      	ldrb	r3, [r3, #25]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d108      	bne.n	8002458 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	e007      	b.n	8002468 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002466:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	7e9b      	ldrb	r3, [r3, #26]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d108      	bne.n	8002482 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0220 	orr.w	r2, r2, #32
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e007      	b.n	8002492 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0220 	bic.w	r2, r2, #32
 8002490:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	7edb      	ldrb	r3, [r3, #27]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d108      	bne.n	80024ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0210 	bic.w	r2, r2, #16
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	e007      	b.n	80024bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0210 	orr.w	r2, r2, #16
 80024ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	7f1b      	ldrb	r3, [r3, #28]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d108      	bne.n	80024d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f042 0208 	orr.w	r2, r2, #8
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	e007      	b.n	80024e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0208 	bic.w	r2, r2, #8
 80024e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	7f5b      	ldrb	r3, [r3, #29]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d108      	bne.n	8002500 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f042 0204 	orr.w	r2, r2, #4
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	e007      	b.n	8002510 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0204 	bic.w	r2, r2, #4
 800250e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	431a      	orrs	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	ea42 0103 	orr.w	r1, r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	1e5a      	subs	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800254e:	b480      	push	{r7}
 8002550:	b089      	sub	sp, #36	@ 0x24
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002562:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800256c:	7ffb      	ldrb	r3, [r7, #31]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d003      	beq.n	800257a <HAL_CAN_AddTxMessage+0x2c>
 8002572:	7ffb      	ldrb	r3, [r7, #31]
 8002574:	2b02      	cmp	r3, #2
 8002576:	f040 80ad 	bne.w	80026d4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10a      	bne.n	800259a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800258a:	2b00      	cmp	r3, #0
 800258c:	d105      	bne.n	800259a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 8095 	beq.w	80026c4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	0e1b      	lsrs	r3, r3, #24
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80025a4:	2201      	movs	r2, #1
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	409a      	lsls	r2, r3
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10d      	bne.n	80025d2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025c0:	68f9      	ldr	r1, [r7, #12]
 80025c2:	6809      	ldr	r1, [r1, #0]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	3318      	adds	r3, #24
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	440b      	add	r3, r1
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	e00f      	b.n	80025f2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025dc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025e2:	68f9      	ldr	r1, [r7, #12]
 80025e4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80025e6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	3318      	adds	r3, #24
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	440b      	add	r3, r1
 80025f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6819      	ldr	r1, [r3, #0]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	691a      	ldr	r2, [r3, #16]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	3318      	adds	r3, #24
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	440b      	add	r3, r1
 8002602:	3304      	adds	r3, #4
 8002604:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	7d1b      	ldrb	r3, [r3, #20]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d111      	bne.n	8002632 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	3318      	adds	r3, #24
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	4413      	add	r3, r2
 800261a:	3304      	adds	r3, #4
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	6811      	ldr	r1, [r2, #0]
 8002622:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	3318      	adds	r3, #24
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	440b      	add	r3, r1
 800262e:	3304      	adds	r3, #4
 8002630:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3307      	adds	r3, #7
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	061a      	lsls	r2, r3, #24
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3306      	adds	r3, #6
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	041b      	lsls	r3, r3, #16
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3305      	adds	r3, #5
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	021b      	lsls	r3, r3, #8
 800264c:	4313      	orrs	r3, r2
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	3204      	adds	r2, #4
 8002652:	7812      	ldrb	r2, [r2, #0]
 8002654:	4610      	mov	r0, r2
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	6811      	ldr	r1, [r2, #0]
 800265a:	ea43 0200 	orr.w	r2, r3, r0
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	440b      	add	r3, r1
 8002664:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002668:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	3303      	adds	r3, #3
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	061a      	lsls	r2, r3, #24
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3302      	adds	r3, #2
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	041b      	lsls	r3, r3, #16
 800267a:	431a      	orrs	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3301      	adds	r3, #1
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	021b      	lsls	r3, r3, #8
 8002684:	4313      	orrs	r3, r2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	7812      	ldrb	r2, [r2, #0]
 800268a:	4610      	mov	r0, r2
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	6811      	ldr	r1, [r2, #0]
 8002690:	ea43 0200 	orr.w	r2, r3, r0
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	011b      	lsls	r3, r3, #4
 8002698:	440b      	add	r3, r1
 800269a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800269e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	3318      	adds	r3, #24
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	4413      	add	r3, r2
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	6811      	ldr	r1, [r2, #0]
 80026b2:	f043 0201 	orr.w	r2, r3, #1
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	3318      	adds	r3, #24
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	440b      	add	r3, r1
 80026be:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	e00e      	b.n	80026e2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e006      	b.n	80026e2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
  }
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3724      	adds	r7, #36	@ 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b085      	sub	sp, #20
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002700:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002702:	7afb      	ldrb	r3, [r7, #11]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d002      	beq.n	800270e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002708:	7afb      	ldrb	r3, [r7, #11]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d11d      	bne.n	800274a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3301      	adds	r3, #1
 8002720:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	3301      	adds	r3, #1
 8002734:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	3301      	adds	r3, #1
 8002748:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800274a:	68fb      	ldr	r3, [r7, #12]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002768:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <__NVIC_SetPriorityGrouping+0x40>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002774:	4013      	ands	r3, r2
 8002776:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002780:	4b06      	ldr	r3, [pc, #24]	@ (800279c <__NVIC_SetPriorityGrouping+0x44>)
 8002782:	4313      	orrs	r3, r2
 8002784:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002786:	4a04      	ldr	r2, [pc, #16]	@ (8002798 <__NVIC_SetPriorityGrouping+0x40>)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	60d3      	str	r3, [r2, #12]
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	e000ed00 	.word	0xe000ed00
 800279c:	05fa0000 	.word	0x05fa0000

080027a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027a4:	4b04      	ldr	r3, [pc, #16]	@ (80027b8 <__NVIC_GetPriorityGrouping+0x18>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	0a1b      	lsrs	r3, r3, #8
 80027aa:	f003 0307 	and.w	r3, r3, #7
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	db0b      	blt.n	80027e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	f003 021f 	and.w	r2, r3, #31
 80027d4:	4907      	ldr	r1, [pc, #28]	@ (80027f4 <__NVIC_EnableIRQ+0x38>)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	2001      	movs	r0, #1
 80027de:	fa00 f202 	lsl.w	r2, r0, r2
 80027e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	e000e100 	.word	0xe000e100

080027f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	4603      	mov	r3, r0
 8002800:	6039      	str	r1, [r7, #0]
 8002802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002808:	2b00      	cmp	r3, #0
 800280a:	db0a      	blt.n	8002822 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	b2da      	uxtb	r2, r3
 8002810:	490c      	ldr	r1, [pc, #48]	@ (8002844 <__NVIC_SetPriority+0x4c>)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	0112      	lsls	r2, r2, #4
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	440b      	add	r3, r1
 800281c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002820:	e00a      	b.n	8002838 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	4908      	ldr	r1, [pc, #32]	@ (8002848 <__NVIC_SetPriority+0x50>)
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	3b04      	subs	r3, #4
 8002830:	0112      	lsls	r2, r2, #4
 8002832:	b2d2      	uxtb	r2, r2
 8002834:	440b      	add	r3, r1
 8002836:	761a      	strb	r2, [r3, #24]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	e000e100 	.word	0xe000e100
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800284c:	b480      	push	{r7}
 800284e:	b089      	sub	sp, #36	@ 0x24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	f1c3 0307 	rsb	r3, r3, #7
 8002866:	2b04      	cmp	r3, #4
 8002868:	bf28      	it	cs
 800286a:	2304      	movcs	r3, #4
 800286c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3304      	adds	r3, #4
 8002872:	2b06      	cmp	r3, #6
 8002874:	d902      	bls.n	800287c <NVIC_EncodePriority+0x30>
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3b03      	subs	r3, #3
 800287a:	e000      	b.n	800287e <NVIC_EncodePriority+0x32>
 800287c:	2300      	movs	r3, #0
 800287e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	f04f 32ff 	mov.w	r2, #4294967295
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43da      	mvns	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	401a      	ands	r2, r3
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002894:	f04f 31ff 	mov.w	r1, #4294967295
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fa01 f303 	lsl.w	r3, r1, r3
 800289e:	43d9      	mvns	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a4:	4313      	orrs	r3, r2
         );
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3724      	adds	r7, #36	@ 0x24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3b01      	subs	r3, #1
 80028c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028c4:	d301      	bcc.n	80028ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00f      	b.n	80028ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ca:	4a0a      	ldr	r2, [pc, #40]	@ (80028f4 <SysTick_Config+0x40>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d2:	210f      	movs	r1, #15
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295
 80028d8:	f7ff ff8e 	bl	80027f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028dc:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <SysTick_Config+0x40>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e2:	4b04      	ldr	r3, [pc, #16]	@ (80028f4 <SysTick_Config+0x40>)
 80028e4:	2207      	movs	r2, #7
 80028e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	e000e010 	.word	0xe000e010

080028f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ff29 	bl	8002758 <__NVIC_SetPriorityGrouping>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800290e:	b580      	push	{r7, lr}
 8002910:	b086      	sub	sp, #24
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
 800291a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002920:	f7ff ff3e 	bl	80027a0 <__NVIC_GetPriorityGrouping>
 8002924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	6978      	ldr	r0, [r7, #20]
 800292c:	f7ff ff8e 	bl	800284c <NVIC_EncodePriority>
 8002930:	4602      	mov	r2, r0
 8002932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff5d 	bl	80027f8 <__NVIC_SetPriority>
}
 800293e:	bf00      	nop
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ff31 	bl	80027bc <__NVIC_EnableIRQ>
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff ffa2 	bl	80028b4 <SysTick_Config>
 8002970:	4603      	mov	r3, r0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002988:	f7ff f888 	bl	8001a9c <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e099      	b.n	8002acc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b8:	e00f      	b.n	80029da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029ba:	f7ff f86f 	bl	8001a9c <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b05      	cmp	r3, #5
 80029c6:	d908      	bls.n	80029da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2220      	movs	r2, #32
 80029cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2203      	movs	r2, #3
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e078      	b.n	8002acc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1e8      	bne.n	80029ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4b38      	ldr	r3, [pc, #224]	@ (8002ad4 <HAL_DMA_Init+0x158>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d107      	bne.n	8002a44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f023 0307 	bic.w	r3, r3, #7
 8002a5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d117      	bne.n	8002a9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00e      	beq.n	8002a9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 fa77 	bl	8002f74 <DMA_CheckFifoParam>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d008      	beq.n	8002a9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2240      	movs	r2, #64	@ 0x40
 8002a90:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e016      	b.n	8002acc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 fa2e 	bl	8002f08 <DMA_CalcBaseAndBitshift>
 8002aac:	4603      	mov	r3, r0
 8002aae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab4:	223f      	movs	r2, #63	@ 0x3f
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	e010803f 	.word	0xe010803f

08002ad8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_DMA_Start_IT+0x26>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e048      	b.n	8002b90 <HAL_DMA_Start_IT+0xb8>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d137      	bne.n	8002b82 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2202      	movs	r2, #2
 8002b16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 f9c0 	bl	8002eac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b30:	223f      	movs	r2, #63	@ 0x3f
 8002b32:	409a      	lsls	r2, r3
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0216 	orr.w	r2, r2, #22
 8002b46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695a      	ldr	r2, [r3, #20]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b56:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d007      	beq.n	8002b70 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0208 	orr.w	r2, r2, #8
 8002b6e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	e005      	b.n	8002b8e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002ba4:	4b8e      	ldr	r3, [pc, #568]	@ (8002de0 <HAL_DMA_IRQHandler+0x248>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a8e      	ldr	r2, [pc, #568]	@ (8002de4 <HAL_DMA_IRQHandler+0x24c>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	0a9b      	lsrs	r3, r3, #10
 8002bb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc2:	2208      	movs	r2, #8
 8002bc4:	409a      	lsls	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d01a      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d013      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0204 	bic.w	r2, r2, #4
 8002bea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf0:	2208      	movs	r2, #8
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfc:	f043 0201 	orr.w	r2, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c08:	2201      	movs	r2, #1
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d012      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00b      	beq.n	8002c3a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c26:	2201      	movs	r2, #1
 8002c28:	409a      	lsls	r2, r3
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c32:	f043 0202 	orr.w	r2, r3, #2
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3e:	2204      	movs	r2, #4
 8002c40:	409a      	lsls	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d012      	beq.n	8002c70 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00b      	beq.n	8002c70 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c5c:	2204      	movs	r2, #4
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c68:	f043 0204 	orr.w	r2, r3, #4
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c74:	2210      	movs	r2, #16
 8002c76:	409a      	lsls	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d043      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d03c      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c92:	2210      	movs	r2, #16
 8002c94:	409a      	lsls	r2, r3
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d018      	beq.n	8002cda <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d108      	bne.n	8002cc8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d024      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	4798      	blx	r3
 8002cc6:	e01f      	b.n	8002d08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d01b      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	4798      	blx	r3
 8002cd8:	e016      	b.n	8002d08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d107      	bne.n	8002cf8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0208 	bic.w	r2, r2, #8
 8002cf6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4013      	ands	r3, r2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 808f 	beq.w	8002e38 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 8087 	beq.w	8002e38 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d2e:	2220      	movs	r2, #32
 8002d30:	409a      	lsls	r2, r3
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b05      	cmp	r3, #5
 8002d40:	d136      	bne.n	8002db0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0216 	bic.w	r2, r2, #22
 8002d50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695a      	ldr	r2, [r3, #20]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d103      	bne.n	8002d72 <HAL_DMA_IRQHandler+0x1da>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d007      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0208 	bic.w	r2, r2, #8
 8002d80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d86:	223f      	movs	r2, #63	@ 0x3f
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d07e      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	4798      	blx	r3
        }
        return;
 8002dae:	e079      	b.n	8002ea4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d01d      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d10d      	bne.n	8002de8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d031      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	4798      	blx	r3
 8002ddc:	e02c      	b.n	8002e38 <HAL_DMA_IRQHandler+0x2a0>
 8002dde:	bf00      	nop
 8002de0:	20000000 	.word	0x20000000
 8002de4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d023      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	4798      	blx	r3
 8002df8:	e01e      	b.n	8002e38 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10f      	bne.n	8002e28 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f022 0210 	bic.w	r2, r2, #16
 8002e16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d032      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d022      	beq.n	8002e92 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2205      	movs	r2, #5
 8002e50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0201 	bic.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	3301      	adds	r3, #1
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d307      	bcc.n	8002e80 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f2      	bne.n	8002e64 <HAL_DMA_IRQHandler+0x2cc>
 8002e7e:	e000      	b.n	8002e82 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e80:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d005      	beq.n	8002ea6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	4798      	blx	r3
 8002ea2:	e000      	b.n	8002ea6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ea4:	bf00      	nop
    }
  }
}
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ec8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2b40      	cmp	r3, #64	@ 0x40
 8002ed8:	d108      	bne.n	8002eec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002eea:	e007      	b.n	8002efc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	60da      	str	r2, [r3, #12]
}
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	3b10      	subs	r3, #16
 8002f18:	4a13      	ldr	r2, [pc, #76]	@ (8002f68 <DMA_CalcBaseAndBitshift+0x60>)
 8002f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1e:	091b      	lsrs	r3, r3, #4
 8002f20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f22:	4a12      	ldr	r2, [pc, #72]	@ (8002f6c <DMA_CalcBaseAndBitshift+0x64>)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4413      	add	r3, r2
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	d908      	bls.n	8002f48 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f70 <DMA_CalcBaseAndBitshift+0x68>)
 8002f3e:	4013      	ands	r3, r2
 8002f40:	1d1a      	adds	r2, r3, #4
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f46:	e006      	b.n	8002f56 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4b08      	ldr	r3, [pc, #32]	@ (8002f70 <DMA_CalcBaseAndBitshift+0x68>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	aaaaaaab 	.word	0xaaaaaaab
 8002f6c:	08008c48 	.word	0x08008c48
 8002f70:	fffffc00 	.word	0xfffffc00

08002f74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d11f      	bne.n	8002fce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d856      	bhi.n	8003042 <DMA_CheckFifoParam+0xce>
 8002f94:	a201      	add	r2, pc, #4	@ (adr r2, 8002f9c <DMA_CheckFifoParam+0x28>)
 8002f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9a:	bf00      	nop
 8002f9c:	08002fad 	.word	0x08002fad
 8002fa0:	08002fbf 	.word	0x08002fbf
 8002fa4:	08002fad 	.word	0x08002fad
 8002fa8:	08003043 	.word	0x08003043
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d046      	beq.n	8003046 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fbc:	e043      	b.n	8003046 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fc6:	d140      	bne.n	800304a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fcc:	e03d      	b.n	800304a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fd6:	d121      	bne.n	800301c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	d837      	bhi.n	800304e <DMA_CheckFifoParam+0xda>
 8002fde:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe4 <DMA_CheckFifoParam+0x70>)
 8002fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe4:	08002ff5 	.word	0x08002ff5
 8002fe8:	08002ffb 	.word	0x08002ffb
 8002fec:	08002ff5 	.word	0x08002ff5
 8002ff0:	0800300d 	.word	0x0800300d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ff8:	e030      	b.n	800305c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d025      	beq.n	8003052 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800300a:	e022      	b.n	8003052 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003010:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003014:	d11f      	bne.n	8003056 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800301a:	e01c      	b.n	8003056 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d903      	bls.n	800302a <DMA_CheckFifoParam+0xb6>
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	2b03      	cmp	r3, #3
 8003026:	d003      	beq.n	8003030 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003028:	e018      	b.n	800305c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	73fb      	strb	r3, [r7, #15]
      break;
 800302e:	e015      	b.n	800305c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003034:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00e      	beq.n	800305a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
      break;
 8003040:	e00b      	b.n	800305a <DMA_CheckFifoParam+0xe6>
      break;
 8003042:	bf00      	nop
 8003044:	e00a      	b.n	800305c <DMA_CheckFifoParam+0xe8>
      break;
 8003046:	bf00      	nop
 8003048:	e008      	b.n	800305c <DMA_CheckFifoParam+0xe8>
      break;
 800304a:	bf00      	nop
 800304c:	e006      	b.n	800305c <DMA_CheckFifoParam+0xe8>
      break;
 800304e:	bf00      	nop
 8003050:	e004      	b.n	800305c <DMA_CheckFifoParam+0xe8>
      break;
 8003052:	bf00      	nop
 8003054:	e002      	b.n	800305c <DMA_CheckFifoParam+0xe8>
      break;   
 8003056:	bf00      	nop
 8003058:	e000      	b.n	800305c <DMA_CheckFifoParam+0xe8>
      break;
 800305a:	bf00      	nop
    }
  } 
  
  return status; 
 800305c:	7bfb      	ldrb	r3, [r7, #15]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop

0800306c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800306c:	b480      	push	{r7}
 800306e:	b089      	sub	sp, #36	@ 0x24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003076:	2300      	movs	r3, #0
 8003078:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800307e:	2300      	movs	r3, #0
 8003080:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003082:	2300      	movs	r3, #0
 8003084:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003086:	2300      	movs	r3, #0
 8003088:	61fb      	str	r3, [r7, #28]
 800308a:	e175      	b.n	8003378 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800308c:	2201      	movs	r2, #1
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4013      	ands	r3, r2
 800309e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	f040 8164 	bne.w	8003372 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d005      	beq.n	80030c2 <HAL_GPIO_Init+0x56>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d130      	bne.n	8003124 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	2203      	movs	r2, #3
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4013      	ands	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030f8:	2201      	movs	r2, #1
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4013      	ands	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	091b      	lsrs	r3, r3, #4
 800310e:	f003 0201 	and.w	r2, r3, #1
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4313      	orrs	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 0303 	and.w	r3, r3, #3
 800312c:	2b03      	cmp	r3, #3
 800312e:	d017      	beq.n	8003160 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	2203      	movs	r2, #3
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4313      	orrs	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f003 0303 	and.w	r3, r3, #3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d123      	bne.n	80031b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	08da      	lsrs	r2, r3, #3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	3208      	adds	r2, #8
 8003174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	220f      	movs	r2, #15
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	08da      	lsrs	r2, r3, #3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3208      	adds	r2, #8
 80031ae:	69b9      	ldr	r1, [r7, #24]
 80031b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	2203      	movs	r2, #3
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 0203 	and.w	r2, r3, #3
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 80be 	beq.w	8003372 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f6:	4b66      	ldr	r3, [pc, #408]	@ (8003390 <HAL_GPIO_Init+0x324>)
 80031f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fa:	4a65      	ldr	r2, [pc, #404]	@ (8003390 <HAL_GPIO_Init+0x324>)
 80031fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003200:	6453      	str	r3, [r2, #68]	@ 0x44
 8003202:	4b63      	ldr	r3, [pc, #396]	@ (8003390 <HAL_GPIO_Init+0x324>)
 8003204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800320e:	4a61      	ldr	r2, [pc, #388]	@ (8003394 <HAL_GPIO_Init+0x328>)
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	089b      	lsrs	r3, r3, #2
 8003214:	3302      	adds	r3, #2
 8003216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800321a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	220f      	movs	r2, #15
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43db      	mvns	r3, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a58      	ldr	r2, [pc, #352]	@ (8003398 <HAL_GPIO_Init+0x32c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d037      	beq.n	80032aa <HAL_GPIO_Init+0x23e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a57      	ldr	r2, [pc, #348]	@ (800339c <HAL_GPIO_Init+0x330>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d031      	beq.n	80032a6 <HAL_GPIO_Init+0x23a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a56      	ldr	r2, [pc, #344]	@ (80033a0 <HAL_GPIO_Init+0x334>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d02b      	beq.n	80032a2 <HAL_GPIO_Init+0x236>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a55      	ldr	r2, [pc, #340]	@ (80033a4 <HAL_GPIO_Init+0x338>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d025      	beq.n	800329e <HAL_GPIO_Init+0x232>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a54      	ldr	r2, [pc, #336]	@ (80033a8 <HAL_GPIO_Init+0x33c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d01f      	beq.n	800329a <HAL_GPIO_Init+0x22e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a53      	ldr	r2, [pc, #332]	@ (80033ac <HAL_GPIO_Init+0x340>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d019      	beq.n	8003296 <HAL_GPIO_Init+0x22a>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a52      	ldr	r2, [pc, #328]	@ (80033b0 <HAL_GPIO_Init+0x344>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d013      	beq.n	8003292 <HAL_GPIO_Init+0x226>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a51      	ldr	r2, [pc, #324]	@ (80033b4 <HAL_GPIO_Init+0x348>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d00d      	beq.n	800328e <HAL_GPIO_Init+0x222>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a50      	ldr	r2, [pc, #320]	@ (80033b8 <HAL_GPIO_Init+0x34c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d007      	beq.n	800328a <HAL_GPIO_Init+0x21e>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a4f      	ldr	r2, [pc, #316]	@ (80033bc <HAL_GPIO_Init+0x350>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d101      	bne.n	8003286 <HAL_GPIO_Init+0x21a>
 8003282:	2309      	movs	r3, #9
 8003284:	e012      	b.n	80032ac <HAL_GPIO_Init+0x240>
 8003286:	230a      	movs	r3, #10
 8003288:	e010      	b.n	80032ac <HAL_GPIO_Init+0x240>
 800328a:	2308      	movs	r3, #8
 800328c:	e00e      	b.n	80032ac <HAL_GPIO_Init+0x240>
 800328e:	2307      	movs	r3, #7
 8003290:	e00c      	b.n	80032ac <HAL_GPIO_Init+0x240>
 8003292:	2306      	movs	r3, #6
 8003294:	e00a      	b.n	80032ac <HAL_GPIO_Init+0x240>
 8003296:	2305      	movs	r3, #5
 8003298:	e008      	b.n	80032ac <HAL_GPIO_Init+0x240>
 800329a:	2304      	movs	r3, #4
 800329c:	e006      	b.n	80032ac <HAL_GPIO_Init+0x240>
 800329e:	2303      	movs	r3, #3
 80032a0:	e004      	b.n	80032ac <HAL_GPIO_Init+0x240>
 80032a2:	2302      	movs	r3, #2
 80032a4:	e002      	b.n	80032ac <HAL_GPIO_Init+0x240>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <HAL_GPIO_Init+0x240>
 80032aa:	2300      	movs	r3, #0
 80032ac:	69fa      	ldr	r2, [r7, #28]
 80032ae:	f002 0203 	and.w	r2, r2, #3
 80032b2:	0092      	lsls	r2, r2, #2
 80032b4:	4093      	lsls	r3, r2
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80032bc:	4935      	ldr	r1, [pc, #212]	@ (8003394 <HAL_GPIO_Init+0x328>)
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	089b      	lsrs	r3, r3, #2
 80032c2:	3302      	adds	r3, #2
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032ca:	4b3d      	ldr	r3, [pc, #244]	@ (80033c0 <HAL_GPIO_Init+0x354>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	43db      	mvns	r3, r3
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	4013      	ands	r3, r2
 80032d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032ee:	4a34      	ldr	r2, [pc, #208]	@ (80033c0 <HAL_GPIO_Init+0x354>)
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032f4:	4b32      	ldr	r3, [pc, #200]	@ (80033c0 <HAL_GPIO_Init+0x354>)
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003318:	4a29      	ldr	r2, [pc, #164]	@ (80033c0 <HAL_GPIO_Init+0x354>)
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800331e:	4b28      	ldr	r3, [pc, #160]	@ (80033c0 <HAL_GPIO_Init+0x354>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	43db      	mvns	r3, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4013      	ands	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003342:	4a1f      	ldr	r2, [pc, #124]	@ (80033c0 <HAL_GPIO_Init+0x354>)
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003348:	4b1d      	ldr	r3, [pc, #116]	@ (80033c0 <HAL_GPIO_Init+0x354>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	43db      	mvns	r3, r3
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	4013      	ands	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4313      	orrs	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800336c:	4a14      	ldr	r2, [pc, #80]	@ (80033c0 <HAL_GPIO_Init+0x354>)
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	3301      	adds	r3, #1
 8003376:	61fb      	str	r3, [r7, #28]
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	2b0f      	cmp	r3, #15
 800337c:	f67f ae86 	bls.w	800308c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003380:	bf00      	nop
 8003382:	bf00      	nop
 8003384:	3724      	adds	r7, #36	@ 0x24
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40023800 	.word	0x40023800
 8003394:	40013800 	.word	0x40013800
 8003398:	40020000 	.word	0x40020000
 800339c:	40020400 	.word	0x40020400
 80033a0:	40020800 	.word	0x40020800
 80033a4:	40020c00 	.word	0x40020c00
 80033a8:	40021000 	.word	0x40021000
 80033ac:	40021400 	.word	0x40021400
 80033b0:	40021800 	.word	0x40021800
 80033b4:	40021c00 	.word	0x40021c00
 80033b8:	40022000 	.word	0x40022000
 80033bc:	40022400 	.word	0x40022400
 80033c0:	40013c00 	.word	0x40013c00

080033c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	807b      	strh	r3, [r7, #2]
 80033d0:	4613      	mov	r3, r2
 80033d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033d4:	787b      	ldrb	r3, [r7, #1]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033da:	887a      	ldrh	r2, [r7, #2]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80033e0:	e003      	b.n	80033ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80033e2:	887b      	ldrh	r3, [r7, #2]
 80033e4:	041a      	lsls	r2, r3, #16
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	619a      	str	r2, [r3, #24]
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
	...

080033f8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033fc:	4b05      	ldr	r3, [pc, #20]	@ (8003414 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a04      	ldr	r2, [pc, #16]	@ (8003414 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003402:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003406:	6013      	str	r3, [r2, #0]
}
 8003408:	bf00      	nop
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	40007000 	.word	0x40007000

08003418 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003422:	4b23      	ldr	r3, [pc, #140]	@ (80034b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003426:	4a22      	ldr	r2, [pc, #136]	@ (80034b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800342c:	6413      	str	r3, [r2, #64]	@ 0x40
 800342e:	4b20      	ldr	r3, [pc, #128]	@ (80034b0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800343a:	4b1e      	ldr	r3, [pc, #120]	@ (80034b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a1d      	ldr	r2, [pc, #116]	@ (80034b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003444:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003446:	f7fe fb29 	bl	8001a9c <HAL_GetTick>
 800344a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800344c:	e009      	b.n	8003462 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800344e:	f7fe fb25 	bl	8001a9c <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800345c:	d901      	bls.n	8003462 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e022      	b.n	80034a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003462:	4b14      	ldr	r3, [pc, #80]	@ (80034b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800346a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800346e:	d1ee      	bne.n	800344e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003470:	4b10      	ldr	r3, [pc, #64]	@ (80034b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a0f      	ldr	r2, [pc, #60]	@ (80034b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003476:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800347a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800347c:	f7fe fb0e 	bl	8001a9c <HAL_GetTick>
 8003480:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003482:	e009      	b.n	8003498 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003484:	f7fe fb0a 	bl	8001a9c <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003492:	d901      	bls.n	8003498 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e007      	b.n	80034a8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003498:	4b06      	ldr	r3, [pc, #24]	@ (80034b4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034a4:	d1ee      	bne.n	8003484 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40007000 	.word	0x40007000

080034b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80034c0:	2300      	movs	r3, #0
 80034c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e29b      	b.n	8003a06 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 8087 	beq.w	80035ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034dc:	4b96      	ldr	r3, [pc, #600]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 030c 	and.w	r3, r3, #12
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d00c      	beq.n	8003502 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034e8:	4b93      	ldr	r3, [pc, #588]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 030c 	and.w	r3, r3, #12
 80034f0:	2b08      	cmp	r3, #8
 80034f2:	d112      	bne.n	800351a <HAL_RCC_OscConfig+0x62>
 80034f4:	4b90      	ldr	r3, [pc, #576]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003500:	d10b      	bne.n	800351a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003502:	4b8d      	ldr	r3, [pc, #564]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d06c      	beq.n	80035e8 <HAL_RCC_OscConfig+0x130>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d168      	bne.n	80035e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e275      	b.n	8003a06 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003522:	d106      	bne.n	8003532 <HAL_RCC_OscConfig+0x7a>
 8003524:	4b84      	ldr	r3, [pc, #528]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a83      	ldr	r2, [pc, #524]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 800352a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800352e:	6013      	str	r3, [r2, #0]
 8003530:	e02e      	b.n	8003590 <HAL_RCC_OscConfig+0xd8>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10c      	bne.n	8003554 <HAL_RCC_OscConfig+0x9c>
 800353a:	4b7f      	ldr	r3, [pc, #508]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a7e      	ldr	r2, [pc, #504]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 8003540:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	4b7c      	ldr	r3, [pc, #496]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a7b      	ldr	r2, [pc, #492]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 800354c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	e01d      	b.n	8003590 <HAL_RCC_OscConfig+0xd8>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800355c:	d10c      	bne.n	8003578 <HAL_RCC_OscConfig+0xc0>
 800355e:	4b76      	ldr	r3, [pc, #472]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a75      	ldr	r2, [pc, #468]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 8003564:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	4b73      	ldr	r3, [pc, #460]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a72      	ldr	r2, [pc, #456]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 8003570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	e00b      	b.n	8003590 <HAL_RCC_OscConfig+0xd8>
 8003578:	4b6f      	ldr	r3, [pc, #444]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a6e      	ldr	r2, [pc, #440]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 800357e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	4b6c      	ldr	r3, [pc, #432]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a6b      	ldr	r2, [pc, #428]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 800358a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800358e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d013      	beq.n	80035c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003598:	f7fe fa80 	bl	8001a9c <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a0:	f7fe fa7c 	bl	8001a9c <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b64      	cmp	r3, #100	@ 0x64
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e229      	b.n	8003a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b2:	4b61      	ldr	r3, [pc, #388]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d0f0      	beq.n	80035a0 <HAL_RCC_OscConfig+0xe8>
 80035be:	e014      	b.n	80035ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c0:	f7fe fa6c 	bl	8001a9c <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035c8:	f7fe fa68 	bl	8001a9c <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b64      	cmp	r3, #100	@ 0x64
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e215      	b.n	8003a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035da:	4b57      	ldr	r3, [pc, #348]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x110>
 80035e6:	e000      	b.n	80035ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d069      	beq.n	80036ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035f6:	4b50      	ldr	r3, [pc, #320]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00b      	beq.n	800361a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003602:	4b4d      	ldr	r3, [pc, #308]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	2b08      	cmp	r3, #8
 800360c:	d11c      	bne.n	8003648 <HAL_RCC_OscConfig+0x190>
 800360e:	4b4a      	ldr	r3, [pc, #296]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d116      	bne.n	8003648 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361a:	4b47      	ldr	r3, [pc, #284]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_RCC_OscConfig+0x17a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d001      	beq.n	8003632 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e1e9      	b.n	8003a06 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003632:	4b41      	ldr	r3, [pc, #260]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	493d      	ldr	r1, [pc, #244]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 8003642:	4313      	orrs	r3, r2
 8003644:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003646:	e040      	b.n	80036ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d023      	beq.n	8003698 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003650:	4b39      	ldr	r3, [pc, #228]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a38      	ldr	r2, [pc, #224]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365c:	f7fe fa1e 	bl	8001a9c <HAL_GetTick>
 8003660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003662:	e008      	b.n	8003676 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003664:	f7fe fa1a 	bl	8001a9c <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e1c7      	b.n	8003a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003676:	4b30      	ldr	r3, [pc, #192]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f0      	beq.n	8003664 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003682:	4b2d      	ldr	r3, [pc, #180]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	4929      	ldr	r1, [pc, #164]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 8003692:	4313      	orrs	r3, r2
 8003694:	600b      	str	r3, [r1, #0]
 8003696:	e018      	b.n	80036ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003698:	4b27      	ldr	r3, [pc, #156]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a26      	ldr	r2, [pc, #152]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 800369e:	f023 0301 	bic.w	r3, r3, #1
 80036a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fe f9fa 	bl	8001a9c <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ac:	f7fe f9f6 	bl	8001a9c <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e1a3      	b.n	8003a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036be:	4b1e      	ldr	r3, [pc, #120]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d038      	beq.n	8003748 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d019      	beq.n	8003712 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036de:	4b16      	ldr	r3, [pc, #88]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 80036e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036e2:	4a15      	ldr	r2, [pc, #84]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ea:	f7fe f9d7 	bl	8001a9c <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f2:	f7fe f9d3 	bl	8001a9c <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e180      	b.n	8003a06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003704:	4b0c      	ldr	r3, [pc, #48]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 8003706:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0f0      	beq.n	80036f2 <HAL_RCC_OscConfig+0x23a>
 8003710:	e01a      	b.n	8003748 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003712:	4b09      	ldr	r3, [pc, #36]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 8003714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003716:	4a08      	ldr	r2, [pc, #32]	@ (8003738 <HAL_RCC_OscConfig+0x280>)
 8003718:	f023 0301 	bic.w	r3, r3, #1
 800371c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371e:	f7fe f9bd 	bl	8001a9c <HAL_GetTick>
 8003722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003724:	e00a      	b.n	800373c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003726:	f7fe f9b9 	bl	8001a9c <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d903      	bls.n	800373c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e166      	b.n	8003a06 <HAL_RCC_OscConfig+0x54e>
 8003738:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800373c:	4b92      	ldr	r3, [pc, #584]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 800373e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1ee      	bne.n	8003726 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 80a4 	beq.w	800389e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003756:	4b8c      	ldr	r3, [pc, #560]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10d      	bne.n	800377e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003762:	4b89      	ldr	r3, [pc, #548]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003766:	4a88      	ldr	r2, [pc, #544]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 8003768:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800376c:	6413      	str	r3, [r2, #64]	@ 0x40
 800376e:	4b86      	ldr	r3, [pc, #536]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003776:	60bb      	str	r3, [r7, #8]
 8003778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800377a:	2301      	movs	r3, #1
 800377c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800377e:	4b83      	ldr	r3, [pc, #524]	@ (800398c <HAL_RCC_OscConfig+0x4d4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003786:	2b00      	cmp	r3, #0
 8003788:	d118      	bne.n	80037bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800378a:	4b80      	ldr	r3, [pc, #512]	@ (800398c <HAL_RCC_OscConfig+0x4d4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a7f      	ldr	r2, [pc, #508]	@ (800398c <HAL_RCC_OscConfig+0x4d4>)
 8003790:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003796:	f7fe f981 	bl	8001a9c <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800379e:	f7fe f97d 	bl	8001a9c <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b64      	cmp	r3, #100	@ 0x64
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e12a      	b.n	8003a06 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037b0:	4b76      	ldr	r3, [pc, #472]	@ (800398c <HAL_RCC_OscConfig+0x4d4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0f0      	beq.n	800379e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d106      	bne.n	80037d2 <HAL_RCC_OscConfig+0x31a>
 80037c4:	4b70      	ldr	r3, [pc, #448]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 80037c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c8:	4a6f      	ldr	r2, [pc, #444]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 80037ca:	f043 0301 	orr.w	r3, r3, #1
 80037ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d0:	e02d      	b.n	800382e <HAL_RCC_OscConfig+0x376>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10c      	bne.n	80037f4 <HAL_RCC_OscConfig+0x33c>
 80037da:	4b6b      	ldr	r3, [pc, #428]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 80037dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037de:	4a6a      	ldr	r2, [pc, #424]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 80037e0:	f023 0301 	bic.w	r3, r3, #1
 80037e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037e6:	4b68      	ldr	r3, [pc, #416]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ea:	4a67      	ldr	r2, [pc, #412]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 80037ec:	f023 0304 	bic.w	r3, r3, #4
 80037f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80037f2:	e01c      	b.n	800382e <HAL_RCC_OscConfig+0x376>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2b05      	cmp	r3, #5
 80037fa:	d10c      	bne.n	8003816 <HAL_RCC_OscConfig+0x35e>
 80037fc:	4b62      	ldr	r3, [pc, #392]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 80037fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003800:	4a61      	ldr	r2, [pc, #388]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 8003802:	f043 0304 	orr.w	r3, r3, #4
 8003806:	6713      	str	r3, [r2, #112]	@ 0x70
 8003808:	4b5f      	ldr	r3, [pc, #380]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 800380a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380c:	4a5e      	ldr	r2, [pc, #376]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	6713      	str	r3, [r2, #112]	@ 0x70
 8003814:	e00b      	b.n	800382e <HAL_RCC_OscConfig+0x376>
 8003816:	4b5c      	ldr	r3, [pc, #368]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 8003818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800381a:	4a5b      	ldr	r2, [pc, #364]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 800381c:	f023 0301 	bic.w	r3, r3, #1
 8003820:	6713      	str	r3, [r2, #112]	@ 0x70
 8003822:	4b59      	ldr	r3, [pc, #356]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 8003824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003826:	4a58      	ldr	r2, [pc, #352]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 8003828:	f023 0304 	bic.w	r3, r3, #4
 800382c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d015      	beq.n	8003862 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003836:	f7fe f931 	bl	8001a9c <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383c:	e00a      	b.n	8003854 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800383e:	f7fe f92d 	bl	8001a9c <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	f241 3288 	movw	r2, #5000	@ 0x1388
 800384c:	4293      	cmp	r3, r2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e0d8      	b.n	8003a06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003854:	4b4c      	ldr	r3, [pc, #304]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 8003856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0ee      	beq.n	800383e <HAL_RCC_OscConfig+0x386>
 8003860:	e014      	b.n	800388c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003862:	f7fe f91b 	bl	8001a9c <HAL_GetTick>
 8003866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003868:	e00a      	b.n	8003880 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386a:	f7fe f917 	bl	8001a9c <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003878:	4293      	cmp	r3, r2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e0c2      	b.n	8003a06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003880:	4b41      	ldr	r3, [pc, #260]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 8003882:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003884:	f003 0302 	and.w	r3, r3, #2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1ee      	bne.n	800386a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800388c:	7dfb      	ldrb	r3, [r7, #23]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d105      	bne.n	800389e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003892:	4b3d      	ldr	r3, [pc, #244]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003896:	4a3c      	ldr	r2, [pc, #240]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 8003898:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800389c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 80ae 	beq.w	8003a04 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038a8:	4b37      	ldr	r3, [pc, #220]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 030c 	and.w	r3, r3, #12
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d06d      	beq.n	8003990 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d14b      	bne.n	8003954 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038bc:	4b32      	ldr	r3, [pc, #200]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a31      	ldr	r2, [pc, #196]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 80038c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7fe f8e8 	bl	8001a9c <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d0:	f7fe f8e4 	bl	8001a9c <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e091      	b.n	8003a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e2:	4b29      	ldr	r3, [pc, #164]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69da      	ldr	r2, [r3, #28]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fc:	019b      	lsls	r3, r3, #6
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003904:	085b      	lsrs	r3, r3, #1
 8003906:	3b01      	subs	r3, #1
 8003908:	041b      	lsls	r3, r3, #16
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003910:	061b      	lsls	r3, r3, #24
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003918:	071b      	lsls	r3, r3, #28
 800391a:	491b      	ldr	r1, [pc, #108]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 800391c:	4313      	orrs	r3, r2
 800391e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003920:	4b19      	ldr	r3, [pc, #100]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a18      	ldr	r2, [pc, #96]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 8003926:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800392a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392c:	f7fe f8b6 	bl	8001a9c <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003934:	f7fe f8b2 	bl	8001a9c <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e05f      	b.n	8003a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003946:	4b10      	ldr	r3, [pc, #64]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0f0      	beq.n	8003934 <HAL_RCC_OscConfig+0x47c>
 8003952:	e057      	b.n	8003a04 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003954:	4b0c      	ldr	r3, [pc, #48]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a0b      	ldr	r2, [pc, #44]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 800395a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800395e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fe f89c 	bl	8001a9c <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003968:	f7fe f898 	bl	8001a9c <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e045      	b.n	8003a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397a:	4b03      	ldr	r3, [pc, #12]	@ (8003988 <HAL_RCC_OscConfig+0x4d0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x4b0>
 8003986:	e03d      	b.n	8003a04 <HAL_RCC_OscConfig+0x54c>
 8003988:	40023800 	.word	0x40023800
 800398c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003990:	4b1f      	ldr	r3, [pc, #124]	@ (8003a10 <HAL_RCC_OscConfig+0x558>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d030      	beq.n	8003a00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d129      	bne.n	8003a00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d122      	bne.n	8003a00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039c0:	4013      	ands	r3, r2
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d119      	bne.n	8003a00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d6:	085b      	lsrs	r3, r3, #1
 80039d8:	3b01      	subs	r3, #1
 80039da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d10f      	bne.n	8003a00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d107      	bne.n	8003a00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e000      	b.n	8003a06 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40023800 	.word	0x40023800

08003a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d101      	bne.n	8003a2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0d0      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a2c:	4b6a      	ldr	r3, [pc, #424]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 030f 	and.w	r3, r3, #15
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d910      	bls.n	8003a5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3a:	4b67      	ldr	r3, [pc, #412]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f023 020f 	bic.w	r2, r3, #15
 8003a42:	4965      	ldr	r1, [pc, #404]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b63      	ldr	r3, [pc, #396]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0b8      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d020      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d005      	beq.n	8003a80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a74:	4b59      	ldr	r3, [pc, #356]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c8>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	4a58      	ldr	r2, [pc, #352]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c8>)
 8003a7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a8c:	4b53      	ldr	r3, [pc, #332]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c8>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	4a52      	ldr	r2, [pc, #328]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c8>)
 8003a92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a98:	4b50      	ldr	r3, [pc, #320]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c8>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	494d      	ldr	r1, [pc, #308]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c8>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d040      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d107      	bne.n	8003ace <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003abe:	4b47      	ldr	r3, [pc, #284]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d115      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e07f      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d107      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad6:	4b41      	ldr	r3, [pc, #260]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d109      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e073      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae6:	4b3d      	ldr	r3, [pc, #244]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e06b      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003af6:	4b39      	ldr	r3, [pc, #228]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c8>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f023 0203 	bic.w	r2, r3, #3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	4936      	ldr	r1, [pc, #216]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c8>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b08:	f7fd ffc8 	bl	8001a9c <HAL_GetTick>
 8003b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0e:	e00a      	b.n	8003b26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b10:	f7fd ffc4 	bl	8001a9c <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e053      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b26:	4b2d      	ldr	r3, [pc, #180]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c8>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 020c 	and.w	r2, r3, #12
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d1eb      	bne.n	8003b10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b38:	4b27      	ldr	r3, [pc, #156]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 030f 	and.w	r3, r3, #15
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d210      	bcs.n	8003b68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b46:	4b24      	ldr	r3, [pc, #144]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f023 020f 	bic.w	r2, r3, #15
 8003b4e:	4922      	ldr	r1, [pc, #136]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b56:	4b20      	ldr	r3, [pc, #128]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	683a      	ldr	r2, [r7, #0]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d001      	beq.n	8003b68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e032      	b.n	8003bce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b74:	4b19      	ldr	r3, [pc, #100]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c8>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	4916      	ldr	r1, [pc, #88]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c8>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b92:	4b12      	ldr	r3, [pc, #72]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c8>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	00db      	lsls	r3, r3, #3
 8003ba0:	490e      	ldr	r1, [pc, #56]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c8>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ba6:	f000 f821 	bl	8003bec <HAL_RCC_GetSysClockFreq>
 8003baa:	4602      	mov	r2, r0
 8003bac:	4b0b      	ldr	r3, [pc, #44]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c8>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	091b      	lsrs	r3, r3, #4
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	490a      	ldr	r1, [pc, #40]	@ (8003be0 <HAL_RCC_ClockConfig+0x1cc>)
 8003bb8:	5ccb      	ldrb	r3, [r1, r3]
 8003bba:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbe:	4a09      	ldr	r2, [pc, #36]	@ (8003be4 <HAL_RCC_ClockConfig+0x1d0>)
 8003bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bc2:	4b09      	ldr	r3, [pc, #36]	@ (8003be8 <HAL_RCC_ClockConfig+0x1d4>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fd ff24 	bl	8001a14 <HAL_InitTick>

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40023c00 	.word	0x40023c00
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	08008c38 	.word	0x08008c38
 8003be4:	20000000 	.word	0x20000000
 8003be8:	20000008 	.word	0x20000008

08003bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bf0:	b094      	sub	sp, #80	@ 0x50
 8003bf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003c00:	2300      	movs	r3, #0
 8003c02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c04:	4b79      	ldr	r3, [pc, #484]	@ (8003dec <HAL_RCC_GetSysClockFreq+0x200>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 030c 	and.w	r3, r3, #12
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d00d      	beq.n	8003c2c <HAL_RCC_GetSysClockFreq+0x40>
 8003c10:	2b08      	cmp	r3, #8
 8003c12:	f200 80e1 	bhi.w	8003dd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <HAL_RCC_GetSysClockFreq+0x34>
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d003      	beq.n	8003c26 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c1e:	e0db      	b.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c20:	4b73      	ldr	r3, [pc, #460]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c24:	e0db      	b.n	8003dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c26:	4b73      	ldr	r3, [pc, #460]	@ (8003df4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c2a:	e0d8      	b.n	8003dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c2c:	4b6f      	ldr	r3, [pc, #444]	@ (8003dec <HAL_RCC_GetSysClockFreq+0x200>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c34:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c36:	4b6d      	ldr	r3, [pc, #436]	@ (8003dec <HAL_RCC_GetSysClockFreq+0x200>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d063      	beq.n	8003d0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c42:	4b6a      	ldr	r3, [pc, #424]	@ (8003dec <HAL_RCC_GetSysClockFreq+0x200>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	099b      	lsrs	r3, r3, #6
 8003c48:	2200      	movs	r2, #0
 8003c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c54:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c56:	2300      	movs	r3, #0
 8003c58:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c5e:	4622      	mov	r2, r4
 8003c60:	462b      	mov	r3, r5
 8003c62:	f04f 0000 	mov.w	r0, #0
 8003c66:	f04f 0100 	mov.w	r1, #0
 8003c6a:	0159      	lsls	r1, r3, #5
 8003c6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c70:	0150      	lsls	r0, r2, #5
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4621      	mov	r1, r4
 8003c78:	1a51      	subs	r1, r2, r1
 8003c7a:	6139      	str	r1, [r7, #16]
 8003c7c:	4629      	mov	r1, r5
 8003c7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c90:	4659      	mov	r1, fp
 8003c92:	018b      	lsls	r3, r1, #6
 8003c94:	4651      	mov	r1, sl
 8003c96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c9a:	4651      	mov	r1, sl
 8003c9c:	018a      	lsls	r2, r1, #6
 8003c9e:	4651      	mov	r1, sl
 8003ca0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ca4:	4659      	mov	r1, fp
 8003ca6:	eb63 0901 	sbc.w	r9, r3, r1
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cbe:	4690      	mov	r8, r2
 8003cc0:	4699      	mov	r9, r3
 8003cc2:	4623      	mov	r3, r4
 8003cc4:	eb18 0303 	adds.w	r3, r8, r3
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	462b      	mov	r3, r5
 8003ccc:	eb49 0303 	adc.w	r3, r9, r3
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cde:	4629      	mov	r1, r5
 8003ce0:	024b      	lsls	r3, r1, #9
 8003ce2:	4621      	mov	r1, r4
 8003ce4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ce8:	4621      	mov	r1, r4
 8003cea:	024a      	lsls	r2, r1, #9
 8003cec:	4610      	mov	r0, r2
 8003cee:	4619      	mov	r1, r3
 8003cf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cfc:	f7fc faa0 	bl	8000240 <__aeabi_uldivmod>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4613      	mov	r3, r2
 8003d06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d08:	e058      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d0a:	4b38      	ldr	r3, [pc, #224]	@ (8003dec <HAL_RCC_GetSysClockFreq+0x200>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	099b      	lsrs	r3, r3, #6
 8003d10:	2200      	movs	r2, #0
 8003d12:	4618      	mov	r0, r3
 8003d14:	4611      	mov	r1, r2
 8003d16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d1a:	623b      	str	r3, [r7, #32]
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d24:	4642      	mov	r2, r8
 8003d26:	464b      	mov	r3, r9
 8003d28:	f04f 0000 	mov.w	r0, #0
 8003d2c:	f04f 0100 	mov.w	r1, #0
 8003d30:	0159      	lsls	r1, r3, #5
 8003d32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d36:	0150      	lsls	r0, r2, #5
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4641      	mov	r1, r8
 8003d3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d42:	4649      	mov	r1, r9
 8003d44:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d5c:	ebb2 040a 	subs.w	r4, r2, sl
 8003d60:	eb63 050b 	sbc.w	r5, r3, fp
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	00eb      	lsls	r3, r5, #3
 8003d6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d72:	00e2      	lsls	r2, r4, #3
 8003d74:	4614      	mov	r4, r2
 8003d76:	461d      	mov	r5, r3
 8003d78:	4643      	mov	r3, r8
 8003d7a:	18e3      	adds	r3, r4, r3
 8003d7c:	603b      	str	r3, [r7, #0]
 8003d7e:	464b      	mov	r3, r9
 8003d80:	eb45 0303 	adc.w	r3, r5, r3
 8003d84:	607b      	str	r3, [r7, #4]
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d92:	4629      	mov	r1, r5
 8003d94:	028b      	lsls	r3, r1, #10
 8003d96:	4621      	mov	r1, r4
 8003d98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	028a      	lsls	r2, r1, #10
 8003da0:	4610      	mov	r0, r2
 8003da2:	4619      	mov	r1, r3
 8003da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003da6:	2200      	movs	r2, #0
 8003da8:	61bb      	str	r3, [r7, #24]
 8003daa:	61fa      	str	r2, [r7, #28]
 8003dac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003db0:	f7fc fa46 	bl	8000240 <__aeabi_uldivmod>
 8003db4:	4602      	mov	r2, r0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4613      	mov	r3, r2
 8003dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003dec <HAL_RCC_GetSysClockFreq+0x200>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	0c1b      	lsrs	r3, r3, #16
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003dcc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dd6:	e002      	b.n	8003dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dd8:	4b05      	ldr	r3, [pc, #20]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3750      	adds	r7, #80	@ 0x50
 8003de4:	46bd      	mov	sp, r7
 8003de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dea:	bf00      	nop
 8003dec:	40023800 	.word	0x40023800
 8003df0:	00f42400 	.word	0x00f42400
 8003df4:	007a1200 	.word	0x007a1200

08003df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e049      	b.n	8003e9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d106      	bne.n	8003e24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fd fcf8 	bl	8001814 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3304      	adds	r3, #4
 8003e34:	4619      	mov	r1, r3
 8003e36:	4610      	mov	r0, r2
 8003e38:	f000 fb6e 	bl	8004518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e049      	b.n	8003f4c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d106      	bne.n	8003ed2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f841 	bl	8003f54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	f000 fb17 	bl	8004518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d109      	bne.n	8003f8c <HAL_TIM_PWM_Start+0x24>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	bf14      	ite	ne
 8003f84:	2301      	movne	r3, #1
 8003f86:	2300      	moveq	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	e03c      	b.n	8004006 <HAL_TIM_PWM_Start+0x9e>
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d109      	bne.n	8003fa6 <HAL_TIM_PWM_Start+0x3e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	bf14      	ite	ne
 8003f9e:	2301      	movne	r3, #1
 8003fa0:	2300      	moveq	r3, #0
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	e02f      	b.n	8004006 <HAL_TIM_PWM_Start+0x9e>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d109      	bne.n	8003fc0 <HAL_TIM_PWM_Start+0x58>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	bf14      	ite	ne
 8003fb8:	2301      	movne	r3, #1
 8003fba:	2300      	moveq	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	e022      	b.n	8004006 <HAL_TIM_PWM_Start+0x9e>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	2b0c      	cmp	r3, #12
 8003fc4:	d109      	bne.n	8003fda <HAL_TIM_PWM_Start+0x72>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	bf14      	ite	ne
 8003fd2:	2301      	movne	r3, #1
 8003fd4:	2300      	moveq	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	e015      	b.n	8004006 <HAL_TIM_PWM_Start+0x9e>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b10      	cmp	r3, #16
 8003fde:	d109      	bne.n	8003ff4 <HAL_TIM_PWM_Start+0x8c>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	bf14      	ite	ne
 8003fec:	2301      	movne	r3, #1
 8003fee:	2300      	moveq	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	e008      	b.n	8004006 <HAL_TIM_PWM_Start+0x9e>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	bf14      	ite	ne
 8004000:	2301      	movne	r3, #1
 8004002:	2300      	moveq	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e092      	b.n	8004134 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d104      	bne.n	800401e <HAL_TIM_PWM_Start+0xb6>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800401c:	e023      	b.n	8004066 <HAL_TIM_PWM_Start+0xfe>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b04      	cmp	r3, #4
 8004022:	d104      	bne.n	800402e <HAL_TIM_PWM_Start+0xc6>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800402c:	e01b      	b.n	8004066 <HAL_TIM_PWM_Start+0xfe>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b08      	cmp	r3, #8
 8004032:	d104      	bne.n	800403e <HAL_TIM_PWM_Start+0xd6>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800403c:	e013      	b.n	8004066 <HAL_TIM_PWM_Start+0xfe>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b0c      	cmp	r3, #12
 8004042:	d104      	bne.n	800404e <HAL_TIM_PWM_Start+0xe6>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800404c:	e00b      	b.n	8004066 <HAL_TIM_PWM_Start+0xfe>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b10      	cmp	r3, #16
 8004052:	d104      	bne.n	800405e <HAL_TIM_PWM_Start+0xf6>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800405c:	e003      	b.n	8004066 <HAL_TIM_PWM_Start+0xfe>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2202      	movs	r2, #2
 8004062:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2201      	movs	r2, #1
 800406c:	6839      	ldr	r1, [r7, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fdf6 	bl	8004c60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a30      	ldr	r2, [pc, #192]	@ (800413c <HAL_TIM_PWM_Start+0x1d4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d004      	beq.n	8004088 <HAL_TIM_PWM_Start+0x120>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a2f      	ldr	r2, [pc, #188]	@ (8004140 <HAL_TIM_PWM_Start+0x1d8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d101      	bne.n	800408c <HAL_TIM_PWM_Start+0x124>
 8004088:	2301      	movs	r3, #1
 800408a:	e000      	b.n	800408e <HAL_TIM_PWM_Start+0x126>
 800408c:	2300      	movs	r3, #0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d007      	beq.n	80040a2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a25      	ldr	r2, [pc, #148]	@ (800413c <HAL_TIM_PWM_Start+0x1d4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d022      	beq.n	80040f2 <HAL_TIM_PWM_Start+0x18a>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040b4:	d01d      	beq.n	80040f2 <HAL_TIM_PWM_Start+0x18a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a22      	ldr	r2, [pc, #136]	@ (8004144 <HAL_TIM_PWM_Start+0x1dc>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d018      	beq.n	80040f2 <HAL_TIM_PWM_Start+0x18a>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a20      	ldr	r2, [pc, #128]	@ (8004148 <HAL_TIM_PWM_Start+0x1e0>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d013      	beq.n	80040f2 <HAL_TIM_PWM_Start+0x18a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a1f      	ldr	r2, [pc, #124]	@ (800414c <HAL_TIM_PWM_Start+0x1e4>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00e      	beq.n	80040f2 <HAL_TIM_PWM_Start+0x18a>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a19      	ldr	r2, [pc, #100]	@ (8004140 <HAL_TIM_PWM_Start+0x1d8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d009      	beq.n	80040f2 <HAL_TIM_PWM_Start+0x18a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004150 <HAL_TIM_PWM_Start+0x1e8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d004      	beq.n	80040f2 <HAL_TIM_PWM_Start+0x18a>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a19      	ldr	r2, [pc, #100]	@ (8004154 <HAL_TIM_PWM_Start+0x1ec>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d115      	bne.n	800411e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	4b17      	ldr	r3, [pc, #92]	@ (8004158 <HAL_TIM_PWM_Start+0x1f0>)
 80040fa:	4013      	ands	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b06      	cmp	r3, #6
 8004102:	d015      	beq.n	8004130 <HAL_TIM_PWM_Start+0x1c8>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800410a:	d011      	beq.n	8004130 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f042 0201 	orr.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411c:	e008      	b.n	8004130 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0201 	orr.w	r2, r2, #1
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	e000      	b.n	8004132 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004130:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40010000 	.word	0x40010000
 8004140:	40010400 	.word	0x40010400
 8004144:	40000400 	.word	0x40000400
 8004148:	40000800 	.word	0x40000800
 800414c:	40000c00 	.word	0x40000c00
 8004150:	40014000 	.word	0x40014000
 8004154:	40001800 	.word	0x40001800
 8004158:	00010007 	.word	0x00010007

0800415c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004172:	2b01      	cmp	r3, #1
 8004174:	d101      	bne.n	800417a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004176:	2302      	movs	r3, #2
 8004178:	e0ff      	b.n	800437a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b14      	cmp	r3, #20
 8004186:	f200 80f0 	bhi.w	800436a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800418a:	a201      	add	r2, pc, #4	@ (adr r2, 8004190 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800418c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004190:	080041e5 	.word	0x080041e5
 8004194:	0800436b 	.word	0x0800436b
 8004198:	0800436b 	.word	0x0800436b
 800419c:	0800436b 	.word	0x0800436b
 80041a0:	08004225 	.word	0x08004225
 80041a4:	0800436b 	.word	0x0800436b
 80041a8:	0800436b 	.word	0x0800436b
 80041ac:	0800436b 	.word	0x0800436b
 80041b0:	08004267 	.word	0x08004267
 80041b4:	0800436b 	.word	0x0800436b
 80041b8:	0800436b 	.word	0x0800436b
 80041bc:	0800436b 	.word	0x0800436b
 80041c0:	080042a7 	.word	0x080042a7
 80041c4:	0800436b 	.word	0x0800436b
 80041c8:	0800436b 	.word	0x0800436b
 80041cc:	0800436b 	.word	0x0800436b
 80041d0:	080042e9 	.word	0x080042e9
 80041d4:	0800436b 	.word	0x0800436b
 80041d8:	0800436b 	.word	0x0800436b
 80041dc:	0800436b 	.word	0x0800436b
 80041e0:	08004329 	.word	0x08004329
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fa40 	bl	8004670 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f042 0208 	orr.w	r2, r2, #8
 80041fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0204 	bic.w	r2, r2, #4
 800420e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6999      	ldr	r1, [r3, #24]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	691a      	ldr	r2, [r3, #16]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	619a      	str	r2, [r3, #24]
      break;
 8004222:	e0a5      	b.n	8004370 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fa92 	bl	8004754 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699a      	ldr	r2, [r3, #24]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800423e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699a      	ldr	r2, [r3, #24]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800424e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	6999      	ldr	r1, [r3, #24]
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	021a      	lsls	r2, r3, #8
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	619a      	str	r2, [r3, #24]
      break;
 8004264:	e084      	b.n	8004370 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68b9      	ldr	r1, [r7, #8]
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fae9 	bl	8004844 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69da      	ldr	r2, [r3, #28]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f042 0208 	orr.w	r2, r2, #8
 8004280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69da      	ldr	r2, [r3, #28]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0204 	bic.w	r2, r2, #4
 8004290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69d9      	ldr	r1, [r3, #28]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	691a      	ldr	r2, [r3, #16]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	61da      	str	r2, [r3, #28]
      break;
 80042a4:	e064      	b.n	8004370 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 fb3f 	bl	8004930 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	69da      	ldr	r2, [r3, #28]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	69da      	ldr	r2, [r3, #28]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69d9      	ldr	r1, [r3, #28]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	021a      	lsls	r2, r3, #8
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	61da      	str	r2, [r3, #28]
      break;
 80042e6:	e043      	b.n	8004370 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fb76 	bl	80049e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0208 	orr.w	r2, r2, #8
 8004302:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 0204 	bic.w	r2, r2, #4
 8004312:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	691a      	ldr	r2, [r3, #16]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004326:	e023      	b.n	8004370 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68b9      	ldr	r1, [r7, #8]
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fba8 	bl	8004a84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004342:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004352:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	021a      	lsls	r2, r3, #8
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	430a      	orrs	r2, r1
 8004366:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004368:	e002      	b.n	8004370 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	75fb      	strb	r3, [r7, #23]
      break;
 800436e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004378:	7dfb      	ldrb	r3, [r7, #23]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop

08004384 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_TIM_ConfigClockSource+0x1c>
 800439c:	2302      	movs	r3, #2
 800439e:	e0b4      	b.n	800450a <HAL_TIM_ConfigClockSource+0x186>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2202      	movs	r2, #2
 80043ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	4b56      	ldr	r3, [pc, #344]	@ (8004514 <HAL_TIM_ConfigClockSource+0x190>)
 80043bc:	4013      	ands	r3, r2
 80043be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043d8:	d03e      	beq.n	8004458 <HAL_TIM_ConfigClockSource+0xd4>
 80043da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043de:	f200 8087 	bhi.w	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
 80043e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043e6:	f000 8086 	beq.w	80044f6 <HAL_TIM_ConfigClockSource+0x172>
 80043ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ee:	d87f      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
 80043f0:	2b70      	cmp	r3, #112	@ 0x70
 80043f2:	d01a      	beq.n	800442a <HAL_TIM_ConfigClockSource+0xa6>
 80043f4:	2b70      	cmp	r3, #112	@ 0x70
 80043f6:	d87b      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
 80043f8:	2b60      	cmp	r3, #96	@ 0x60
 80043fa:	d050      	beq.n	800449e <HAL_TIM_ConfigClockSource+0x11a>
 80043fc:	2b60      	cmp	r3, #96	@ 0x60
 80043fe:	d877      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004400:	2b50      	cmp	r3, #80	@ 0x50
 8004402:	d03c      	beq.n	800447e <HAL_TIM_ConfigClockSource+0xfa>
 8004404:	2b50      	cmp	r3, #80	@ 0x50
 8004406:	d873      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004408:	2b40      	cmp	r3, #64	@ 0x40
 800440a:	d058      	beq.n	80044be <HAL_TIM_ConfigClockSource+0x13a>
 800440c:	2b40      	cmp	r3, #64	@ 0x40
 800440e:	d86f      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004410:	2b30      	cmp	r3, #48	@ 0x30
 8004412:	d064      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x15a>
 8004414:	2b30      	cmp	r3, #48	@ 0x30
 8004416:	d86b      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004418:	2b20      	cmp	r3, #32
 800441a:	d060      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x15a>
 800441c:	2b20      	cmp	r3, #32
 800441e:	d867      	bhi.n	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004420:	2b00      	cmp	r3, #0
 8004422:	d05c      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x15a>
 8004424:	2b10      	cmp	r3, #16
 8004426:	d05a      	beq.n	80044de <HAL_TIM_ConfigClockSource+0x15a>
 8004428:	e062      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800443a:	f000 fbf1 	bl	8004c20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800444c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	609a      	str	r2, [r3, #8]
      break;
 8004456:	e04f      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004468:	f000 fbda 	bl	8004c20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800447a:	609a      	str	r2, [r3, #8]
      break;
 800447c:	e03c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800448a:	461a      	mov	r2, r3
 800448c:	f000 fb4e 	bl	8004b2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2150      	movs	r1, #80	@ 0x50
 8004496:	4618      	mov	r0, r3
 8004498:	f000 fba7 	bl	8004bea <TIM_ITRx_SetConfig>
      break;
 800449c:	e02c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044aa:	461a      	mov	r2, r3
 80044ac:	f000 fb6d 	bl	8004b8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2160      	movs	r1, #96	@ 0x60
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 fb97 	bl	8004bea <TIM_ITRx_SetConfig>
      break;
 80044bc:	e01c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ca:	461a      	mov	r2, r3
 80044cc:	f000 fb2e 	bl	8004b2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2140      	movs	r1, #64	@ 0x40
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fb87 	bl	8004bea <TIM_ITRx_SetConfig>
      break;
 80044dc:	e00c      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4619      	mov	r1, r3
 80044e8:	4610      	mov	r0, r2
 80044ea:	f000 fb7e 	bl	8004bea <TIM_ITRx_SetConfig>
      break;
 80044ee:	e003      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]
      break;
 80044f4:	e000      	b.n	80044f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80044f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004508:	7bfb      	ldrb	r3, [r7, #15]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	fffeff88 	.word	0xfffeff88

08004518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a46      	ldr	r2, [pc, #280]	@ (8004644 <TIM_Base_SetConfig+0x12c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d013      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004536:	d00f      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a43      	ldr	r2, [pc, #268]	@ (8004648 <TIM_Base_SetConfig+0x130>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d00b      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a42      	ldr	r2, [pc, #264]	@ (800464c <TIM_Base_SetConfig+0x134>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d007      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a41      	ldr	r2, [pc, #260]	@ (8004650 <TIM_Base_SetConfig+0x138>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d003      	beq.n	8004558 <TIM_Base_SetConfig+0x40>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a40      	ldr	r2, [pc, #256]	@ (8004654 <TIM_Base_SetConfig+0x13c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d108      	bne.n	800456a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800455e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a35      	ldr	r2, [pc, #212]	@ (8004644 <TIM_Base_SetConfig+0x12c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d02b      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004578:	d027      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a32      	ldr	r2, [pc, #200]	@ (8004648 <TIM_Base_SetConfig+0x130>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d023      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a31      	ldr	r2, [pc, #196]	@ (800464c <TIM_Base_SetConfig+0x134>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d01f      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a30      	ldr	r2, [pc, #192]	@ (8004650 <TIM_Base_SetConfig+0x138>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d01b      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a2f      	ldr	r2, [pc, #188]	@ (8004654 <TIM_Base_SetConfig+0x13c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d017      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a2e      	ldr	r2, [pc, #184]	@ (8004658 <TIM_Base_SetConfig+0x140>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d013      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a2d      	ldr	r2, [pc, #180]	@ (800465c <TIM_Base_SetConfig+0x144>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00f      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a2c      	ldr	r2, [pc, #176]	@ (8004660 <TIM_Base_SetConfig+0x148>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00b      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004664 <TIM_Base_SetConfig+0x14c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d007      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a2a      	ldr	r2, [pc, #168]	@ (8004668 <TIM_Base_SetConfig+0x150>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d003      	beq.n	80045ca <TIM_Base_SetConfig+0xb2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a29      	ldr	r2, [pc, #164]	@ (800466c <TIM_Base_SetConfig+0x154>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d108      	bne.n	80045dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a10      	ldr	r2, [pc, #64]	@ (8004644 <TIM_Base_SetConfig+0x12c>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d003      	beq.n	8004610 <TIM_Base_SetConfig+0xf8>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a12      	ldr	r2, [pc, #72]	@ (8004654 <TIM_Base_SetConfig+0x13c>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d103      	bne.n	8004618 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b01      	cmp	r3, #1
 8004628:	d105      	bne.n	8004636 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f023 0201 	bic.w	r2, r3, #1
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	611a      	str	r2, [r3, #16]
  }
}
 8004636:	bf00      	nop
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	40010000 	.word	0x40010000
 8004648:	40000400 	.word	0x40000400
 800464c:	40000800 	.word	0x40000800
 8004650:	40000c00 	.word	0x40000c00
 8004654:	40010400 	.word	0x40010400
 8004658:	40014000 	.word	0x40014000
 800465c:	40014400 	.word	0x40014400
 8004660:	40014800 	.word	0x40014800
 8004664:	40001800 	.word	0x40001800
 8004668:	40001c00 	.word	0x40001c00
 800466c:	40002000 	.word	0x40002000

08004670 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004670:	b480      	push	{r7}
 8004672:	b087      	sub	sp, #28
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a1b      	ldr	r3, [r3, #32]
 800467e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	f023 0201 	bic.w	r2, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4b2b      	ldr	r3, [pc, #172]	@ (8004748 <TIM_OC1_SetConfig+0xd8>)
 800469c:	4013      	ands	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0303 	bic.w	r3, r3, #3
 80046a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f023 0302 	bic.w	r3, r3, #2
 80046b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a21      	ldr	r2, [pc, #132]	@ (800474c <TIM_OC1_SetConfig+0xdc>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d003      	beq.n	80046d4 <TIM_OC1_SetConfig+0x64>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a20      	ldr	r2, [pc, #128]	@ (8004750 <TIM_OC1_SetConfig+0xe0>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d10c      	bne.n	80046ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f023 0308 	bic.w	r3, r3, #8
 80046da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f023 0304 	bic.w	r3, r3, #4
 80046ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a16      	ldr	r2, [pc, #88]	@ (800474c <TIM_OC1_SetConfig+0xdc>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d003      	beq.n	80046fe <TIM_OC1_SetConfig+0x8e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a15      	ldr	r2, [pc, #84]	@ (8004750 <TIM_OC1_SetConfig+0xe0>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d111      	bne.n	8004722 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800470c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	4313      	orrs	r3, r2
 8004720:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	621a      	str	r2, [r3, #32]
}
 800473c:	bf00      	nop
 800473e:	371c      	adds	r7, #28
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	fffeff8f 	.word	0xfffeff8f
 800474c:	40010000 	.word	0x40010000
 8004750:	40010400 	.word	0x40010400

08004754 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	f023 0210 	bic.w	r2, r3, #16
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4b2e      	ldr	r3, [pc, #184]	@ (8004838 <TIM_OC2_SetConfig+0xe4>)
 8004780:	4013      	ands	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800478a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	4313      	orrs	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f023 0320 	bic.w	r3, r3, #32
 800479e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a23      	ldr	r2, [pc, #140]	@ (800483c <TIM_OC2_SetConfig+0xe8>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d003      	beq.n	80047bc <TIM_OC2_SetConfig+0x68>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a22      	ldr	r2, [pc, #136]	@ (8004840 <TIM_OC2_SetConfig+0xec>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d10d      	bne.n	80047d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	011b      	lsls	r3, r3, #4
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a18      	ldr	r2, [pc, #96]	@ (800483c <TIM_OC2_SetConfig+0xe8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d003      	beq.n	80047e8 <TIM_OC2_SetConfig+0x94>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a17      	ldr	r2, [pc, #92]	@ (8004840 <TIM_OC2_SetConfig+0xec>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d113      	bne.n	8004810 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	693a      	ldr	r2, [r7, #16]
 8004800:	4313      	orrs	r3, r2
 8004802:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	4313      	orrs	r3, r2
 800480e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	621a      	str	r2, [r3, #32]
}
 800482a:	bf00      	nop
 800482c:	371c      	adds	r7, #28
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	feff8fff 	.word	0xfeff8fff
 800483c:	40010000 	.word	0x40010000
 8004840:	40010400 	.word	0x40010400

08004844 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	4b2d      	ldr	r3, [pc, #180]	@ (8004924 <TIM_OC3_SetConfig+0xe0>)
 8004870:	4013      	ands	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0303 	bic.w	r3, r3, #3
 800487a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800488c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	021b      	lsls	r3, r3, #8
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a22      	ldr	r2, [pc, #136]	@ (8004928 <TIM_OC3_SetConfig+0xe4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d003      	beq.n	80048aa <TIM_OC3_SetConfig+0x66>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a21      	ldr	r2, [pc, #132]	@ (800492c <TIM_OC3_SetConfig+0xe8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d10d      	bne.n	80048c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	021b      	lsls	r3, r3, #8
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a17      	ldr	r2, [pc, #92]	@ (8004928 <TIM_OC3_SetConfig+0xe4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d003      	beq.n	80048d6 <TIM_OC3_SetConfig+0x92>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a16      	ldr	r2, [pc, #88]	@ (800492c <TIM_OC3_SetConfig+0xe8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d113      	bne.n	80048fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	011b      	lsls	r3, r3, #4
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	621a      	str	r2, [r3, #32]
}
 8004918:	bf00      	nop
 800491a:	371c      	adds	r7, #28
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr
 8004924:	fffeff8f 	.word	0xfffeff8f
 8004928:	40010000 	.word	0x40010000
 800492c:	40010400 	.word	0x40010400

08004930 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4b1e      	ldr	r3, [pc, #120]	@ (80049d4 <TIM_OC4_SetConfig+0xa4>)
 800495c:	4013      	ands	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004966:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	021b      	lsls	r3, r3, #8
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	4313      	orrs	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800497a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	031b      	lsls	r3, r3, #12
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a13      	ldr	r2, [pc, #76]	@ (80049d8 <TIM_OC4_SetConfig+0xa8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d003      	beq.n	8004998 <TIM_OC4_SetConfig+0x68>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a12      	ldr	r2, [pc, #72]	@ (80049dc <TIM_OC4_SetConfig+0xac>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d109      	bne.n	80049ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800499e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	019b      	lsls	r3, r3, #6
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	697a      	ldr	r2, [r7, #20]
 80049b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	621a      	str	r2, [r3, #32]
}
 80049c6:	bf00      	nop
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	feff8fff 	.word	0xfeff8fff
 80049d8:	40010000 	.word	0x40010000
 80049dc:	40010400 	.word	0x40010400

080049e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8004a78 <TIM_OC5_SetConfig+0x98>)
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004a20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	041b      	lsls	r3, r3, #16
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a12      	ldr	r2, [pc, #72]	@ (8004a7c <TIM_OC5_SetConfig+0x9c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d003      	beq.n	8004a3e <TIM_OC5_SetConfig+0x5e>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a11      	ldr	r2, [pc, #68]	@ (8004a80 <TIM_OC5_SetConfig+0xa0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d109      	bne.n	8004a52 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	621a      	str	r2, [r3, #32]
}
 8004a6c:	bf00      	nop
 8004a6e:	371c      	adds	r7, #28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	fffeff8f 	.word	0xfffeff8f
 8004a7c:	40010000 	.word	0x40010000
 8004a80:	40010400 	.word	0x40010400

08004a84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4b1c      	ldr	r3, [pc, #112]	@ (8004b20 <TIM_OC6_SetConfig+0x9c>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004ac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	051b      	lsls	r3, r3, #20
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a13      	ldr	r2, [pc, #76]	@ (8004b24 <TIM_OC6_SetConfig+0xa0>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d003      	beq.n	8004ae4 <TIM_OC6_SetConfig+0x60>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a12      	ldr	r2, [pc, #72]	@ (8004b28 <TIM_OC6_SetConfig+0xa4>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d109      	bne.n	8004af8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004aea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	029b      	lsls	r3, r3, #10
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	621a      	str	r2, [r3, #32]
}
 8004b12:	bf00      	nop
 8004b14:	371c      	adds	r7, #28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	feff8fff 	.word	0xfeff8fff
 8004b24:	40010000 	.word	0x40010000
 8004b28:	40010400 	.word	0x40010400

08004b2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	f023 0201 	bic.w	r2, r3, #1
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f023 030a 	bic.w	r3, r3, #10
 8004b68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	621a      	str	r2, [r3, #32]
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b087      	sub	sp, #28
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	60b9      	str	r1, [r7, #8]
 8004b94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	f023 0210 	bic.w	r2, r3, #16
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	031b      	lsls	r3, r3, #12
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004bc6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	621a      	str	r2, [r3, #32]
}
 8004bde:	bf00      	nop
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b085      	sub	sp, #20
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
 8004bf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f043 0307 	orr.w	r3, r3, #7
 8004c0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	609a      	str	r2, [r3, #8]
}
 8004c14:	bf00      	nop
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	021a      	lsls	r2, r3, #8
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	431a      	orrs	r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	609a      	str	r2, [r3, #8]
}
 8004c54:	bf00      	nop
 8004c56:	371c      	adds	r7, #28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f003 031f 	and.w	r3, r3, #31
 8004c72:	2201      	movs	r2, #1
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6a1a      	ldr	r2, [r3, #32]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	43db      	mvns	r3, r3
 8004c82:	401a      	ands	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a1a      	ldr	r2, [r3, #32]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f003 031f 	and.w	r3, r3, #31
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	fa01 f303 	lsl.w	r3, r1, r3
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	621a      	str	r2, [r3, #32]
}
 8004c9e:	bf00      	nop
 8004ca0:	371c      	adds	r7, #28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
	...

08004cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e06d      	b.n	8004da0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a30      	ldr	r2, [pc, #192]	@ (8004dac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d004      	beq.n	8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a2f      	ldr	r2, [pc, #188]	@ (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d108      	bne.n	8004d0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004cfe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a20      	ldr	r2, [pc, #128]	@ (8004dac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d022      	beq.n	8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d36:	d01d      	beq.n	8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004db4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d018      	beq.n	8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a1c      	ldr	r2, [pc, #112]	@ (8004db8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d013      	beq.n	8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a1a      	ldr	r2, [pc, #104]	@ (8004dbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00e      	beq.n	8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a15      	ldr	r2, [pc, #84]	@ (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d009      	beq.n	8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a16      	ldr	r2, [pc, #88]	@ (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d004      	beq.n	8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a15      	ldr	r2, [pc, #84]	@ (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d10c      	bne.n	8004d8e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	40010000 	.word	0x40010000
 8004db0:	40010400 	.word	0x40010400
 8004db4:	40000400 	.word	0x40000400
 8004db8:	40000800 	.word	0x40000800
 8004dbc:	40000c00 	.word	0x40000c00
 8004dc0:	40014000 	.word	0x40014000
 8004dc4:	40001800 	.word	0x40001800

08004dc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004dcc:	bf00      	nop
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dde:	f3ef 8305 	mrs	r3, IPSR
 8004de2:	60bb      	str	r3, [r7, #8]
  return(result);
 8004de4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10f      	bne.n	8004e0a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dea:	f3ef 8310 	mrs	r3, PRIMASK
 8004dee:	607b      	str	r3, [r7, #4]
  return(result);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d105      	bne.n	8004e02 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004df6:	f3ef 8311 	mrs	r3, BASEPRI
 8004dfa:	603b      	str	r3, [r7, #0]
  return(result);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d007      	beq.n	8004e12 <osKernelInitialize+0x3a>
 8004e02:	4b0e      	ldr	r3, [pc, #56]	@ (8004e3c <osKernelInitialize+0x64>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d103      	bne.n	8004e12 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004e0a:	f06f 0305 	mvn.w	r3, #5
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	e00c      	b.n	8004e2c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004e12:	4b0a      	ldr	r3, [pc, #40]	@ (8004e3c <osKernelInitialize+0x64>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d105      	bne.n	8004e26 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004e1a:	4b08      	ldr	r3, [pc, #32]	@ (8004e3c <osKernelInitialize+0x64>)
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004e20:	2300      	movs	r3, #0
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	e002      	b.n	8004e2c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004e26:	f04f 33ff 	mov.w	r3, #4294967295
 8004e2a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	200002d8 	.word	0x200002d8

08004e40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e46:	f3ef 8305 	mrs	r3, IPSR
 8004e4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e4c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10f      	bne.n	8004e72 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e52:	f3ef 8310 	mrs	r3, PRIMASK
 8004e56:	607b      	str	r3, [r7, #4]
  return(result);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d105      	bne.n	8004e6a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e5e:	f3ef 8311 	mrs	r3, BASEPRI
 8004e62:	603b      	str	r3, [r7, #0]
  return(result);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d007      	beq.n	8004e7a <osKernelStart+0x3a>
 8004e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ea8 <osKernelStart+0x68>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d103      	bne.n	8004e7a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004e72:	f06f 0305 	mvn.w	r3, #5
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	e010      	b.n	8004e9c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea8 <osKernelStart+0x68>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d109      	bne.n	8004e96 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004e82:	f7ff ffa1 	bl	8004dc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004e86:	4b08      	ldr	r3, [pc, #32]	@ (8004ea8 <osKernelStart+0x68>)
 8004e88:	2202      	movs	r2, #2
 8004e8a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004e8c:	f001 feea 	bl	8006c64 <vTaskStartScheduler>
      stat = osOK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	e002      	b.n	8004e9c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004e96:	f04f 33ff 	mov.w	r3, #4294967295
 8004e9a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	200002d8 	.word	0x200002d8

08004eac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b090      	sub	sp, #64	@ 0x40
 8004eb0:	af04      	add	r7, sp, #16
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ebc:	f3ef 8305 	mrs	r3, IPSR
 8004ec0:	61fb      	str	r3, [r7, #28]
  return(result);
 8004ec2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f040 808f 	bne.w	8004fe8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eca:	f3ef 8310 	mrs	r3, PRIMASK
 8004ece:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d105      	bne.n	8004ee2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ed6:	f3ef 8311 	mrs	r3, BASEPRI
 8004eda:	617b      	str	r3, [r7, #20]
  return(result);
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d003      	beq.n	8004eea <osThreadNew+0x3e>
 8004ee2:	4b44      	ldr	r3, [pc, #272]	@ (8004ff4 <osThreadNew+0x148>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d07e      	beq.n	8004fe8 <osThreadNew+0x13c>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d07b      	beq.n	8004fe8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004ef0:	2380      	movs	r3, #128	@ 0x80
 8004ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8004ef4:	2318      	movs	r3, #24
 8004ef6:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8004efc:	f04f 33ff 	mov.w	r3, #4294967295
 8004f00:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d045      	beq.n	8004f94 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <osThreadNew+0x6a>
        name = attr->name;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d008      	beq.n	8004f3c <osThreadNew+0x90>
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	2b38      	cmp	r3, #56	@ 0x38
 8004f2e:	d805      	bhi.n	8004f3c <osThreadNew+0x90>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <osThreadNew+0x94>
        return (NULL);
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	e054      	b.n	8004fea <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	089b      	lsrs	r3, r3, #2
 8004f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00e      	beq.n	8004f76 <osThreadNew+0xca>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	2b5b      	cmp	r3, #91	@ 0x5b
 8004f5e:	d90a      	bls.n	8004f76 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d006      	beq.n	8004f76 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d002      	beq.n	8004f76 <osThreadNew+0xca>
        mem = 1;
 8004f70:	2301      	movs	r3, #1
 8004f72:	623b      	str	r3, [r7, #32]
 8004f74:	e010      	b.n	8004f98 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10c      	bne.n	8004f98 <osThreadNew+0xec>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d108      	bne.n	8004f98 <osThreadNew+0xec>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d104      	bne.n	8004f98 <osThreadNew+0xec>
          mem = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	623b      	str	r3, [r7, #32]
 8004f92:	e001      	b.n	8004f98 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d110      	bne.n	8004fc0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fa6:	9202      	str	r2, [sp, #8]
 8004fa8:	9301      	str	r3, [sp, #4]
 8004faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004fb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f001 fc6f 	bl	8006898 <xTaskCreateStatic>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	613b      	str	r3, [r7, #16]
 8004fbe:	e013      	b.n	8004fe8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d110      	bne.n	8004fe8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	f107 0310 	add.w	r3, r7, #16
 8004fce:	9301      	str	r3, [sp, #4]
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f001 fcc3 	bl	8006964 <xTaskCreate>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d001      	beq.n	8004fe8 <osThreadNew+0x13c>
          hTask = NULL;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004fe8:	693b      	ldr	r3, [r7, #16]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3730      	adds	r7, #48	@ 0x30
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	200002d8 	.word	0x200002d8

08004ff8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005000:	f3ef 8305 	mrs	r3, IPSR
 8005004:	613b      	str	r3, [r7, #16]
  return(result);
 8005006:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10f      	bne.n	800502c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800500c:	f3ef 8310 	mrs	r3, PRIMASK
 8005010:	60fb      	str	r3, [r7, #12]
  return(result);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d105      	bne.n	8005024 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005018:	f3ef 8311 	mrs	r3, BASEPRI
 800501c:	60bb      	str	r3, [r7, #8]
  return(result);
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d007      	beq.n	8005034 <osDelay+0x3c>
 8005024:	4b0a      	ldr	r3, [pc, #40]	@ (8005050 <osDelay+0x58>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b02      	cmp	r3, #2
 800502a:	d103      	bne.n	8005034 <osDelay+0x3c>
    stat = osErrorISR;
 800502c:	f06f 0305 	mvn.w	r3, #5
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	e007      	b.n	8005044 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d002      	beq.n	8005044 <osDelay+0x4c>
      vTaskDelay(ticks);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f001 fdd8 	bl	8006bf4 <vTaskDelay>
    }
  }

  return (stat);
 8005044:	697b      	ldr	r3, [r7, #20]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	200002d8 	.word	0x200002d8

08005054 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005054:	b580      	push	{r7, lr}
 8005056:	b08c      	sub	sp, #48	@ 0x30
 8005058:	af02      	add	r7, sp, #8
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005060:	2300      	movs	r3, #0
 8005062:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005064:	f3ef 8305 	mrs	r3, IPSR
 8005068:	61bb      	str	r3, [r7, #24]
  return(result);
 800506a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800506c:	2b00      	cmp	r3, #0
 800506e:	f040 8086 	bne.w	800517e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005072:	f3ef 8310 	mrs	r3, PRIMASK
 8005076:	617b      	str	r3, [r7, #20]
  return(result);
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d105      	bne.n	800508a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800507e:	f3ef 8311 	mrs	r3, BASEPRI
 8005082:	613b      	str	r3, [r7, #16]
  return(result);
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <osSemaphoreNew+0x3e>
 800508a:	4b3f      	ldr	r3, [pc, #252]	@ (8005188 <osSemaphoreNew+0x134>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b02      	cmp	r3, #2
 8005090:	d075      	beq.n	800517e <osSemaphoreNew+0x12a>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d072      	beq.n	800517e <osSemaphoreNew+0x12a>
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	429a      	cmp	r2, r3
 800509e:	d86e      	bhi.n	800517e <osSemaphoreNew+0x12a>
    mem = -1;
 80050a0:	f04f 33ff 	mov.w	r3, #4294967295
 80050a4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d015      	beq.n	80050d8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d006      	beq.n	80050c2 <osSemaphoreNew+0x6e>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	2b4f      	cmp	r3, #79	@ 0x4f
 80050ba:	d902      	bls.n	80050c2 <osSemaphoreNew+0x6e>
        mem = 1;
 80050bc:	2301      	movs	r3, #1
 80050be:	623b      	str	r3, [r7, #32]
 80050c0:	e00c      	b.n	80050dc <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d108      	bne.n	80050dc <osSemaphoreNew+0x88>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d104      	bne.n	80050dc <osSemaphoreNew+0x88>
          mem = 0;
 80050d2:	2300      	movs	r3, #0
 80050d4:	623b      	str	r3, [r7, #32]
 80050d6:	e001      	b.n	80050dc <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80050d8:	2300      	movs	r3, #0
 80050da:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80050dc:	6a3b      	ldr	r3, [r7, #32]
 80050de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e2:	d04c      	beq.n	800517e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d128      	bne.n	800513c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d10a      	bne.n	8005106 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	2203      	movs	r2, #3
 80050f6:	9200      	str	r2, [sp, #0]
 80050f8:	2200      	movs	r2, #0
 80050fa:	2100      	movs	r1, #0
 80050fc:	2001      	movs	r0, #1
 80050fe:	f000 fbc3 	bl	8005888 <xQueueGenericCreateStatic>
 8005102:	6278      	str	r0, [r7, #36]	@ 0x24
 8005104:	e005      	b.n	8005112 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8005106:	2203      	movs	r2, #3
 8005108:	2100      	movs	r1, #0
 800510a:	2001      	movs	r0, #1
 800510c:	f000 fc43 	bl	8005996 <xQueueGenericCreate>
 8005110:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005114:	2b00      	cmp	r3, #0
 8005116:	d022      	beq.n	800515e <osSemaphoreNew+0x10a>
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d01f      	beq.n	800515e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800511e:	2300      	movs	r3, #0
 8005120:	2200      	movs	r2, #0
 8005122:	2100      	movs	r1, #0
 8005124:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005126:	f000 fd13 	bl	8005b50 <xQueueGenericSend>
 800512a:	4603      	mov	r3, r0
 800512c:	2b01      	cmp	r3, #1
 800512e:	d016      	beq.n	800515e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8005130:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005132:	f001 f9db 	bl	80064ec <vQueueDelete>
            hSemaphore = NULL;
 8005136:	2300      	movs	r3, #0
 8005138:	627b      	str	r3, [r7, #36]	@ 0x24
 800513a:	e010      	b.n	800515e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d108      	bne.n	8005154 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	461a      	mov	r2, r3
 8005148:	68b9      	ldr	r1, [r7, #8]
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 fc89 	bl	8005a62 <xQueueCreateCountingSemaphoreStatic>
 8005150:	6278      	str	r0, [r7, #36]	@ 0x24
 8005152:	e004      	b.n	800515e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005154:	68b9      	ldr	r1, [r7, #8]
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 fcc0 	bl	8005adc <xQueueCreateCountingSemaphore>
 800515c:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00c      	beq.n	800517e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <osSemaphoreNew+0x11e>
          name = attr->name;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	61fb      	str	r3, [r7, #28]
 8005170:	e001      	b.n	8005176 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8005172:	2300      	movs	r3, #0
 8005174:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005176:	69f9      	ldr	r1, [r7, #28]
 8005178:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800517a:	f001 fb05 	bl	8006788 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800517e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005180:	4618      	mov	r0, r3
 8005182:	3728      	adds	r7, #40	@ 0x28
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	200002d8 	.word	0x200002d8

0800518c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800519a:	2300      	movs	r3, #0
 800519c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d103      	bne.n	80051ac <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80051a4:	f06f 0303 	mvn.w	r3, #3
 80051a8:	61fb      	str	r3, [r7, #28]
 80051aa:	e04b      	b.n	8005244 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051ac:	f3ef 8305 	mrs	r3, IPSR
 80051b0:	617b      	str	r3, [r7, #20]
  return(result);
 80051b2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10f      	bne.n	80051d8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051b8:	f3ef 8310 	mrs	r3, PRIMASK
 80051bc:	613b      	str	r3, [r7, #16]
  return(result);
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d105      	bne.n	80051d0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051c4:	f3ef 8311 	mrs	r3, BASEPRI
 80051c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d026      	beq.n	800521e <osSemaphoreAcquire+0x92>
 80051d0:	4b1f      	ldr	r3, [pc, #124]	@ (8005250 <osSemaphoreAcquire+0xc4>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d122      	bne.n	800521e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80051de:	f06f 0303 	mvn.w	r3, #3
 80051e2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80051e4:	e02d      	b.n	8005242 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80051e6:	2300      	movs	r3, #0
 80051e8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80051ea:	f107 0308 	add.w	r3, r7, #8
 80051ee:	461a      	mov	r2, r3
 80051f0:	2100      	movs	r1, #0
 80051f2:	69b8      	ldr	r0, [r7, #24]
 80051f4:	f001 f8f2 	bl	80063dc <xQueueReceiveFromISR>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d003      	beq.n	8005206 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80051fe:	f06f 0302 	mvn.w	r3, #2
 8005202:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005204:	e01d      	b.n	8005242 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01a      	beq.n	8005242 <osSemaphoreAcquire+0xb6>
 800520c:	4b11      	ldr	r3, [pc, #68]	@ (8005254 <osSemaphoreAcquire+0xc8>)
 800520e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800521c:	e011      	b.n	8005242 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800521e:	6839      	ldr	r1, [r7, #0]
 8005220:	69b8      	ldr	r0, [r7, #24]
 8005222:	f000 ffc3 	bl	80061ac <xQueueSemaphoreTake>
 8005226:	4603      	mov	r3, r0
 8005228:	2b01      	cmp	r3, #1
 800522a:	d00b      	beq.n	8005244 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d003      	beq.n	800523a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8005232:	f06f 0301 	mvn.w	r3, #1
 8005236:	61fb      	str	r3, [r7, #28]
 8005238:	e004      	b.n	8005244 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800523a:	f06f 0302 	mvn.w	r3, #2
 800523e:	61fb      	str	r3, [r7, #28]
 8005240:	e000      	b.n	8005244 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8005242:	bf00      	nop
      }
    }
  }

  return (stat);
 8005244:	69fb      	ldr	r3, [r7, #28]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3720      	adds	r7, #32
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	200002d8 	.word	0x200002d8
 8005254:	e000ed04 	.word	0xe000ed04

08005258 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005264:	2300      	movs	r3, #0
 8005266:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d103      	bne.n	8005276 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800526e:	f06f 0303 	mvn.w	r3, #3
 8005272:	61fb      	str	r3, [r7, #28]
 8005274:	e03e      	b.n	80052f4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005276:	f3ef 8305 	mrs	r3, IPSR
 800527a:	617b      	str	r3, [r7, #20]
  return(result);
 800527c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10f      	bne.n	80052a2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005282:	f3ef 8310 	mrs	r3, PRIMASK
 8005286:	613b      	str	r3, [r7, #16]
  return(result);
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d105      	bne.n	800529a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800528e:	f3ef 8311 	mrs	r3, BASEPRI
 8005292:	60fb      	str	r3, [r7, #12]
  return(result);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d01e      	beq.n	80052d8 <osSemaphoreRelease+0x80>
 800529a:	4b19      	ldr	r3, [pc, #100]	@ (8005300 <osSemaphoreRelease+0xa8>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d11a      	bne.n	80052d8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80052a6:	f107 0308 	add.w	r3, r7, #8
 80052aa:	4619      	mov	r1, r3
 80052ac:	69b8      	ldr	r0, [r7, #24]
 80052ae:	f000 fdfc 	bl	8005eaa <xQueueGiveFromISR>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d003      	beq.n	80052c0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80052b8:	f06f 0302 	mvn.w	r3, #2
 80052bc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80052be:	e018      	b.n	80052f2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d015      	beq.n	80052f2 <osSemaphoreRelease+0x9a>
 80052c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005304 <osSemaphoreRelease+0xac>)
 80052c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	f3bf 8f4f 	dsb	sy
 80052d2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80052d6:	e00c      	b.n	80052f2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80052d8:	2300      	movs	r3, #0
 80052da:	2200      	movs	r2, #0
 80052dc:	2100      	movs	r1, #0
 80052de:	69b8      	ldr	r0, [r7, #24]
 80052e0:	f000 fc36 	bl	8005b50 <xQueueGenericSend>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d004      	beq.n	80052f4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80052ea:	f06f 0302 	mvn.w	r3, #2
 80052ee:	61fb      	str	r3, [r7, #28]
 80052f0:	e000      	b.n	80052f4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80052f2:	bf00      	nop
    }
  }

  return (stat);
 80052f4:	69fb      	ldr	r3, [r7, #28]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3720      	adds	r7, #32
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	200002d8 	.word	0x200002d8
 8005304:	e000ed04 	.word	0xe000ed04

08005308 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005308:	b580      	push	{r7, lr}
 800530a:	b08c      	sub	sp, #48	@ 0x30
 800530c:	af02      	add	r7, sp, #8
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005314:	2300      	movs	r3, #0
 8005316:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005318:	f3ef 8305 	mrs	r3, IPSR
 800531c:	61bb      	str	r3, [r7, #24]
  return(result);
 800531e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005320:	2b00      	cmp	r3, #0
 8005322:	d16f      	bne.n	8005404 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005324:	f3ef 8310 	mrs	r3, PRIMASK
 8005328:	617b      	str	r3, [r7, #20]
  return(result);
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d105      	bne.n	800533c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005330:	f3ef 8311 	mrs	r3, BASEPRI
 8005334:	613b      	str	r3, [r7, #16]
  return(result);
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <osMessageQueueNew+0x3c>
 800533c:	4b34      	ldr	r3, [pc, #208]	@ (8005410 <osMessageQueueNew+0x108>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b02      	cmp	r3, #2
 8005342:	d05f      	beq.n	8005404 <osMessageQueueNew+0xfc>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d05c      	beq.n	8005404 <osMessageQueueNew+0xfc>
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d059      	beq.n	8005404 <osMessageQueueNew+0xfc>
    mem = -1;
 8005350:	f04f 33ff 	mov.w	r3, #4294967295
 8005354:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d029      	beq.n	80053b0 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d012      	beq.n	800538a <osMessageQueueNew+0x82>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	2b4f      	cmp	r3, #79	@ 0x4f
 800536a:	d90e      	bls.n	800538a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00a      	beq.n	800538a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	695a      	ldr	r2, [r3, #20]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	68b9      	ldr	r1, [r7, #8]
 800537c:	fb01 f303 	mul.w	r3, r1, r3
 8005380:	429a      	cmp	r2, r3
 8005382:	d302      	bcc.n	800538a <osMessageQueueNew+0x82>
        mem = 1;
 8005384:	2301      	movs	r3, #1
 8005386:	623b      	str	r3, [r7, #32]
 8005388:	e014      	b.n	80053b4 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d110      	bne.n	80053b4 <osMessageQueueNew+0xac>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10c      	bne.n	80053b4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d108      	bne.n	80053b4 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d104      	bne.n	80053b4 <osMessageQueueNew+0xac>
          mem = 0;
 80053aa:	2300      	movs	r3, #0
 80053ac:	623b      	str	r3, [r7, #32]
 80053ae:	e001      	b.n	80053b4 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80053b0:	2300      	movs	r3, #0
 80053b2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d10b      	bne.n	80053d2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691a      	ldr	r2, [r3, #16]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	2100      	movs	r1, #0
 80053c4:	9100      	str	r1, [sp, #0]
 80053c6:	68b9      	ldr	r1, [r7, #8]
 80053c8:	68f8      	ldr	r0, [r7, #12]
 80053ca:	f000 fa5d 	bl	8005888 <xQueueGenericCreateStatic>
 80053ce:	6278      	str	r0, [r7, #36]	@ 0x24
 80053d0:	e008      	b.n	80053e4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d105      	bne.n	80053e4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80053d8:	2200      	movs	r2, #0
 80053da:	68b9      	ldr	r1, [r7, #8]
 80053dc:	68f8      	ldr	r0, [r7, #12]
 80053de:	f000 fada 	bl	8005996 <xQueueGenericCreate>
 80053e2:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00c      	beq.n	8005404 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <osMessageQueueNew+0xf0>
        name = attr->name;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	61fb      	str	r3, [r7, #28]
 80053f6:	e001      	b.n	80053fc <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80053f8:	2300      	movs	r3, #0
 80053fa:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80053fc:	69f9      	ldr	r1, [r7, #28]
 80053fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005400:	f001 f9c2 	bl	8006788 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005406:	4618      	mov	r0, r3
 8005408:	3728      	adds	r7, #40	@ 0x28
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	200002d8 	.word	0x200002d8

08005414 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005414:	b580      	push	{r7, lr}
 8005416:	b08a      	sub	sp, #40	@ 0x28
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	603b      	str	r3, [r7, #0]
 8005420:	4613      	mov	r3, r2
 8005422:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005428:	2300      	movs	r3, #0
 800542a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800542c:	f3ef 8305 	mrs	r3, IPSR
 8005430:	61fb      	str	r3, [r7, #28]
  return(result);
 8005432:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10f      	bne.n	8005458 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005438:	f3ef 8310 	mrs	r3, PRIMASK
 800543c:	61bb      	str	r3, [r7, #24]
  return(result);
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d105      	bne.n	8005450 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005444:	f3ef 8311 	mrs	r3, BASEPRI
 8005448:	617b      	str	r3, [r7, #20]
  return(result);
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d02c      	beq.n	80054aa <osMessageQueuePut+0x96>
 8005450:	4b28      	ldr	r3, [pc, #160]	@ (80054f4 <osMessageQueuePut+0xe0>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b02      	cmp	r3, #2
 8005456:	d128      	bne.n	80054aa <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005458:	6a3b      	ldr	r3, [r7, #32]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d005      	beq.n	800546a <osMessageQueuePut+0x56>
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <osMessageQueuePut+0x56>
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d003      	beq.n	8005472 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800546a:	f06f 0303 	mvn.w	r3, #3
 800546e:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005470:	e039      	b.n	80054e6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005472:	2300      	movs	r3, #0
 8005474:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005476:	f107 0210 	add.w	r2, r7, #16
 800547a:	2300      	movs	r3, #0
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	6a38      	ldr	r0, [r7, #32]
 8005480:	f000 fc70 	bl	8005d64 <xQueueGenericSendFromISR>
 8005484:	4603      	mov	r3, r0
 8005486:	2b01      	cmp	r3, #1
 8005488:	d003      	beq.n	8005492 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800548a:	f06f 0302 	mvn.w	r3, #2
 800548e:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005490:	e029      	b.n	80054e6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d026      	beq.n	80054e6 <osMessageQueuePut+0xd2>
 8005498:	4b17      	ldr	r3, [pc, #92]	@ (80054f8 <osMessageQueuePut+0xe4>)
 800549a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80054a8:	e01d      	b.n	80054e6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80054aa:	6a3b      	ldr	r3, [r7, #32]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <osMessageQueuePut+0xa2>
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d103      	bne.n	80054be <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80054b6:	f06f 0303 	mvn.w	r3, #3
 80054ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80054bc:	e014      	b.n	80054e8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80054be:	2300      	movs	r3, #0
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	68b9      	ldr	r1, [r7, #8]
 80054c4:	6a38      	ldr	r0, [r7, #32]
 80054c6:	f000 fb43 	bl	8005b50 <xQueueGenericSend>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d00b      	beq.n	80054e8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80054d6:	f06f 0301 	mvn.w	r3, #1
 80054da:	627b      	str	r3, [r7, #36]	@ 0x24
 80054dc:	e004      	b.n	80054e8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 80054de:	f06f 0302 	mvn.w	r3, #2
 80054e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054e4:	e000      	b.n	80054e8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80054e6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80054e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3728      	adds	r7, #40	@ 0x28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	200002d8 	.word	0x200002d8
 80054f8:	e000ed04 	.word	0xe000ed04

080054fc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08a      	sub	sp, #40	@ 0x28
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
 8005508:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800550e:	2300      	movs	r3, #0
 8005510:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005512:	f3ef 8305 	mrs	r3, IPSR
 8005516:	61fb      	str	r3, [r7, #28]
  return(result);
 8005518:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10f      	bne.n	800553e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800551e:	f3ef 8310 	mrs	r3, PRIMASK
 8005522:	61bb      	str	r3, [r7, #24]
  return(result);
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d105      	bne.n	8005536 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800552a:	f3ef 8311 	mrs	r3, BASEPRI
 800552e:	617b      	str	r3, [r7, #20]
  return(result);
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d02c      	beq.n	8005590 <osMessageQueueGet+0x94>
 8005536:	4b28      	ldr	r3, [pc, #160]	@ (80055d8 <osMessageQueueGet+0xdc>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2b02      	cmp	r3, #2
 800553c:	d128      	bne.n	8005590 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <osMessageQueueGet+0x54>
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <osMessageQueueGet+0x54>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d003      	beq.n	8005558 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005550:	f06f 0303 	mvn.w	r3, #3
 8005554:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005556:	e038      	b.n	80055ca <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8005558:	2300      	movs	r3, #0
 800555a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800555c:	f107 0310 	add.w	r3, r7, #16
 8005560:	461a      	mov	r2, r3
 8005562:	68b9      	ldr	r1, [r7, #8]
 8005564:	6a38      	ldr	r0, [r7, #32]
 8005566:	f000 ff39 	bl	80063dc <xQueueReceiveFromISR>
 800556a:	4603      	mov	r3, r0
 800556c:	2b01      	cmp	r3, #1
 800556e:	d003      	beq.n	8005578 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005570:	f06f 0302 	mvn.w	r3, #2
 8005574:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005576:	e028      	b.n	80055ca <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d025      	beq.n	80055ca <osMessageQueueGet+0xce>
 800557e:	4b17      	ldr	r3, [pc, #92]	@ (80055dc <osMessageQueueGet+0xe0>)
 8005580:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800558e:	e01c      	b.n	80055ca <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <osMessageQueueGet+0xa0>
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d103      	bne.n	80055a4 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800559c:	f06f 0303 	mvn.w	r3, #3
 80055a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80055a2:	e013      	b.n	80055cc <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	68b9      	ldr	r1, [r7, #8]
 80055a8:	6a38      	ldr	r0, [r7, #32]
 80055aa:	f000 fd17 	bl	8005fdc <xQueueReceive>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d00b      	beq.n	80055cc <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80055ba:	f06f 0301 	mvn.w	r3, #1
 80055be:	627b      	str	r3, [r7, #36]	@ 0x24
 80055c0:	e004      	b.n	80055cc <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80055c2:	f06f 0302 	mvn.w	r3, #2
 80055c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80055c8:	e000      	b.n	80055cc <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80055ca:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80055cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3728      	adds	r7, #40	@ 0x28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	200002d8 	.word	0x200002d8
 80055dc:	e000ed04 	.word	0xe000ed04

080055e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4a07      	ldr	r2, [pc, #28]	@ (800560c <vApplicationGetIdleTaskMemory+0x2c>)
 80055f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	4a06      	ldr	r2, [pc, #24]	@ (8005610 <vApplicationGetIdleTaskMemory+0x30>)
 80055f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2280      	movs	r2, #128	@ 0x80
 80055fc:	601a      	str	r2, [r3, #0]
}
 80055fe:	bf00      	nop
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	200002dc 	.word	0x200002dc
 8005610:	20000338 	.word	0x20000338

08005614 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4a07      	ldr	r2, [pc, #28]	@ (8005640 <vApplicationGetTimerTaskMemory+0x2c>)
 8005624:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	4a06      	ldr	r2, [pc, #24]	@ (8005644 <vApplicationGetTimerTaskMemory+0x30>)
 800562a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005632:	601a      	str	r2, [r3, #0]
}
 8005634:	bf00      	nop
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	20000538 	.word	0x20000538
 8005644:	20000594 	.word	0x20000594

08005648 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f103 0208 	add.w	r2, r3, #8
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f04f 32ff 	mov.w	r2, #4294967295
 8005660:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f103 0208 	add.w	r2, r3, #8
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f103 0208 	add.w	r2, r3, #8
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005696:	bf00      	nop
 8005698:	370c      	adds	r7, #12
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056a2:	b480      	push	{r7}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	1c5a      	adds	r2, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	601a      	str	r2, [r3, #0]
}
 80056de:	bf00      	nop
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056ea:	b480      	push	{r7}
 80056ec:	b085      	sub	sp, #20
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
 80056f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005700:	d103      	bne.n	800570a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	e00c      	b.n	8005724 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	3308      	adds	r3, #8
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	e002      	b.n	8005718 <vListInsert+0x2e>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	429a      	cmp	r2, r3
 8005722:	d2f6      	bcs.n	8005712 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	685a      	ldr	r2, [r3, #4]
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	1c5a      	adds	r2, r3, #1
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	601a      	str	r2, [r3, #0]
}
 8005750:	bf00      	nop
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	6892      	ldr	r2, [r2, #8]
 8005772:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6852      	ldr	r2, [r2, #4]
 800577c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	429a      	cmp	r2, r3
 8005786:	d103      	bne.n	8005790 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	1e5a      	subs	r2, r3, #1
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10d      	bne.n	80057e0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c8:	b672      	cpsid	i
 80057ca:	f383 8811 	msr	BASEPRI, r3
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	b662      	cpsie	i
 80057d8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057da:	bf00      	nop
 80057dc:	bf00      	nop
 80057de:	e7fd      	b.n	80057dc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80057e0:	f002 fd04 	bl	80081ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ec:	68f9      	ldr	r1, [r7, #12]
 80057ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80057f0:	fb01 f303 	mul.w	r3, r1, r3
 80057f4:	441a      	add	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005810:	3b01      	subs	r3, #1
 8005812:	68f9      	ldr	r1, [r7, #12]
 8005814:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005816:	fb01 f303 	mul.w	r3, r1, r3
 800581a:	441a      	add	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	22ff      	movs	r2, #255	@ 0xff
 8005824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	22ff      	movs	r2, #255	@ 0xff
 800582c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d114      	bne.n	8005860 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d01a      	beq.n	8005874 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3310      	adds	r3, #16
 8005842:	4618      	mov	r0, r3
 8005844:	f001 fcaa 	bl	800719c <xTaskRemoveFromEventList>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d012      	beq.n	8005874 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800584e:	4b0d      	ldr	r3, [pc, #52]	@ (8005884 <xQueueGenericReset+0xd4>)
 8005850:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	e009      	b.n	8005874 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3310      	adds	r3, #16
 8005864:	4618      	mov	r0, r3
 8005866:	f7ff feef 	bl	8005648 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3324      	adds	r3, #36	@ 0x24
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff feea 	bl	8005648 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005874:	f002 fcf0 	bl	8008258 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005878:	2301      	movs	r3, #1
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	e000ed04 	.word	0xe000ed04

08005888 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08e      	sub	sp, #56	@ 0x38
 800588c:	af02      	add	r7, sp, #8
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
 8005894:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10d      	bne.n	80058b8 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a0:	b672      	cpsid	i
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	b662      	cpsie	i
 80058b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80058b2:	bf00      	nop
 80058b4:	bf00      	nop
 80058b6:	e7fd      	b.n	80058b4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10d      	bne.n	80058da <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c2:	b672      	cpsid	i
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	b662      	cpsie	i
 80058d2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80058d4:	bf00      	nop
 80058d6:	bf00      	nop
 80058d8:	e7fd      	b.n	80058d6 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <xQueueGenericCreateStatic+0x5e>
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <xQueueGenericCreateStatic+0x62>
 80058e6:	2301      	movs	r3, #1
 80058e8:	e000      	b.n	80058ec <xQueueGenericCreateStatic+0x64>
 80058ea:	2300      	movs	r3, #0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10d      	bne.n	800590c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f4:	b672      	cpsid	i
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	b662      	cpsie	i
 8005904:	623b      	str	r3, [r7, #32]
}
 8005906:	bf00      	nop
 8005908:	bf00      	nop
 800590a:	e7fd      	b.n	8005908 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d102      	bne.n	8005918 <xQueueGenericCreateStatic+0x90>
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <xQueueGenericCreateStatic+0x94>
 8005918:	2301      	movs	r3, #1
 800591a:	e000      	b.n	800591e <xQueueGenericCreateStatic+0x96>
 800591c:	2300      	movs	r3, #0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10d      	bne.n	800593e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005926:	b672      	cpsid	i
 8005928:	f383 8811 	msr	BASEPRI, r3
 800592c:	f3bf 8f6f 	isb	sy
 8005930:	f3bf 8f4f 	dsb	sy
 8005934:	b662      	cpsie	i
 8005936:	61fb      	str	r3, [r7, #28]
}
 8005938:	bf00      	nop
 800593a:	bf00      	nop
 800593c:	e7fd      	b.n	800593a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800593e:	2350      	movs	r3, #80	@ 0x50
 8005940:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2b50      	cmp	r3, #80	@ 0x50
 8005946:	d00d      	beq.n	8005964 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800594c:	b672      	cpsid	i
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	b662      	cpsie	i
 800595c:	61bb      	str	r3, [r7, #24]
}
 800595e:	bf00      	nop
 8005960:	bf00      	nop
 8005962:	e7fd      	b.n	8005960 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005964:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800596a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00d      	beq.n	800598c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005978:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800597c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	4613      	mov	r3, r2
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	68f8      	ldr	r0, [r7, #12]
 8005988:	f000 f848 	bl	8005a1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800598c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800598e:	4618      	mov	r0, r3
 8005990:	3730      	adds	r7, #48	@ 0x30
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005996:	b580      	push	{r7, lr}
 8005998:	b08a      	sub	sp, #40	@ 0x28
 800599a:	af02      	add	r7, sp, #8
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	4613      	mov	r3, r2
 80059a2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10d      	bne.n	80059c6 <xQueueGenericCreate+0x30>
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ae:	b672      	cpsid	i
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	b662      	cpsie	i
 80059be:	613b      	str	r3, [r7, #16]
}
 80059c0:	bf00      	nop
 80059c2:	bf00      	nop
 80059c4:	e7fd      	b.n	80059c2 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d102      	bne.n	80059d2 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80059cc:	2300      	movs	r3, #0
 80059ce:	61fb      	str	r3, [r7, #28]
 80059d0:	e004      	b.n	80059dc <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	fb02 f303 	mul.w	r3, r2, r3
 80059da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	3350      	adds	r3, #80	@ 0x50
 80059e0:	4618      	mov	r0, r3
 80059e2:	f002 fd31 	bl	8008448 <pvPortMalloc>
 80059e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d011      	beq.n	8005a12 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	3350      	adds	r3, #80	@ 0x50
 80059f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a00:	79fa      	ldrb	r2, [r7, #7]
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	4613      	mov	r3, r2
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	68b9      	ldr	r1, [r7, #8]
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f000 f805 	bl	8005a1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a12:	69bb      	ldr	r3, [r7, #24]
	}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3720      	adds	r7, #32
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
 8005a28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d103      	bne.n	8005a38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	e002      	b.n	8005a3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a4a:	2101      	movs	r1, #1
 8005a4c:	69b8      	ldr	r0, [r7, #24]
 8005a4e:	f7ff feaf 	bl	80057b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	78fa      	ldrb	r2, [r7, #3]
 8005a56:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a5a:	bf00      	nop
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b08a      	sub	sp, #40	@ 0x28
 8005a66:	af02      	add	r7, sp, #8
 8005a68:	60f8      	str	r0, [r7, #12]
 8005a6a:	60b9      	str	r1, [r7, #8]
 8005a6c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10d      	bne.n	8005a90 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 8005a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a78:	b672      	cpsid	i
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	b662      	cpsie	i
 8005a88:	61bb      	str	r3, [r7, #24]
}
 8005a8a:	bf00      	nop
 8005a8c:	bf00      	nop
 8005a8e:	e7fd      	b.n	8005a8c <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d90d      	bls.n	8005ab4 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8005a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a9c:	b672      	cpsid	i
 8005a9e:	f383 8811 	msr	BASEPRI, r3
 8005aa2:	f3bf 8f6f 	isb	sy
 8005aa6:	f3bf 8f4f 	dsb	sy
 8005aaa:	b662      	cpsie	i
 8005aac:	617b      	str	r3, [r7, #20]
}
 8005aae:	bf00      	nop
 8005ab0:	bf00      	nop
 8005ab2:	e7fd      	b.n	8005ab0 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	2100      	movs	r1, #0
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f7ff fee2 	bl	8005888 <xQueueGenericCreateStatic>
 8005ac4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d002      	beq.n	8005ad2 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005ad2:	69fb      	ldr	r3, [r7, #28]
	}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3720      	adds	r7, #32
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10d      	bne.n	8005b08 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 8005aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af0:	b672      	cpsid	i
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	b662      	cpsie	i
 8005b00:	613b      	str	r3, [r7, #16]
}
 8005b02:	bf00      	nop
 8005b04:	bf00      	nop
 8005b06:	e7fd      	b.n	8005b04 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d90d      	bls.n	8005b2c <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b14:	b672      	cpsid	i
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	b662      	cpsie	i
 8005b24:	60fb      	str	r3, [r7, #12]
}
 8005b26:	bf00      	nop
 8005b28:	bf00      	nop
 8005b2a:	e7fd      	b.n	8005b28 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	2100      	movs	r1, #0
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7ff ff30 	bl	8005996 <xQueueGenericCreate>
 8005b36:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005b44:	697b      	ldr	r3, [r7, #20]
	}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
	...

08005b50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08e      	sub	sp, #56	@ 0x38
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10d      	bne.n	8005b88 <xQueueGenericSend+0x38>
	__asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b70:	b672      	cpsid	i
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	b662      	cpsie	i
 8005b80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b82:	bf00      	nop
 8005b84:	bf00      	nop
 8005b86:	e7fd      	b.n	8005b84 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d103      	bne.n	8005b96 <xQueueGenericSend+0x46>
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <xQueueGenericSend+0x4a>
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <xQueueGenericSend+0x4c>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10d      	bne.n	8005bbc <xQueueGenericSend+0x6c>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba4:	b672      	cpsid	i
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	b662      	cpsie	i
 8005bb4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005bb6:	bf00      	nop
 8005bb8:	bf00      	nop
 8005bba:	e7fd      	b.n	8005bb8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d103      	bne.n	8005bca <xQueueGenericSend+0x7a>
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d101      	bne.n	8005bce <xQueueGenericSend+0x7e>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e000      	b.n	8005bd0 <xQueueGenericSend+0x80>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10d      	bne.n	8005bf0 <xQueueGenericSend+0xa0>
	__asm volatile
 8005bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd8:	b672      	cpsid	i
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	b662      	cpsie	i
 8005be8:	623b      	str	r3, [r7, #32]
}
 8005bea:	bf00      	nop
 8005bec:	bf00      	nop
 8005bee:	e7fd      	b.n	8005bec <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bf0:	f001 fc9c 	bl	800752c <xTaskGetSchedulerState>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d102      	bne.n	8005c00 <xQueueGenericSend+0xb0>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <xQueueGenericSend+0xb4>
 8005c00:	2301      	movs	r3, #1
 8005c02:	e000      	b.n	8005c06 <xQueueGenericSend+0xb6>
 8005c04:	2300      	movs	r3, #0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10d      	bne.n	8005c26 <xQueueGenericSend+0xd6>
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0e:	b672      	cpsid	i
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	b662      	cpsie	i
 8005c1e:	61fb      	str	r3, [r7, #28]
}
 8005c20:	bf00      	nop
 8005c22:	bf00      	nop
 8005c24:	e7fd      	b.n	8005c22 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c26:	f002 fae1 	bl	80081ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d302      	bcc.n	8005c3c <xQueueGenericSend+0xec>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d129      	bne.n	8005c90 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	68b9      	ldr	r1, [r7, #8]
 8005c40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c42:	f000 fc91 	bl	8006568 <prvCopyDataToQueue>
 8005c46:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d010      	beq.n	8005c72 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c52:	3324      	adds	r3, #36	@ 0x24
 8005c54:	4618      	mov	r0, r3
 8005c56:	f001 faa1 	bl	800719c <xTaskRemoveFromEventList>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d013      	beq.n	8005c88 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c60:	4b3f      	ldr	r3, [pc, #252]	@ (8005d60 <xQueueGenericSend+0x210>)
 8005c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	f3bf 8f6f 	isb	sy
 8005c70:	e00a      	b.n	8005c88 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d007      	beq.n	8005c88 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c78:	4b39      	ldr	r3, [pc, #228]	@ (8005d60 <xQueueGenericSend+0x210>)
 8005c7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c7e:	601a      	str	r2, [r3, #0]
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c88:	f002 fae6 	bl	8008258 <vPortExitCritical>
				return pdPASS;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e063      	b.n	8005d58 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d103      	bne.n	8005c9e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c96:	f002 fadf 	bl	8008258 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e05c      	b.n	8005d58 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d106      	bne.n	8005cb2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ca4:	f107 0314 	add.w	r3, r7, #20
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f001 fadd 	bl	8007268 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cb2:	f002 fad1 	bl	8008258 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cb6:	f001 f841 	bl	8006d3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cba:	f002 fa97 	bl	80081ec <vPortEnterCritical>
 8005cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005cc4:	b25b      	sxtb	r3, r3
 8005cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cca:	d103      	bne.n	8005cd4 <xQueueGenericSend+0x184>
 8005ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005cda:	b25b      	sxtb	r3, r3
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce0:	d103      	bne.n	8005cea <xQueueGenericSend+0x19a>
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cea:	f002 fab5 	bl	8008258 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cee:	1d3a      	adds	r2, r7, #4
 8005cf0:	f107 0314 	add.w	r3, r7, #20
 8005cf4:	4611      	mov	r1, r2
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f001 facc 	bl	8007294 <xTaskCheckForTimeOut>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d124      	bne.n	8005d4c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d04:	f000 fd28 	bl	8006758 <prvIsQueueFull>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d018      	beq.n	8005d40 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d10:	3310      	adds	r3, #16
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	4611      	mov	r1, r2
 8005d16:	4618      	mov	r0, r3
 8005d18:	f001 f9ea 	bl	80070f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005d1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d1e:	f000 fcb3 	bl	8006688 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d22:	f001 f819 	bl	8006d58 <xTaskResumeAll>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f47f af7c 	bne.w	8005c26 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8005d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d60 <xQueueGenericSend+0x210>)
 8005d30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	e772      	b.n	8005c26 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d42:	f000 fca1 	bl	8006688 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d46:	f001 f807 	bl	8006d58 <xTaskResumeAll>
 8005d4a:	e76c      	b.n	8005c26 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d4e:	f000 fc9b 	bl	8006688 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d52:	f001 f801 	bl	8006d58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3738      	adds	r7, #56	@ 0x38
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	e000ed04 	.word	0xe000ed04

08005d64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08e      	sub	sp, #56	@ 0x38
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10d      	bne.n	8005d98 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d80:	b672      	cpsid	i
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	b662      	cpsie	i
 8005d90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d92:	bf00      	nop
 8005d94:	bf00      	nop
 8005d96:	e7fd      	b.n	8005d94 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d103      	bne.n	8005da6 <xQueueGenericSendFromISR+0x42>
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <xQueueGenericSendFromISR+0x46>
 8005da6:	2301      	movs	r3, #1
 8005da8:	e000      	b.n	8005dac <xQueueGenericSendFromISR+0x48>
 8005daa:	2300      	movs	r3, #0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10d      	bne.n	8005dcc <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db4:	b672      	cpsid	i
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	b662      	cpsie	i
 8005dc4:	623b      	str	r3, [r7, #32]
}
 8005dc6:	bf00      	nop
 8005dc8:	bf00      	nop
 8005dca:	e7fd      	b.n	8005dc8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d103      	bne.n	8005dda <xQueueGenericSendFromISR+0x76>
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d101      	bne.n	8005dde <xQueueGenericSendFromISR+0x7a>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e000      	b.n	8005de0 <xQueueGenericSendFromISR+0x7c>
 8005dde:	2300      	movs	r3, #0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d10d      	bne.n	8005e00 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de8:	b672      	cpsid	i
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	b662      	cpsie	i
 8005df8:	61fb      	str	r3, [r7, #28]
}
 8005dfa:	bf00      	nop
 8005dfc:	bf00      	nop
 8005dfe:	e7fd      	b.n	8005dfc <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e00:	f002 fadc 	bl	80083bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e04:	f3ef 8211 	mrs	r2, BASEPRI
 8005e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e0c:	b672      	cpsid	i
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	b662      	cpsie	i
 8005e1c:	61ba      	str	r2, [r7, #24]
 8005e1e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e20:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d302      	bcc.n	8005e36 <xQueueGenericSendFromISR+0xd2>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d12c      	bne.n	8005e90 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e40:	683a      	ldr	r2, [r7, #0]
 8005e42:	68b9      	ldr	r1, [r7, #8]
 8005e44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005e46:	f000 fb8f 	bl	8006568 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e4a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8005e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e52:	d112      	bne.n	8005e7a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d016      	beq.n	8005e8a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5e:	3324      	adds	r3, #36	@ 0x24
 8005e60:	4618      	mov	r0, r3
 8005e62:	f001 f99b 	bl	800719c <xTaskRemoveFromEventList>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00e      	beq.n	8005e8a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00b      	beq.n	8005e8a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	e007      	b.n	8005e8a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e7a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005e7e:	3301      	adds	r3, #1
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	b25a      	sxtb	r2, r3
 8005e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8005e8e:	e001      	b.n	8005e94 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e90:	2300      	movs	r3, #0
 8005e92:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e96:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e9e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3738      	adds	r7, #56	@ 0x38
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b08e      	sub	sp, #56	@ 0x38
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10d      	bne.n	8005eda <xQueueGiveFromISR+0x30>
	__asm volatile
 8005ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec2:	b672      	cpsid	i
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	b662      	cpsie	i
 8005ed2:	623b      	str	r3, [r7, #32]
}
 8005ed4:	bf00      	nop
 8005ed6:	bf00      	nop
 8005ed8:	e7fd      	b.n	8005ed6 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00d      	beq.n	8005efe <xQueueGiveFromISR+0x54>
	__asm volatile
 8005ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee6:	b672      	cpsid	i
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	b662      	cpsie	i
 8005ef6:	61fb      	str	r3, [r7, #28]
}
 8005ef8:	bf00      	nop
 8005efa:	bf00      	nop
 8005efc:	e7fd      	b.n	8005efa <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d103      	bne.n	8005f0e <xQueueGiveFromISR+0x64>
 8005f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <xQueueGiveFromISR+0x68>
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e000      	b.n	8005f14 <xQueueGiveFromISR+0x6a>
 8005f12:	2300      	movs	r3, #0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10d      	bne.n	8005f34 <xQueueGiveFromISR+0x8a>
	__asm volatile
 8005f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f1c:	b672      	cpsid	i
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	b662      	cpsie	i
 8005f2c:	61bb      	str	r3, [r7, #24]
}
 8005f2e:	bf00      	nop
 8005f30:	bf00      	nop
 8005f32:	e7fd      	b.n	8005f30 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f34:	f002 fa42 	bl	80083bc <vPortValidateInterruptPriority>
	__asm volatile
 8005f38:	f3ef 8211 	mrs	r2, BASEPRI
 8005f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f40:	b672      	cpsid	i
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	b662      	cpsie	i
 8005f50:	617a      	str	r2, [r7, #20]
 8005f52:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005f54:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d22b      	bcs.n	8005fc0 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f74:	1c5a      	adds	r2, r3, #1
 8005f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f78:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f82:	d112      	bne.n	8005faa <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d016      	beq.n	8005fba <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8e:	3324      	adds	r3, #36	@ 0x24
 8005f90:	4618      	mov	r0, r3
 8005f92:	f001 f903 	bl	800719c <xTaskRemoveFromEventList>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00e      	beq.n	8005fba <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00b      	beq.n	8005fba <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	e007      	b.n	8005fba <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005faa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005fae:	3301      	adds	r3, #1
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	b25a      	sxtb	r2, r3
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fbe:	e001      	b.n	8005fc4 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f383 8811 	msr	BASEPRI, r3
}
 8005fce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3738      	adds	r7, #56	@ 0x38
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b08c      	sub	sp, #48	@ 0x30
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10d      	bne.n	8006012 <xQueueReceive+0x36>
	__asm volatile
 8005ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffa:	b672      	cpsid	i
 8005ffc:	f383 8811 	msr	BASEPRI, r3
 8006000:	f3bf 8f6f 	isb	sy
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	b662      	cpsie	i
 800600a:	623b      	str	r3, [r7, #32]
}
 800600c:	bf00      	nop
 800600e:	bf00      	nop
 8006010:	e7fd      	b.n	800600e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d103      	bne.n	8006020 <xQueueReceive+0x44>
 8006018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800601a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <xQueueReceive+0x48>
 8006020:	2301      	movs	r3, #1
 8006022:	e000      	b.n	8006026 <xQueueReceive+0x4a>
 8006024:	2300      	movs	r3, #0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10d      	bne.n	8006046 <xQueueReceive+0x6a>
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602e:	b672      	cpsid	i
 8006030:	f383 8811 	msr	BASEPRI, r3
 8006034:	f3bf 8f6f 	isb	sy
 8006038:	f3bf 8f4f 	dsb	sy
 800603c:	b662      	cpsie	i
 800603e:	61fb      	str	r3, [r7, #28]
}
 8006040:	bf00      	nop
 8006042:	bf00      	nop
 8006044:	e7fd      	b.n	8006042 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006046:	f001 fa71 	bl	800752c <xTaskGetSchedulerState>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d102      	bne.n	8006056 <xQueueReceive+0x7a>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <xQueueReceive+0x7e>
 8006056:	2301      	movs	r3, #1
 8006058:	e000      	b.n	800605c <xQueueReceive+0x80>
 800605a:	2300      	movs	r3, #0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10d      	bne.n	800607c <xQueueReceive+0xa0>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006064:	b672      	cpsid	i
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	b662      	cpsie	i
 8006074:	61bb      	str	r3, [r7, #24]
}
 8006076:	bf00      	nop
 8006078:	bf00      	nop
 800607a:	e7fd      	b.n	8006078 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800607c:	f002 f8b6 	bl	80081ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006082:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006084:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006088:	2b00      	cmp	r3, #0
 800608a:	d01f      	beq.n	80060cc <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800608c:	68b9      	ldr	r1, [r7, #8]
 800608e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006090:	f000 fad4 	bl	800663c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006096:	1e5a      	subs	r2, r3, #1
 8006098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800609c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00f      	beq.n	80060c4 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060a6:	3310      	adds	r3, #16
 80060a8:	4618      	mov	r0, r3
 80060aa:	f001 f877 	bl	800719c <xTaskRemoveFromEventList>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d007      	beq.n	80060c4 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80060b4:	4b3c      	ldr	r3, [pc, #240]	@ (80061a8 <xQueueReceive+0x1cc>)
 80060b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80060c4:	f002 f8c8 	bl	8008258 <vPortExitCritical>
				return pdPASS;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e069      	b.n	80061a0 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d103      	bne.n	80060da <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060d2:	f002 f8c1 	bl	8008258 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80060d6:	2300      	movs	r3, #0
 80060d8:	e062      	b.n	80061a0 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d106      	bne.n	80060ee <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060e0:	f107 0310 	add.w	r3, r7, #16
 80060e4:	4618      	mov	r0, r3
 80060e6:	f001 f8bf 	bl	8007268 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060ea:	2301      	movs	r3, #1
 80060ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060ee:	f002 f8b3 	bl	8008258 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060f2:	f000 fe23 	bl	8006d3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060f6:	f002 f879 	bl	80081ec <vPortEnterCritical>
 80060fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006100:	b25b      	sxtb	r3, r3
 8006102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006106:	d103      	bne.n	8006110 <xQueueReceive+0x134>
 8006108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800610a:	2200      	movs	r2, #0
 800610c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006112:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006116:	b25b      	sxtb	r3, r3
 8006118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611c:	d103      	bne.n	8006126 <xQueueReceive+0x14a>
 800611e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006126:	f002 f897 	bl	8008258 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800612a:	1d3a      	adds	r2, r7, #4
 800612c:	f107 0310 	add.w	r3, r7, #16
 8006130:	4611      	mov	r1, r2
 8006132:	4618      	mov	r0, r3
 8006134:	f001 f8ae 	bl	8007294 <xTaskCheckForTimeOut>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d123      	bne.n	8006186 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800613e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006140:	f000 faf4 	bl	800672c <prvIsQueueEmpty>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d017      	beq.n	800617a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800614a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800614c:	3324      	adds	r3, #36	@ 0x24
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	4611      	mov	r1, r2
 8006152:	4618      	mov	r0, r3
 8006154:	f000 ffcc 	bl	80070f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006158:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800615a:	f000 fa95 	bl	8006688 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800615e:	f000 fdfb 	bl	8006d58 <xTaskResumeAll>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d189      	bne.n	800607c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8006168:	4b0f      	ldr	r3, [pc, #60]	@ (80061a8 <xQueueReceive+0x1cc>)
 800616a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	e780      	b.n	800607c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800617a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800617c:	f000 fa84 	bl	8006688 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006180:	f000 fdea 	bl	8006d58 <xTaskResumeAll>
 8006184:	e77a      	b.n	800607c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006186:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006188:	f000 fa7e 	bl	8006688 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800618c:	f000 fde4 	bl	8006d58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006190:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006192:	f000 facb 	bl	800672c <prvIsQueueEmpty>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	f43f af6f 	beq.w	800607c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800619e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3730      	adds	r7, #48	@ 0x30
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	e000ed04 	.word	0xe000ed04

080061ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08e      	sub	sp, #56	@ 0x38
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80061b6:	2300      	movs	r3, #0
 80061b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80061be:	2300      	movs	r3, #0
 80061c0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10d      	bne.n	80061e4 <xQueueSemaphoreTake+0x38>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061cc:	b672      	cpsid	i
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	b662      	cpsie	i
 80061dc:	623b      	str	r3, [r7, #32]
}
 80061de:	bf00      	nop
 80061e0:	bf00      	nop
 80061e2:	e7fd      	b.n	80061e0 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80061e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00d      	beq.n	8006208 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 80061ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f0:	b672      	cpsid	i
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	b662      	cpsie	i
 8006200:	61fb      	str	r3, [r7, #28]
}
 8006202:	bf00      	nop
 8006204:	bf00      	nop
 8006206:	e7fd      	b.n	8006204 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006208:	f001 f990 	bl	800752c <xTaskGetSchedulerState>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d102      	bne.n	8006218 <xQueueSemaphoreTake+0x6c>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <xQueueSemaphoreTake+0x70>
 8006218:	2301      	movs	r3, #1
 800621a:	e000      	b.n	800621e <xQueueSemaphoreTake+0x72>
 800621c:	2300      	movs	r3, #0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10d      	bne.n	800623e <xQueueSemaphoreTake+0x92>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006226:	b672      	cpsid	i
 8006228:	f383 8811 	msr	BASEPRI, r3
 800622c:	f3bf 8f6f 	isb	sy
 8006230:	f3bf 8f4f 	dsb	sy
 8006234:	b662      	cpsie	i
 8006236:	61bb      	str	r3, [r7, #24]
}
 8006238:	bf00      	nop
 800623a:	bf00      	nop
 800623c:	e7fd      	b.n	800623a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800623e:	f001 ffd5 	bl	80081ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006244:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006246:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624a:	2b00      	cmp	r3, #0
 800624c:	d024      	beq.n	8006298 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800624e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006250:	1e5a      	subs	r2, r3, #1
 8006252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006254:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d104      	bne.n	8006268 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800625e:	f001 fae7 	bl	8007830 <pvTaskIncrementMutexHeldCount>
 8006262:	4602      	mov	r2, r0
 8006264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006266:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00f      	beq.n	8006290 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006272:	3310      	adds	r3, #16
 8006274:	4618      	mov	r0, r3
 8006276:	f000 ff91 	bl	800719c <xTaskRemoveFromEventList>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d007      	beq.n	8006290 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006280:	4b55      	ldr	r3, [pc, #340]	@ (80063d8 <xQueueSemaphoreTake+0x22c>)
 8006282:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006290:	f001 ffe2 	bl	8008258 <vPortExitCritical>
				return pdPASS;
 8006294:	2301      	movs	r3, #1
 8006296:	e09a      	b.n	80063ce <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d114      	bne.n	80062c8 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800629e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00d      	beq.n	80062c0 <xQueueSemaphoreTake+0x114>
	__asm volatile
 80062a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a8:	b672      	cpsid	i
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	b662      	cpsie	i
 80062b8:	617b      	str	r3, [r7, #20]
}
 80062ba:	bf00      	nop
 80062bc:	bf00      	nop
 80062be:	e7fd      	b.n	80062bc <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80062c0:	f001 ffca 	bl	8008258 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062c4:	2300      	movs	r3, #0
 80062c6:	e082      	b.n	80063ce <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d106      	bne.n	80062dc <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062ce:	f107 030c 	add.w	r3, r7, #12
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 ffc8 	bl	8007268 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062d8:	2301      	movs	r3, #1
 80062da:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062dc:	f001 ffbc 	bl	8008258 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062e0:	f000 fd2c 	bl	8006d3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062e4:	f001 ff82 	bl	80081ec <vPortEnterCritical>
 80062e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062ee:	b25b      	sxtb	r3, r3
 80062f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f4:	d103      	bne.n	80062fe <xQueueSemaphoreTake+0x152>
 80062f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f8:	2200      	movs	r2, #0
 80062fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006300:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006304:	b25b      	sxtb	r3, r3
 8006306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630a:	d103      	bne.n	8006314 <xQueueSemaphoreTake+0x168>
 800630c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800630e:	2200      	movs	r2, #0
 8006310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006314:	f001 ffa0 	bl	8008258 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006318:	463a      	mov	r2, r7
 800631a:	f107 030c 	add.w	r3, r7, #12
 800631e:	4611      	mov	r1, r2
 8006320:	4618      	mov	r0, r3
 8006322:	f000 ffb7 	bl	8007294 <xTaskCheckForTimeOut>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d132      	bne.n	8006392 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800632c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800632e:	f000 f9fd 	bl	800672c <prvIsQueueEmpty>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d026      	beq.n	8006386 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d109      	bne.n	8006354 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8006340:	f001 ff54 	bl	80081ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	4618      	mov	r0, r3
 800634a:	f001 f90d 	bl	8007568 <xTaskPriorityInherit>
 800634e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006350:	f001 ff82 	bl	8008258 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006356:	3324      	adds	r3, #36	@ 0x24
 8006358:	683a      	ldr	r2, [r7, #0]
 800635a:	4611      	mov	r1, r2
 800635c:	4618      	mov	r0, r3
 800635e:	f000 fec7 	bl	80070f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006362:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006364:	f000 f990 	bl	8006688 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006368:	f000 fcf6 	bl	8006d58 <xTaskResumeAll>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	f47f af65 	bne.w	800623e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8006374:	4b18      	ldr	r3, [pc, #96]	@ (80063d8 <xQueueSemaphoreTake+0x22c>)
 8006376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	e75b      	b.n	800623e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006386:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006388:	f000 f97e 	bl	8006688 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800638c:	f000 fce4 	bl	8006d58 <xTaskResumeAll>
 8006390:	e755      	b.n	800623e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006392:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006394:	f000 f978 	bl	8006688 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006398:	f000 fcde 	bl	8006d58 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800639c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800639e:	f000 f9c5 	bl	800672c <prvIsQueueEmpty>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f43f af4a 	beq.w	800623e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80063aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00d      	beq.n	80063cc <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 80063b0:	f001 ff1c 	bl	80081ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80063b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80063b6:	f000 f8bf 	bl	8006538 <prvGetDisinheritPriorityAfterTimeout>
 80063ba:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80063bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063c2:	4618      	mov	r0, r3
 80063c4:	f001 f9ac 	bl	8007720 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80063c8:	f001 ff46 	bl	8008258 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3738      	adds	r7, #56	@ 0x38
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	e000ed04 	.word	0xe000ed04

080063dc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08e      	sub	sp, #56	@ 0x38
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80063ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10d      	bne.n	800640e <xQueueReceiveFromISR+0x32>
	__asm volatile
 80063f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f6:	b672      	cpsid	i
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	b662      	cpsie	i
 8006406:	623b      	str	r3, [r7, #32]
}
 8006408:	bf00      	nop
 800640a:	bf00      	nop
 800640c:	e7fd      	b.n	800640a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d103      	bne.n	800641c <xQueueReceiveFromISR+0x40>
 8006414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <xQueueReceiveFromISR+0x44>
 800641c:	2301      	movs	r3, #1
 800641e:	e000      	b.n	8006422 <xQueueReceiveFromISR+0x46>
 8006420:	2300      	movs	r3, #0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10d      	bne.n	8006442 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800642a:	b672      	cpsid	i
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	b662      	cpsie	i
 800643a:	61fb      	str	r3, [r7, #28]
}
 800643c:	bf00      	nop
 800643e:	bf00      	nop
 8006440:	e7fd      	b.n	800643e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006442:	f001 ffbb 	bl	80083bc <vPortValidateInterruptPriority>
	__asm volatile
 8006446:	f3ef 8211 	mrs	r2, BASEPRI
 800644a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800644e:	b672      	cpsid	i
 8006450:	f383 8811 	msr	BASEPRI, r3
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	b662      	cpsie	i
 800645e:	61ba      	str	r2, [r7, #24]
 8006460:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006462:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006464:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800646a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800646c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800646e:	2b00      	cmp	r3, #0
 8006470:	d02f      	beq.n	80064d2 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006474:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006478:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800647c:	68b9      	ldr	r1, [r7, #8]
 800647e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006480:	f000 f8dc 	bl	800663c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006486:	1e5a      	subs	r2, r3, #1
 8006488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800648c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006494:	d112      	bne.n	80064bc <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d016      	beq.n	80064cc <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800649e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a0:	3310      	adds	r3, #16
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 fe7a 	bl	800719c <xTaskRemoveFromEventList>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00e      	beq.n	80064cc <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00b      	beq.n	80064cc <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	e007      	b.n	80064cc <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80064bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80064c0:	3301      	adds	r3, #1
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	b25a      	sxtb	r2, r3
 80064c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80064cc:	2301      	movs	r3, #1
 80064ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80064d0:	e001      	b.n	80064d6 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 80064d2:	2300      	movs	r3, #0
 80064d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80064d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f383 8811 	msr	BASEPRI, r3
}
 80064e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3738      	adds	r7, #56	@ 0x38
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10d      	bne.n	800651a <vQueueDelete+0x2e>
	__asm volatile
 80064fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006502:	b672      	cpsid	i
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	b662      	cpsie	i
 8006512:	60bb      	str	r3, [r7, #8]
}
 8006514:	bf00      	nop
 8006516:	bf00      	nop
 8006518:	e7fd      	b.n	8006516 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 f95e 	bl	80067dc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006526:	2b00      	cmp	r3, #0
 8006528:	d102      	bne.n	8006530 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f002 f85a 	bl	80085e4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006530:	bf00      	nop
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006544:	2b00      	cmp	r3, #0
 8006546:	d006      	beq.n	8006556 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	e001      	b.n	800655a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006556:	2300      	movs	r3, #0
 8006558:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800655a:	68fb      	ldr	r3, [r7, #12]
	}
 800655c:	4618      	mov	r0, r3
 800655e:	3714      	adds	r7, #20
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006574:	2300      	movs	r3, #0
 8006576:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10d      	bne.n	80065a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d14d      	bne.n	800662a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	4618      	mov	r0, r3
 8006594:	f001 f850 	bl	8007638 <xTaskPriorityDisinherit>
 8006598:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	609a      	str	r2, [r3, #8]
 80065a0:	e043      	b.n	800662a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d119      	bne.n	80065dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6858      	ldr	r0, [r3, #4]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b0:	461a      	mov	r2, r3
 80065b2:	68b9      	ldr	r1, [r7, #8]
 80065b4:	f002 f964 	bl	8008880 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c0:	441a      	add	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d32b      	bcc.n	800662a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	605a      	str	r2, [r3, #4]
 80065da:	e026      	b.n	800662a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	68d8      	ldr	r0, [r3, #12]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e4:	461a      	mov	r2, r3
 80065e6:	68b9      	ldr	r1, [r7, #8]
 80065e8:	f002 f94a 	bl	8008880 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f4:	425b      	negs	r3, r3
 80065f6:	441a      	add	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	429a      	cmp	r2, r3
 8006606:	d207      	bcs.n	8006618 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	689a      	ldr	r2, [r3, #8]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006610:	425b      	negs	r3, r3
 8006612:	441a      	add	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b02      	cmp	r3, #2
 800661c:	d105      	bne.n	800662a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	3b01      	subs	r3, #1
 8006628:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	1c5a      	adds	r2, r3, #1
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006632:	697b      	ldr	r3, [r7, #20]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3718      	adds	r7, #24
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664a:	2b00      	cmp	r3, #0
 800664c:	d018      	beq.n	8006680 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006656:	441a      	add	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68da      	ldr	r2, [r3, #12]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	429a      	cmp	r2, r3
 8006666:	d303      	bcc.n	8006670 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	68d9      	ldr	r1, [r3, #12]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006678:	461a      	mov	r2, r3
 800667a:	6838      	ldr	r0, [r7, #0]
 800667c:	f002 f900 	bl	8008880 <memcpy>
	}
}
 8006680:	bf00      	nop
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006690:	f001 fdac 	bl	80081ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800669a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800669c:	e011      	b.n	80066c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d012      	beq.n	80066cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	3324      	adds	r3, #36	@ 0x24
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 fd76 	bl	800719c <xTaskRemoveFromEventList>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80066b6:	f000 fe55 	bl	8007364 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80066ba:	7bfb      	ldrb	r3, [r7, #15]
 80066bc:	3b01      	subs	r3, #1
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	dce9      	bgt.n	800669e <prvUnlockQueue+0x16>
 80066ca:	e000      	b.n	80066ce <prvUnlockQueue+0x46>
					break;
 80066cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	22ff      	movs	r2, #255	@ 0xff
 80066d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80066d6:	f001 fdbf 	bl	8008258 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80066da:	f001 fd87 	bl	80081ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066e6:	e011      	b.n	800670c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d012      	beq.n	8006716 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	3310      	adds	r3, #16
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 fd51 	bl	800719c <xTaskRemoveFromEventList>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006700:	f000 fe30 	bl	8007364 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006704:	7bbb      	ldrb	r3, [r7, #14]
 8006706:	3b01      	subs	r3, #1
 8006708:	b2db      	uxtb	r3, r3
 800670a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800670c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006710:	2b00      	cmp	r3, #0
 8006712:	dce9      	bgt.n	80066e8 <prvUnlockQueue+0x60>
 8006714:	e000      	b.n	8006718 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006716:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	22ff      	movs	r2, #255	@ 0xff
 800671c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006720:	f001 fd9a 	bl	8008258 <vPortExitCritical>
}
 8006724:	bf00      	nop
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006734:	f001 fd5a 	bl	80081ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673c:	2b00      	cmp	r3, #0
 800673e:	d102      	bne.n	8006746 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006740:	2301      	movs	r3, #1
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	e001      	b.n	800674a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006746:	2300      	movs	r3, #0
 8006748:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800674a:	f001 fd85 	bl	8008258 <vPortExitCritical>

	return xReturn;
 800674e:	68fb      	ldr	r3, [r7, #12]
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006760:	f001 fd44 	bl	80081ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800676c:	429a      	cmp	r2, r3
 800676e:	d102      	bne.n	8006776 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006770:	2301      	movs	r3, #1
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	e001      	b.n	800677a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800677a:	f001 fd6d 	bl	8008258 <vPortExitCritical>

	return xReturn;
 800677e:	68fb      	ldr	r3, [r7, #12]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006792:	2300      	movs	r3, #0
 8006794:	60fb      	str	r3, [r7, #12]
 8006796:	e014      	b.n	80067c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006798:	4a0f      	ldr	r2, [pc, #60]	@ (80067d8 <vQueueAddToRegistry+0x50>)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10b      	bne.n	80067bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80067a4:	490c      	ldr	r1, [pc, #48]	@ (80067d8 <vQueueAddToRegistry+0x50>)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80067ae:	4a0a      	ldr	r2, [pc, #40]	@ (80067d8 <vQueueAddToRegistry+0x50>)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	4413      	add	r3, r2
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80067ba:	e006      	b.n	80067ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	3301      	adds	r3, #1
 80067c0:	60fb      	str	r3, [r7, #12]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2b07      	cmp	r3, #7
 80067c6:	d9e7      	bls.n	8006798 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80067c8:	bf00      	nop
 80067ca:	bf00      	nop
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	20000994 	.word	0x20000994

080067dc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	e016      	b.n	8006818 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80067ea:	4a10      	ldr	r2, [pc, #64]	@ (800682c <vQueueUnregisterQueue+0x50>)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	00db      	lsls	r3, r3, #3
 80067f0:	4413      	add	r3, r2
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d10b      	bne.n	8006812 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80067fa:	4a0c      	ldr	r2, [pc, #48]	@ (800682c <vQueueUnregisterQueue+0x50>)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2100      	movs	r1, #0
 8006800:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006804:	4a09      	ldr	r2, [pc, #36]	@ (800682c <vQueueUnregisterQueue+0x50>)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	00db      	lsls	r3, r3, #3
 800680a:	4413      	add	r3, r2
 800680c:	2200      	movs	r2, #0
 800680e:	605a      	str	r2, [r3, #4]
				break;
 8006810:	e006      	b.n	8006820 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	3301      	adds	r3, #1
 8006816:	60fb      	str	r3, [r7, #12]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2b07      	cmp	r3, #7
 800681c:	d9e5      	bls.n	80067ea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800681e:	bf00      	nop
 8006820:	bf00      	nop
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	20000994 	.word	0x20000994

08006830 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006840:	f001 fcd4 	bl	80081ec <vPortEnterCritical>
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800684a:	b25b      	sxtb	r3, r3
 800684c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006850:	d103      	bne.n	800685a <vQueueWaitForMessageRestricted+0x2a>
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006860:	b25b      	sxtb	r3, r3
 8006862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006866:	d103      	bne.n	8006870 <vQueueWaitForMessageRestricted+0x40>
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006870:	f001 fcf2 	bl	8008258 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006878:	2b00      	cmp	r3, #0
 800687a:	d106      	bne.n	800688a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	3324      	adds	r3, #36	@ 0x24
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	68b9      	ldr	r1, [r7, #8]
 8006884:	4618      	mov	r0, r3
 8006886:	f000 fc5b 	bl	8007140 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800688a:	6978      	ldr	r0, [r7, #20]
 800688c:	f7ff fefc 	bl	8006688 <prvUnlockQueue>
	}
 8006890:	bf00      	nop
 8006892:	3718      	adds	r7, #24
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08e      	sub	sp, #56	@ 0x38
 800689c:	af04      	add	r7, sp, #16
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
 80068a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80068a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10d      	bne.n	80068c8 <xTaskCreateStatic+0x30>
	__asm volatile
 80068ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b0:	b672      	cpsid	i
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	b662      	cpsie	i
 80068c0:	623b      	str	r3, [r7, #32]
}
 80068c2:	bf00      	nop
 80068c4:	bf00      	nop
 80068c6:	e7fd      	b.n	80068c4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80068c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10d      	bne.n	80068ea <xTaskCreateStatic+0x52>
	__asm volatile
 80068ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d2:	b672      	cpsid	i
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	b662      	cpsie	i
 80068e2:	61fb      	str	r3, [r7, #28]
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop
 80068e8:	e7fd      	b.n	80068e6 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80068ea:	235c      	movs	r3, #92	@ 0x5c
 80068ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2b5c      	cmp	r3, #92	@ 0x5c
 80068f2:	d00d      	beq.n	8006910 <xTaskCreateStatic+0x78>
	__asm volatile
 80068f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f8:	b672      	cpsid	i
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	b662      	cpsie	i
 8006908:	61bb      	str	r3, [r7, #24]
}
 800690a:	bf00      	nop
 800690c:	bf00      	nop
 800690e:	e7fd      	b.n	800690c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006910:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006914:	2b00      	cmp	r3, #0
 8006916:	d01e      	beq.n	8006956 <xTaskCreateStatic+0xbe>
 8006918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800691a:	2b00      	cmp	r3, #0
 800691c:	d01b      	beq.n	8006956 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800691e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006920:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006924:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006926:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692a:	2202      	movs	r2, #2
 800692c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006930:	2300      	movs	r3, #0
 8006932:	9303      	str	r3, [sp, #12]
 8006934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006936:	9302      	str	r3, [sp, #8]
 8006938:	f107 0314 	add.w	r3, r7, #20
 800693c:	9301      	str	r3, [sp, #4]
 800693e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	68b9      	ldr	r1, [r7, #8]
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 f850 	bl	80069ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800694e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006950:	f000 f8e0 	bl	8006b14 <prvAddNewTaskToReadyList>
 8006954:	e001      	b.n	800695a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8006956:	2300      	movs	r3, #0
 8006958:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800695a:	697b      	ldr	r3, [r7, #20]
	}
 800695c:	4618      	mov	r0, r3
 800695e:	3728      	adds	r7, #40	@ 0x28
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08c      	sub	sp, #48	@ 0x30
 8006968:	af04      	add	r7, sp, #16
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	603b      	str	r3, [r7, #0]
 8006970:	4613      	mov	r3, r2
 8006972:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006974:	88fb      	ldrh	r3, [r7, #6]
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4618      	mov	r0, r3
 800697a:	f001 fd65 	bl	8008448 <pvPortMalloc>
 800697e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00e      	beq.n	80069a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006986:	205c      	movs	r0, #92	@ 0x5c
 8006988:	f001 fd5e 	bl	8008448 <pvPortMalloc>
 800698c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	631a      	str	r2, [r3, #48]	@ 0x30
 800699a:	e005      	b.n	80069a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800699c:	6978      	ldr	r0, [r7, #20]
 800699e:	f001 fe21 	bl	80085e4 <vPortFree>
 80069a2:	e001      	b.n	80069a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80069a4:	2300      	movs	r3, #0
 80069a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d017      	beq.n	80069de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	2200      	movs	r2, #0
 80069b2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80069b6:	88fa      	ldrh	r2, [r7, #6]
 80069b8:	2300      	movs	r3, #0
 80069ba:	9303      	str	r3, [sp, #12]
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	9302      	str	r3, [sp, #8]
 80069c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069c2:	9301      	str	r3, [sp, #4]
 80069c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	68b9      	ldr	r1, [r7, #8]
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 f80e 	bl	80069ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80069d2:	69f8      	ldr	r0, [r7, #28]
 80069d4:	f000 f89e 	bl	8006b14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80069d8:	2301      	movs	r3, #1
 80069da:	61bb      	str	r3, [r7, #24]
 80069dc:	e002      	b.n	80069e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80069de:	f04f 33ff 	mov.w	r3, #4294967295
 80069e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80069e4:	69bb      	ldr	r3, [r7, #24]
	}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3720      	adds	r7, #32
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b088      	sub	sp, #32
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	60f8      	str	r0, [r7, #12]
 80069f6:	60b9      	str	r1, [r7, #8]
 80069f8:	607a      	str	r2, [r7, #4]
 80069fa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80069fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	461a      	mov	r2, r3
 8006a06:	21a5      	movs	r1, #165	@ 0xa5
 8006a08:	f001 ff08 	bl	800881c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a10:	6879      	ldr	r1, [r7, #4]
 8006a12:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006a16:	440b      	add	r3, r1
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4413      	add	r3, r2
 8006a1c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	f023 0307 	bic.w	r3, r3, #7
 8006a24:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	f003 0307 	and.w	r3, r3, #7
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00d      	beq.n	8006a4c <prvInitialiseNewTask+0x5e>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a34:	b672      	cpsid	i
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	b662      	cpsie	i
 8006a44:	617b      	str	r3, [r7, #20]
}
 8006a46:	bf00      	nop
 8006a48:	bf00      	nop
 8006a4a:	e7fd      	b.n	8006a48 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d01f      	beq.n	8006a92 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a52:	2300      	movs	r3, #0
 8006a54:	61fb      	str	r3, [r7, #28]
 8006a56:	e012      	b.n	8006a7e <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a58:	68ba      	ldr	r2, [r7, #8]
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	7819      	ldrb	r1, [r3, #0]
 8006a60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	4413      	add	r3, r2
 8006a66:	3334      	adds	r3, #52	@ 0x34
 8006a68:	460a      	mov	r2, r1
 8006a6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	4413      	add	r3, r2
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d006      	beq.n	8006a86 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	61fb      	str	r3, [r7, #28]
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	2b0f      	cmp	r3, #15
 8006a82:	d9e9      	bls.n	8006a58 <prvInitialiseNewTask+0x6a>
 8006a84:	e000      	b.n	8006a88 <prvInitialiseNewTask+0x9a>
			{
				break;
 8006a86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a90:	e003      	b.n	8006a9a <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a9c:	2b37      	cmp	r3, #55	@ 0x37
 8006a9e:	d901      	bls.n	8006aa4 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006aa0:	2337      	movs	r3, #55	@ 0x37
 8006aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006aa8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006aae:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab8:	3304      	adds	r3, #4
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fe fde4 	bl	8005688 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac2:	3318      	adds	r3, #24
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7fe fddf 	bl	8005688 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ace:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006adc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ade:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	68f9      	ldr	r1, [r7, #12]
 8006af2:	69b8      	ldr	r0, [r7, #24]
 8006af4:	f001 fa6c 	bl	8007fd0 <pxPortInitialiseStack>
 8006af8:	4602      	mov	r2, r0
 8006afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d002      	beq.n	8006b0a <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b0a:	bf00      	nop
 8006b0c:	3720      	adds	r7, #32
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
	...

08006b14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b1c:	f001 fb66 	bl	80081ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b20:	4b2d      	ldr	r3, [pc, #180]	@ (8006bd8 <prvAddNewTaskToReadyList+0xc4>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3301      	adds	r3, #1
 8006b26:	4a2c      	ldr	r2, [pc, #176]	@ (8006bd8 <prvAddNewTaskToReadyList+0xc4>)
 8006b28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b2a:	4b2c      	ldr	r3, [pc, #176]	@ (8006bdc <prvAddNewTaskToReadyList+0xc8>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d109      	bne.n	8006b46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b32:	4a2a      	ldr	r2, [pc, #168]	@ (8006bdc <prvAddNewTaskToReadyList+0xc8>)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b38:	4b27      	ldr	r3, [pc, #156]	@ (8006bd8 <prvAddNewTaskToReadyList+0xc4>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d110      	bne.n	8006b62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b40:	f000 fc34 	bl	80073ac <prvInitialiseTaskLists>
 8006b44:	e00d      	b.n	8006b62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b46:	4b26      	ldr	r3, [pc, #152]	@ (8006be0 <prvAddNewTaskToReadyList+0xcc>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d109      	bne.n	8006b62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b4e:	4b23      	ldr	r3, [pc, #140]	@ (8006bdc <prvAddNewTaskToReadyList+0xc8>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d802      	bhi.n	8006b62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b5c:	4a1f      	ldr	r2, [pc, #124]	@ (8006bdc <prvAddNewTaskToReadyList+0xc8>)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b62:	4b20      	ldr	r3, [pc, #128]	@ (8006be4 <prvAddNewTaskToReadyList+0xd0>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	3301      	adds	r3, #1
 8006b68:	4a1e      	ldr	r2, [pc, #120]	@ (8006be4 <prvAddNewTaskToReadyList+0xd0>)
 8006b6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8006be4 <prvAddNewTaskToReadyList+0xd0>)
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b78:	4b1b      	ldr	r3, [pc, #108]	@ (8006be8 <prvAddNewTaskToReadyList+0xd4>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d903      	bls.n	8006b88 <prvAddNewTaskToReadyList+0x74>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b84:	4a18      	ldr	r2, [pc, #96]	@ (8006be8 <prvAddNewTaskToReadyList+0xd4>)
 8006b86:	6013      	str	r3, [r2, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b8c:	4613      	mov	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4a15      	ldr	r2, [pc, #84]	@ (8006bec <prvAddNewTaskToReadyList+0xd8>)
 8006b96:	441a      	add	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	4610      	mov	r0, r2
 8006ba0:	f7fe fd7f 	bl	80056a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ba4:	f001 fb58 	bl	8008258 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8006be0 <prvAddNewTaskToReadyList+0xcc>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00e      	beq.n	8006bce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8006bdc <prvAddNewTaskToReadyList+0xc8>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d207      	bcs.n	8006bce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8006bf0 <prvAddNewTaskToReadyList+0xdc>)
 8006bc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	f3bf 8f4f 	dsb	sy
 8006bca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bce:	bf00      	nop
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20000ea8 	.word	0x20000ea8
 8006bdc:	200009d4 	.word	0x200009d4
 8006be0:	20000eb4 	.word	0x20000eb4
 8006be4:	20000ec4 	.word	0x20000ec4
 8006be8:	20000eb0 	.word	0x20000eb0
 8006bec:	200009d8 	.word	0x200009d8
 8006bf0:	e000ed04 	.word	0xe000ed04

08006bf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d01a      	beq.n	8006c3c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c06:	4b15      	ldr	r3, [pc, #84]	@ (8006c5c <vTaskDelay+0x68>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00d      	beq.n	8006c2a <vTaskDelay+0x36>
	__asm volatile
 8006c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c12:	b672      	cpsid	i
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	b662      	cpsie	i
 8006c22:	60bb      	str	r3, [r7, #8]
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop
 8006c28:	e7fd      	b.n	8006c26 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006c2a:	f000 f887 	bl	8006d3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c2e:	2100      	movs	r1, #0
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fe11 	bl	8007858 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c36:	f000 f88f 	bl	8006d58 <xTaskResumeAll>
 8006c3a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d107      	bne.n	8006c52 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006c42:	4b07      	ldr	r3, [pc, #28]	@ (8006c60 <vTaskDelay+0x6c>)
 8006c44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c48:	601a      	str	r2, [r3, #0]
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c52:	bf00      	nop
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	20000ed0 	.word	0x20000ed0
 8006c60:	e000ed04 	.word	0xe000ed04

08006c64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b08a      	sub	sp, #40	@ 0x28
 8006c68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c72:	463a      	mov	r2, r7
 8006c74:	1d39      	adds	r1, r7, #4
 8006c76:	f107 0308 	add.w	r3, r7, #8
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7fe fcb0 	bl	80055e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	9202      	str	r2, [sp, #8]
 8006c88:	9301      	str	r3, [sp, #4]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	2300      	movs	r3, #0
 8006c90:	460a      	mov	r2, r1
 8006c92:	4924      	ldr	r1, [pc, #144]	@ (8006d24 <vTaskStartScheduler+0xc0>)
 8006c94:	4824      	ldr	r0, [pc, #144]	@ (8006d28 <vTaskStartScheduler+0xc4>)
 8006c96:	f7ff fdff 	bl	8006898 <xTaskCreateStatic>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	4a23      	ldr	r2, [pc, #140]	@ (8006d2c <vTaskStartScheduler+0xc8>)
 8006c9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ca0:	4b22      	ldr	r3, [pc, #136]	@ (8006d2c <vTaskStartScheduler+0xc8>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d002      	beq.n	8006cae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	617b      	str	r3, [r7, #20]
 8006cac:	e001      	b.n	8006cb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d102      	bne.n	8006cbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006cb8:	f000 fe22 	bl	8007900 <xTimerCreateTimerTask>
 8006cbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d118      	bne.n	8006cf6 <vTaskStartScheduler+0x92>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc8:	b672      	cpsid	i
 8006cca:	f383 8811 	msr	BASEPRI, r3
 8006cce:	f3bf 8f6f 	isb	sy
 8006cd2:	f3bf 8f4f 	dsb	sy
 8006cd6:	b662      	cpsie	i
 8006cd8:	613b      	str	r3, [r7, #16]
}
 8006cda:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006cdc:	4b14      	ldr	r3, [pc, #80]	@ (8006d30 <vTaskStartScheduler+0xcc>)
 8006cde:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ce4:	4b13      	ldr	r3, [pc, #76]	@ (8006d34 <vTaskStartScheduler+0xd0>)
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006cea:	4b13      	ldr	r3, [pc, #76]	@ (8006d38 <vTaskStartScheduler+0xd4>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006cf0:	f001 f9fe 	bl	80080f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006cf4:	e011      	b.n	8006d1a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cfc:	d10d      	bne.n	8006d1a <vTaskStartScheduler+0xb6>
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d02:	b672      	cpsid	i
 8006d04:	f383 8811 	msr	BASEPRI, r3
 8006d08:	f3bf 8f6f 	isb	sy
 8006d0c:	f3bf 8f4f 	dsb	sy
 8006d10:	b662      	cpsie	i
 8006d12:	60fb      	str	r3, [r7, #12]
}
 8006d14:	bf00      	nop
 8006d16:	bf00      	nop
 8006d18:	e7fd      	b.n	8006d16 <vTaskStartScheduler+0xb2>
}
 8006d1a:	bf00      	nop
 8006d1c:	3718      	adds	r7, #24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	08008b54 	.word	0x08008b54
 8006d28:	0800737d 	.word	0x0800737d
 8006d2c:	20000ecc 	.word	0x20000ecc
 8006d30:	20000ec8 	.word	0x20000ec8
 8006d34:	20000eb4 	.word	0x20000eb4
 8006d38:	20000eac 	.word	0x20000eac

08006d3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006d40:	4b04      	ldr	r3, [pc, #16]	@ (8006d54 <vTaskSuspendAll+0x18>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3301      	adds	r3, #1
 8006d46:	4a03      	ldr	r2, [pc, #12]	@ (8006d54 <vTaskSuspendAll+0x18>)
 8006d48:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006d4a:	bf00      	nop
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr
 8006d54:	20000ed0 	.word	0x20000ed0

08006d58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d62:	2300      	movs	r3, #0
 8006d64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d66:	4b43      	ldr	r3, [pc, #268]	@ (8006e74 <xTaskResumeAll+0x11c>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10d      	bne.n	8006d8a <xTaskResumeAll+0x32>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d72:	b672      	cpsid	i
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	b662      	cpsie	i
 8006d82:	603b      	str	r3, [r7, #0]
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop
 8006d88:	e7fd      	b.n	8006d86 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d8a:	f001 fa2f 	bl	80081ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d8e:	4b39      	ldr	r3, [pc, #228]	@ (8006e74 <xTaskResumeAll+0x11c>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	3b01      	subs	r3, #1
 8006d94:	4a37      	ldr	r2, [pc, #220]	@ (8006e74 <xTaskResumeAll+0x11c>)
 8006d96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d98:	4b36      	ldr	r3, [pc, #216]	@ (8006e74 <xTaskResumeAll+0x11c>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d162      	bne.n	8006e66 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006da0:	4b35      	ldr	r3, [pc, #212]	@ (8006e78 <xTaskResumeAll+0x120>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d05e      	beq.n	8006e66 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006da8:	e02f      	b.n	8006e0a <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006daa:	4b34      	ldr	r3, [pc, #208]	@ (8006e7c <xTaskResumeAll+0x124>)
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	3318      	adds	r3, #24
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fe fcd0 	bl	800575c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	3304      	adds	r3, #4
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7fe fccb 	bl	800575c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dca:	4b2d      	ldr	r3, [pc, #180]	@ (8006e80 <xTaskResumeAll+0x128>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d903      	bls.n	8006dda <xTaskResumeAll+0x82>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd6:	4a2a      	ldr	r2, [pc, #168]	@ (8006e80 <xTaskResumeAll+0x128>)
 8006dd8:	6013      	str	r3, [r2, #0]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dde:	4613      	mov	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4413      	add	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4a27      	ldr	r2, [pc, #156]	@ (8006e84 <xTaskResumeAll+0x12c>)
 8006de8:	441a      	add	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	3304      	adds	r3, #4
 8006dee:	4619      	mov	r1, r3
 8006df0:	4610      	mov	r0, r2
 8006df2:	f7fe fc56 	bl	80056a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dfa:	4b23      	ldr	r3, [pc, #140]	@ (8006e88 <xTaskResumeAll+0x130>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d302      	bcc.n	8006e0a <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8006e04:	4b21      	ldr	r3, [pc, #132]	@ (8006e8c <xTaskResumeAll+0x134>)
 8006e06:	2201      	movs	r2, #1
 8006e08:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8006e7c <xTaskResumeAll+0x124>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d1cb      	bne.n	8006daa <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d001      	beq.n	8006e1c <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e18:	f000 fb68 	bl	80074ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8006e90 <xTaskResumeAll+0x138>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d010      	beq.n	8006e4a <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e28:	f000 f846 	bl	8006eb8 <xTaskIncrementTick>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8006e32:	4b16      	ldr	r3, [pc, #88]	@ (8006e8c <xTaskResumeAll+0x134>)
 8006e34:	2201      	movs	r2, #1
 8006e36:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1f1      	bne.n	8006e28 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8006e44:	4b12      	ldr	r3, [pc, #72]	@ (8006e90 <xTaskResumeAll+0x138>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e4a:	4b10      	ldr	r3, [pc, #64]	@ (8006e8c <xTaskResumeAll+0x134>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d009      	beq.n	8006e66 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e52:	2301      	movs	r3, #1
 8006e54:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e56:	4b0f      	ldr	r3, [pc, #60]	@ (8006e94 <xTaskResumeAll+0x13c>)
 8006e58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e66:	f001 f9f7 	bl	8008258 <vPortExitCritical>

	return xAlreadyYielded;
 8006e6a:	68bb      	ldr	r3, [r7, #8]
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	20000ed0 	.word	0x20000ed0
 8006e78:	20000ea8 	.word	0x20000ea8
 8006e7c:	20000e68 	.word	0x20000e68
 8006e80:	20000eb0 	.word	0x20000eb0
 8006e84:	200009d8 	.word	0x200009d8
 8006e88:	200009d4 	.word	0x200009d4
 8006e8c:	20000ebc 	.word	0x20000ebc
 8006e90:	20000eb8 	.word	0x20000eb8
 8006e94:	e000ed04 	.word	0xe000ed04

08006e98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e9e:	4b05      	ldr	r3, [pc, #20]	@ (8006eb4 <xTaskGetTickCount+0x1c>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ea4:	687b      	ldr	r3, [r7, #4]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	20000eac 	.word	0x20000eac

08006eb8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ec2:	4b50      	ldr	r3, [pc, #320]	@ (8007004 <xTaskIncrementTick+0x14c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f040 808c 	bne.w	8006fe4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ecc:	4b4e      	ldr	r3, [pc, #312]	@ (8007008 <xTaskIncrementTick+0x150>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ed4:	4a4c      	ldr	r2, [pc, #304]	@ (8007008 <xTaskIncrementTick+0x150>)
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d123      	bne.n	8006f28 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ee0:	4b4a      	ldr	r3, [pc, #296]	@ (800700c <xTaskIncrementTick+0x154>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00d      	beq.n	8006f06 <xTaskIncrementTick+0x4e>
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eee:	b672      	cpsid	i
 8006ef0:	f383 8811 	msr	BASEPRI, r3
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	b662      	cpsie	i
 8006efe:	603b      	str	r3, [r7, #0]
}
 8006f00:	bf00      	nop
 8006f02:	bf00      	nop
 8006f04:	e7fd      	b.n	8006f02 <xTaskIncrementTick+0x4a>
 8006f06:	4b41      	ldr	r3, [pc, #260]	@ (800700c <xTaskIncrementTick+0x154>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	60fb      	str	r3, [r7, #12]
 8006f0c:	4b40      	ldr	r3, [pc, #256]	@ (8007010 <xTaskIncrementTick+0x158>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a3e      	ldr	r2, [pc, #248]	@ (800700c <xTaskIncrementTick+0x154>)
 8006f12:	6013      	str	r3, [r2, #0]
 8006f14:	4a3e      	ldr	r2, [pc, #248]	@ (8007010 <xTaskIncrementTick+0x158>)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6013      	str	r3, [r2, #0]
 8006f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8007014 <xTaskIncrementTick+0x15c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	4a3c      	ldr	r2, [pc, #240]	@ (8007014 <xTaskIncrementTick+0x15c>)
 8006f22:	6013      	str	r3, [r2, #0]
 8006f24:	f000 fae2 	bl	80074ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f28:	4b3b      	ldr	r3, [pc, #236]	@ (8007018 <xTaskIncrementTick+0x160>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	693a      	ldr	r2, [r7, #16]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d349      	bcc.n	8006fc6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f32:	4b36      	ldr	r3, [pc, #216]	@ (800700c <xTaskIncrementTick+0x154>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d104      	bne.n	8006f46 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f3c:	4b36      	ldr	r3, [pc, #216]	@ (8007018 <xTaskIncrementTick+0x160>)
 8006f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006f42:	601a      	str	r2, [r3, #0]
					break;
 8006f44:	e03f      	b.n	8006fc6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f46:	4b31      	ldr	r3, [pc, #196]	@ (800700c <xTaskIncrementTick+0x154>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d203      	bcs.n	8006f66 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f5e:	4a2e      	ldr	r2, [pc, #184]	@ (8007018 <xTaskIncrementTick+0x160>)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f64:	e02f      	b.n	8006fc6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fe fbf6 	bl	800575c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d004      	beq.n	8006f82 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	3318      	adds	r3, #24
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7fe fbed 	bl	800575c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f86:	4b25      	ldr	r3, [pc, #148]	@ (800701c <xTaskIncrementTick+0x164>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d903      	bls.n	8006f96 <xTaskIncrementTick+0xde>
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f92:	4a22      	ldr	r2, [pc, #136]	@ (800701c <xTaskIncrementTick+0x164>)
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4a1f      	ldr	r2, [pc, #124]	@ (8007020 <xTaskIncrementTick+0x168>)
 8006fa4:	441a      	add	r2, r3
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	4619      	mov	r1, r3
 8006fac:	4610      	mov	r0, r2
 8006fae:	f7fe fb78 	bl	80056a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8007024 <xTaskIncrementTick+0x16c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d3b8      	bcc.n	8006f32 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fc4:	e7b5      	b.n	8006f32 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006fc6:	4b17      	ldr	r3, [pc, #92]	@ (8007024 <xTaskIncrementTick+0x16c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fcc:	4914      	ldr	r1, [pc, #80]	@ (8007020 <xTaskIncrementTick+0x168>)
 8006fce:	4613      	mov	r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	4413      	add	r3, r2
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	440b      	add	r3, r1
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d907      	bls.n	8006fee <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	617b      	str	r3, [r7, #20]
 8006fe2:	e004      	b.n	8006fee <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006fe4:	4b10      	ldr	r3, [pc, #64]	@ (8007028 <xTaskIncrementTick+0x170>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	4a0f      	ldr	r2, [pc, #60]	@ (8007028 <xTaskIncrementTick+0x170>)
 8006fec:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006fee:	4b0f      	ldr	r3, [pc, #60]	@ (800702c <xTaskIncrementTick+0x174>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006ffa:	697b      	ldr	r3, [r7, #20]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3718      	adds	r7, #24
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	20000ed0 	.word	0x20000ed0
 8007008:	20000eac 	.word	0x20000eac
 800700c:	20000e60 	.word	0x20000e60
 8007010:	20000e64 	.word	0x20000e64
 8007014:	20000ec0 	.word	0x20000ec0
 8007018:	20000ec8 	.word	0x20000ec8
 800701c:	20000eb0 	.word	0x20000eb0
 8007020:	200009d8 	.word	0x200009d8
 8007024:	200009d4 	.word	0x200009d4
 8007028:	20000eb8 	.word	0x20000eb8
 800702c:	20000ebc 	.word	0x20000ebc

08007030 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007036:	4b29      	ldr	r3, [pc, #164]	@ (80070dc <vTaskSwitchContext+0xac>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d003      	beq.n	8007046 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800703e:	4b28      	ldr	r3, [pc, #160]	@ (80070e0 <vTaskSwitchContext+0xb0>)
 8007040:	2201      	movs	r2, #1
 8007042:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007044:	e044      	b.n	80070d0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007046:	4b26      	ldr	r3, [pc, #152]	@ (80070e0 <vTaskSwitchContext+0xb0>)
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800704c:	4b25      	ldr	r3, [pc, #148]	@ (80070e4 <vTaskSwitchContext+0xb4>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	60fb      	str	r3, [r7, #12]
 8007052:	e013      	b.n	800707c <vTaskSwitchContext+0x4c>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10d      	bne.n	8007076 <vTaskSwitchContext+0x46>
	__asm volatile
 800705a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705e:	b672      	cpsid	i
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	b662      	cpsie	i
 800706e:	607b      	str	r3, [r7, #4]
}
 8007070:	bf00      	nop
 8007072:	bf00      	nop
 8007074:	e7fd      	b.n	8007072 <vTaskSwitchContext+0x42>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3b01      	subs	r3, #1
 800707a:	60fb      	str	r3, [r7, #12]
 800707c:	491a      	ldr	r1, [pc, #104]	@ (80070e8 <vTaskSwitchContext+0xb8>)
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	4613      	mov	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	440b      	add	r3, r1
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d0e1      	beq.n	8007054 <vTaskSwitchContext+0x24>
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	4613      	mov	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4a13      	ldr	r2, [pc, #76]	@ (80070e8 <vTaskSwitchContext+0xb8>)
 800709c:	4413      	add	r3, r2
 800709e:	60bb      	str	r3, [r7, #8]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	605a      	str	r2, [r3, #4]
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	685a      	ldr	r2, [r3, #4]
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	3308      	adds	r3, #8
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d104      	bne.n	80070c0 <vTaskSwitchContext+0x90>
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	605a      	str	r2, [r3, #4]
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	4a09      	ldr	r2, [pc, #36]	@ (80070ec <vTaskSwitchContext+0xbc>)
 80070c8:	6013      	str	r3, [r2, #0]
 80070ca:	4a06      	ldr	r2, [pc, #24]	@ (80070e4 <vTaskSwitchContext+0xb4>)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6013      	str	r3, [r2, #0]
}
 80070d0:	bf00      	nop
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	20000ed0 	.word	0x20000ed0
 80070e0:	20000ebc 	.word	0x20000ebc
 80070e4:	20000eb0 	.word	0x20000eb0
 80070e8:	200009d8 	.word	0x200009d8
 80070ec:	200009d4 	.word	0x200009d4

080070f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10d      	bne.n	800711c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007104:	b672      	cpsid	i
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	b662      	cpsie	i
 8007114:	60fb      	str	r3, [r7, #12]
}
 8007116:	bf00      	nop
 8007118:	bf00      	nop
 800711a:	e7fd      	b.n	8007118 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800711c:	4b07      	ldr	r3, [pc, #28]	@ (800713c <vTaskPlaceOnEventList+0x4c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3318      	adds	r3, #24
 8007122:	4619      	mov	r1, r3
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7fe fae0 	bl	80056ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800712a:	2101      	movs	r1, #1
 800712c:	6838      	ldr	r0, [r7, #0]
 800712e:	f000 fb93 	bl	8007858 <prvAddCurrentTaskToDelayedList>
}
 8007132:	bf00      	nop
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	200009d4 	.word	0x200009d4

08007140 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10d      	bne.n	800716e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8007152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007156:	b672      	cpsid	i
 8007158:	f383 8811 	msr	BASEPRI, r3
 800715c:	f3bf 8f6f 	isb	sy
 8007160:	f3bf 8f4f 	dsb	sy
 8007164:	b662      	cpsie	i
 8007166:	617b      	str	r3, [r7, #20]
}
 8007168:	bf00      	nop
 800716a:	bf00      	nop
 800716c:	e7fd      	b.n	800716a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800716e:	4b0a      	ldr	r3, [pc, #40]	@ (8007198 <vTaskPlaceOnEventListRestricted+0x58>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3318      	adds	r3, #24
 8007174:	4619      	mov	r1, r3
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f7fe fa93 	bl	80056a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8007182:	f04f 33ff 	mov.w	r3, #4294967295
 8007186:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007188:	6879      	ldr	r1, [r7, #4]
 800718a:	68b8      	ldr	r0, [r7, #8]
 800718c:	f000 fb64 	bl	8007858 <prvAddCurrentTaskToDelayedList>
	}
 8007190:	bf00      	nop
 8007192:	3718      	adds	r7, #24
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	200009d4 	.word	0x200009d4

0800719c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10d      	bne.n	80071ce <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80071b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b6:	b672      	cpsid	i
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	b662      	cpsie	i
 80071c6:	60fb      	str	r3, [r7, #12]
}
 80071c8:	bf00      	nop
 80071ca:	bf00      	nop
 80071cc:	e7fd      	b.n	80071ca <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	3318      	adds	r3, #24
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fe fac2 	bl	800575c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071d8:	4b1d      	ldr	r3, [pc, #116]	@ (8007250 <xTaskRemoveFromEventList+0xb4>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d11d      	bne.n	800721c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	3304      	adds	r3, #4
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7fe fab9 	bl	800575c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ee:	4b19      	ldr	r3, [pc, #100]	@ (8007254 <xTaskRemoveFromEventList+0xb8>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d903      	bls.n	80071fe <xTaskRemoveFromEventList+0x62>
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071fa:	4a16      	ldr	r2, [pc, #88]	@ (8007254 <xTaskRemoveFromEventList+0xb8>)
 80071fc:	6013      	str	r3, [r2, #0]
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007202:	4613      	mov	r3, r2
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	4413      	add	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4a13      	ldr	r2, [pc, #76]	@ (8007258 <xTaskRemoveFromEventList+0xbc>)
 800720c:	441a      	add	r2, r3
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	3304      	adds	r3, #4
 8007212:	4619      	mov	r1, r3
 8007214:	4610      	mov	r0, r2
 8007216:	f7fe fa44 	bl	80056a2 <vListInsertEnd>
 800721a:	e005      	b.n	8007228 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	3318      	adds	r3, #24
 8007220:	4619      	mov	r1, r3
 8007222:	480e      	ldr	r0, [pc, #56]	@ (800725c <xTaskRemoveFromEventList+0xc0>)
 8007224:	f7fe fa3d 	bl	80056a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800722c:	4b0c      	ldr	r3, [pc, #48]	@ (8007260 <xTaskRemoveFromEventList+0xc4>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007232:	429a      	cmp	r2, r3
 8007234:	d905      	bls.n	8007242 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007236:	2301      	movs	r3, #1
 8007238:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800723a:	4b0a      	ldr	r3, [pc, #40]	@ (8007264 <xTaskRemoveFromEventList+0xc8>)
 800723c:	2201      	movs	r2, #1
 800723e:	601a      	str	r2, [r3, #0]
 8007240:	e001      	b.n	8007246 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8007242:	2300      	movs	r3, #0
 8007244:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007246:	697b      	ldr	r3, [r7, #20]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3718      	adds	r7, #24
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20000ed0 	.word	0x20000ed0
 8007254:	20000eb0 	.word	0x20000eb0
 8007258:	200009d8 	.word	0x200009d8
 800725c:	20000e68 	.word	0x20000e68
 8007260:	200009d4 	.word	0x200009d4
 8007264:	20000ebc 	.word	0x20000ebc

08007268 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007270:	4b06      	ldr	r3, [pc, #24]	@ (800728c <vTaskInternalSetTimeOutState+0x24>)
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007278:	4b05      	ldr	r3, [pc, #20]	@ (8007290 <vTaskInternalSetTimeOutState+0x28>)
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	605a      	str	r2, [r3, #4]
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	20000ec0 	.word	0x20000ec0
 8007290:	20000eac 	.word	0x20000eac

08007294 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b088      	sub	sp, #32
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10d      	bne.n	80072c0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80072a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a8:	b672      	cpsid	i
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	b662      	cpsie	i
 80072b8:	613b      	str	r3, [r7, #16]
}
 80072ba:	bf00      	nop
 80072bc:	bf00      	nop
 80072be:	e7fd      	b.n	80072bc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10d      	bne.n	80072e2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80072c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ca:	b672      	cpsid	i
 80072cc:	f383 8811 	msr	BASEPRI, r3
 80072d0:	f3bf 8f6f 	isb	sy
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	b662      	cpsie	i
 80072da:	60fb      	str	r3, [r7, #12]
}
 80072dc:	bf00      	nop
 80072de:	bf00      	nop
 80072e0:	e7fd      	b.n	80072de <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80072e2:	f000 ff83 	bl	80081ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80072e6:	4b1d      	ldr	r3, [pc, #116]	@ (800735c <xTaskCheckForTimeOut+0xc8>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	69ba      	ldr	r2, [r7, #24]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fe:	d102      	bne.n	8007306 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007300:	2300      	movs	r3, #0
 8007302:	61fb      	str	r3, [r7, #28]
 8007304:	e023      	b.n	800734e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	4b15      	ldr	r3, [pc, #84]	@ (8007360 <xTaskCheckForTimeOut+0xcc>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	429a      	cmp	r2, r3
 8007310:	d007      	beq.n	8007322 <xTaskCheckForTimeOut+0x8e>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	429a      	cmp	r2, r3
 800731a:	d302      	bcc.n	8007322 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800731c:	2301      	movs	r3, #1
 800731e:	61fb      	str	r3, [r7, #28]
 8007320:	e015      	b.n	800734e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	429a      	cmp	r2, r3
 800732a:	d20b      	bcs.n	8007344 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	1ad2      	subs	r2, r2, r3
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7ff ff95 	bl	8007268 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800733e:	2300      	movs	r3, #0
 8007340:	61fb      	str	r3, [r7, #28]
 8007342:	e004      	b.n	800734e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	2200      	movs	r2, #0
 8007348:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800734a:	2301      	movs	r3, #1
 800734c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800734e:	f000 ff83 	bl	8008258 <vPortExitCritical>

	return xReturn;
 8007352:	69fb      	ldr	r3, [r7, #28]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3720      	adds	r7, #32
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	20000eac 	.word	0x20000eac
 8007360:	20000ec0 	.word	0x20000ec0

08007364 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007364:	b480      	push	{r7}
 8007366:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007368:	4b03      	ldr	r3, [pc, #12]	@ (8007378 <vTaskMissedYield+0x14>)
 800736a:	2201      	movs	r2, #1
 800736c:	601a      	str	r2, [r3, #0]
}
 800736e:	bf00      	nop
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr
 8007378:	20000ebc 	.word	0x20000ebc

0800737c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007384:	f000 f852 	bl	800742c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007388:	4b06      	ldr	r3, [pc, #24]	@ (80073a4 <prvIdleTask+0x28>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d9f9      	bls.n	8007384 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007390:	4b05      	ldr	r3, [pc, #20]	@ (80073a8 <prvIdleTask+0x2c>)
 8007392:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007396:	601a      	str	r2, [r3, #0]
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80073a0:	e7f0      	b.n	8007384 <prvIdleTask+0x8>
 80073a2:	bf00      	nop
 80073a4:	200009d8 	.word	0x200009d8
 80073a8:	e000ed04 	.word	0xe000ed04

080073ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073b2:	2300      	movs	r3, #0
 80073b4:	607b      	str	r3, [r7, #4]
 80073b6:	e00c      	b.n	80073d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	4613      	mov	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	4413      	add	r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	4a12      	ldr	r2, [pc, #72]	@ (800740c <prvInitialiseTaskLists+0x60>)
 80073c4:	4413      	add	r3, r2
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fe f93e 	bl	8005648 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3301      	adds	r3, #1
 80073d0:	607b      	str	r3, [r7, #4]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2b37      	cmp	r3, #55	@ 0x37
 80073d6:	d9ef      	bls.n	80073b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80073d8:	480d      	ldr	r0, [pc, #52]	@ (8007410 <prvInitialiseTaskLists+0x64>)
 80073da:	f7fe f935 	bl	8005648 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80073de:	480d      	ldr	r0, [pc, #52]	@ (8007414 <prvInitialiseTaskLists+0x68>)
 80073e0:	f7fe f932 	bl	8005648 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80073e4:	480c      	ldr	r0, [pc, #48]	@ (8007418 <prvInitialiseTaskLists+0x6c>)
 80073e6:	f7fe f92f 	bl	8005648 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80073ea:	480c      	ldr	r0, [pc, #48]	@ (800741c <prvInitialiseTaskLists+0x70>)
 80073ec:	f7fe f92c 	bl	8005648 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80073f0:	480b      	ldr	r0, [pc, #44]	@ (8007420 <prvInitialiseTaskLists+0x74>)
 80073f2:	f7fe f929 	bl	8005648 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80073f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007424 <prvInitialiseTaskLists+0x78>)
 80073f8:	4a05      	ldr	r2, [pc, #20]	@ (8007410 <prvInitialiseTaskLists+0x64>)
 80073fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80073fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007428 <prvInitialiseTaskLists+0x7c>)
 80073fe:	4a05      	ldr	r2, [pc, #20]	@ (8007414 <prvInitialiseTaskLists+0x68>)
 8007400:	601a      	str	r2, [r3, #0]
}
 8007402:	bf00      	nop
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	200009d8 	.word	0x200009d8
 8007410:	20000e38 	.word	0x20000e38
 8007414:	20000e4c 	.word	0x20000e4c
 8007418:	20000e68 	.word	0x20000e68
 800741c:	20000e7c 	.word	0x20000e7c
 8007420:	20000e94 	.word	0x20000e94
 8007424:	20000e60 	.word	0x20000e60
 8007428:	20000e64 	.word	0x20000e64

0800742c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007432:	e019      	b.n	8007468 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007434:	f000 feda 	bl	80081ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007438:	4b10      	ldr	r3, [pc, #64]	@ (800747c <prvCheckTasksWaitingTermination+0x50>)
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	3304      	adds	r3, #4
 8007444:	4618      	mov	r0, r3
 8007446:	f7fe f989 	bl	800575c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800744a:	4b0d      	ldr	r3, [pc, #52]	@ (8007480 <prvCheckTasksWaitingTermination+0x54>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3b01      	subs	r3, #1
 8007450:	4a0b      	ldr	r2, [pc, #44]	@ (8007480 <prvCheckTasksWaitingTermination+0x54>)
 8007452:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007454:	4b0b      	ldr	r3, [pc, #44]	@ (8007484 <prvCheckTasksWaitingTermination+0x58>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	3b01      	subs	r3, #1
 800745a:	4a0a      	ldr	r2, [pc, #40]	@ (8007484 <prvCheckTasksWaitingTermination+0x58>)
 800745c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800745e:	f000 fefb 	bl	8008258 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f810 	bl	8007488 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007468:	4b06      	ldr	r3, [pc, #24]	@ (8007484 <prvCheckTasksWaitingTermination+0x58>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1e1      	bne.n	8007434 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007470:	bf00      	nop
 8007472:	bf00      	nop
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	20000e7c 	.word	0x20000e7c
 8007480:	20000ea8 	.word	0x20000ea8
 8007484:	20000e90 	.word	0x20000e90

08007488 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007496:	2b00      	cmp	r3, #0
 8007498:	d108      	bne.n	80074ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800749e:	4618      	mov	r0, r3
 80074a0:	f001 f8a0 	bl	80085e4 <vPortFree>
				vPortFree( pxTCB );
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f001 f89d 	bl	80085e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80074aa:	e01b      	b.n	80074e4 <prvDeleteTCB+0x5c>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d103      	bne.n	80074be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f001 f894 	bl	80085e4 <vPortFree>
	}
 80074bc:	e012      	b.n	80074e4 <prvDeleteTCB+0x5c>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	d00d      	beq.n	80074e4 <prvDeleteTCB+0x5c>
	__asm volatile
 80074c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074cc:	b672      	cpsid	i
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	b662      	cpsie	i
 80074dc:	60fb      	str	r3, [r7, #12]
}
 80074de:	bf00      	nop
 80074e0:	bf00      	nop
 80074e2:	e7fd      	b.n	80074e0 <prvDeleteTCB+0x58>
	}
 80074e4:	bf00      	nop
 80074e6:	3710      	adds	r7, #16
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007524 <prvResetNextTaskUnblockTime+0x38>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d104      	bne.n	8007506 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80074fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007528 <prvResetNextTaskUnblockTime+0x3c>)
 80074fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007502:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007504:	e008      	b.n	8007518 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007506:	4b07      	ldr	r3, [pc, #28]	@ (8007524 <prvResetNextTaskUnblockTime+0x38>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	4a04      	ldr	r2, [pc, #16]	@ (8007528 <prvResetNextTaskUnblockTime+0x3c>)
 8007516:	6013      	str	r3, [r2, #0]
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	20000e60 	.word	0x20000e60
 8007528:	20000ec8 	.word	0x20000ec8

0800752c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007532:	4b0b      	ldr	r3, [pc, #44]	@ (8007560 <xTaskGetSchedulerState+0x34>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d102      	bne.n	8007540 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800753a:	2301      	movs	r3, #1
 800753c:	607b      	str	r3, [r7, #4]
 800753e:	e008      	b.n	8007552 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007540:	4b08      	ldr	r3, [pc, #32]	@ (8007564 <xTaskGetSchedulerState+0x38>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d102      	bne.n	800754e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007548:	2302      	movs	r3, #2
 800754a:	607b      	str	r3, [r7, #4]
 800754c:	e001      	b.n	8007552 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800754e:	2300      	movs	r3, #0
 8007550:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007552:	687b      	ldr	r3, [r7, #4]
	}
 8007554:	4618      	mov	r0, r3
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	20000eb4 	.word	0x20000eb4
 8007564:	20000ed0 	.word	0x20000ed0

08007568 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007574:	2300      	movs	r3, #0
 8007576:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d051      	beq.n	8007622 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007582:	4b2a      	ldr	r3, [pc, #168]	@ (800762c <xTaskPriorityInherit+0xc4>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007588:	429a      	cmp	r2, r3
 800758a:	d241      	bcs.n	8007610 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	2b00      	cmp	r3, #0
 8007592:	db06      	blt.n	80075a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007594:	4b25      	ldr	r3, [pc, #148]	@ (800762c <xTaskPriorityInherit+0xc4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	6959      	ldr	r1, [r3, #20]
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075aa:	4613      	mov	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	4413      	add	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4a1f      	ldr	r2, [pc, #124]	@ (8007630 <xTaskPriorityInherit+0xc8>)
 80075b4:	4413      	add	r3, r2
 80075b6:	4299      	cmp	r1, r3
 80075b8:	d122      	bne.n	8007600 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	3304      	adds	r3, #4
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fe f8cc 	bl	800575c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80075c4:	4b19      	ldr	r3, [pc, #100]	@ (800762c <xTaskPriorityInherit+0xc4>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075d2:	4b18      	ldr	r3, [pc, #96]	@ (8007634 <xTaskPriorityInherit+0xcc>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d903      	bls.n	80075e2 <xTaskPriorityInherit+0x7a>
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075de:	4a15      	ldr	r2, [pc, #84]	@ (8007634 <xTaskPriorityInherit+0xcc>)
 80075e0:	6013      	str	r3, [r2, #0]
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075e6:	4613      	mov	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4a10      	ldr	r2, [pc, #64]	@ (8007630 <xTaskPriorityInherit+0xc8>)
 80075f0:	441a      	add	r2, r3
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	3304      	adds	r3, #4
 80075f6:	4619      	mov	r1, r3
 80075f8:	4610      	mov	r0, r2
 80075fa:	f7fe f852 	bl	80056a2 <vListInsertEnd>
 80075fe:	e004      	b.n	800760a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007600:	4b0a      	ldr	r3, [pc, #40]	@ (800762c <xTaskPriorityInherit+0xc4>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800760a:	2301      	movs	r3, #1
 800760c:	60fb      	str	r3, [r7, #12]
 800760e:	e008      	b.n	8007622 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007614:	4b05      	ldr	r3, [pc, #20]	@ (800762c <xTaskPriorityInherit+0xc4>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800761a:	429a      	cmp	r2, r3
 800761c:	d201      	bcs.n	8007622 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800761e:	2301      	movs	r3, #1
 8007620:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007622:	68fb      	ldr	r3, [r7, #12]
	}
 8007624:	4618      	mov	r0, r3
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	200009d4 	.word	0x200009d4
 8007630:	200009d8 	.word	0x200009d8
 8007634:	20000eb0 	.word	0x20000eb0

08007638 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007644:	2300      	movs	r3, #0
 8007646:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d05c      	beq.n	8007708 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800764e:	4b31      	ldr	r3, [pc, #196]	@ (8007714 <xTaskPriorityDisinherit+0xdc>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	693a      	ldr	r2, [r7, #16]
 8007654:	429a      	cmp	r2, r3
 8007656:	d00d      	beq.n	8007674 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800765c:	b672      	cpsid	i
 800765e:	f383 8811 	msr	BASEPRI, r3
 8007662:	f3bf 8f6f 	isb	sy
 8007666:	f3bf 8f4f 	dsb	sy
 800766a:	b662      	cpsie	i
 800766c:	60fb      	str	r3, [r7, #12]
}
 800766e:	bf00      	nop
 8007670:	bf00      	nop
 8007672:	e7fd      	b.n	8007670 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10d      	bne.n	8007698 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800767c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007680:	b672      	cpsid	i
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	b662      	cpsie	i
 8007690:	60bb      	str	r3, [r7, #8]
}
 8007692:	bf00      	nop
 8007694:	bf00      	nop
 8007696:	e7fd      	b.n	8007694 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800769c:	1e5a      	subs	r2, r3, #1
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d02c      	beq.n	8007708 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d128      	bne.n	8007708 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	3304      	adds	r3, #4
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7fe f84e 	bl	800575c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076d8:	4b0f      	ldr	r3, [pc, #60]	@ (8007718 <xTaskPriorityDisinherit+0xe0>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d903      	bls.n	80076e8 <xTaskPriorityDisinherit+0xb0>
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e4:	4a0c      	ldr	r2, [pc, #48]	@ (8007718 <xTaskPriorityDisinherit+0xe0>)
 80076e6:	6013      	str	r3, [r2, #0]
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ec:	4613      	mov	r3, r2
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4a09      	ldr	r2, [pc, #36]	@ (800771c <xTaskPriorityDisinherit+0xe4>)
 80076f6:	441a      	add	r2, r3
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	3304      	adds	r3, #4
 80076fc:	4619      	mov	r1, r3
 80076fe:	4610      	mov	r0, r2
 8007700:	f7fd ffcf 	bl	80056a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007704:	2301      	movs	r3, #1
 8007706:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007708:	697b      	ldr	r3, [r7, #20]
	}
 800770a:	4618      	mov	r0, r3
 800770c:	3718      	adds	r7, #24
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	200009d4 	.word	0x200009d4
 8007718:	20000eb0 	.word	0x20000eb0
 800771c:	200009d8 	.word	0x200009d8

08007720 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007720:	b580      	push	{r7, lr}
 8007722:	b088      	sub	sp, #32
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800772e:	2301      	movs	r3, #1
 8007730:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d070      	beq.n	800781a <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10d      	bne.n	800775c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007744:	b672      	cpsid	i
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	b662      	cpsie	i
 8007754:	60fb      	str	r3, [r7, #12]
}
 8007756:	bf00      	nop
 8007758:	bf00      	nop
 800775a:	e7fd      	b.n	8007758 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007760:	683a      	ldr	r2, [r7, #0]
 8007762:	429a      	cmp	r2, r3
 8007764:	d902      	bls.n	800776c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	61fb      	str	r3, [r7, #28]
 800776a:	e002      	b.n	8007772 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007770:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007776:	69fa      	ldr	r2, [r7, #28]
 8007778:	429a      	cmp	r2, r3
 800777a:	d04e      	beq.n	800781a <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	429a      	cmp	r2, r3
 8007784:	d149      	bne.n	800781a <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007786:	4b27      	ldr	r3, [pc, #156]	@ (8007824 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	69ba      	ldr	r2, [r7, #24]
 800778c:	429a      	cmp	r2, r3
 800778e:	d10d      	bne.n	80077ac <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8007790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007794:	b672      	cpsid	i
 8007796:	f383 8811 	msr	BASEPRI, r3
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	f3bf 8f4f 	dsb	sy
 80077a2:	b662      	cpsie	i
 80077a4:	60bb      	str	r3, [r7, #8]
}
 80077a6:	bf00      	nop
 80077a8:	bf00      	nop
 80077aa:	e7fd      	b.n	80077a8 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	69fa      	ldr	r2, [r7, #28]
 80077b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	db04      	blt.n	80077ca <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	6959      	ldr	r1, [r3, #20]
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	4613      	mov	r3, r2
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	4413      	add	r3, r2
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4a13      	ldr	r2, [pc, #76]	@ (8007828 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80077da:	4413      	add	r3, r2
 80077dc:	4299      	cmp	r1, r3
 80077de:	d11c      	bne.n	800781a <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	3304      	adds	r3, #4
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fd ffb9 	bl	800575c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ee:	4b0f      	ldr	r3, [pc, #60]	@ (800782c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d903      	bls.n	80077fe <vTaskPriorityDisinheritAfterTimeout+0xde>
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077fa:	4a0c      	ldr	r2, [pc, #48]	@ (800782c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80077fc:	6013      	str	r3, [r2, #0]
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007802:	4613      	mov	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4a07      	ldr	r2, [pc, #28]	@ (8007828 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800780c:	441a      	add	r2, r3
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	3304      	adds	r3, #4
 8007812:	4619      	mov	r1, r3
 8007814:	4610      	mov	r0, r2
 8007816:	f7fd ff44 	bl	80056a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800781a:	bf00      	nop
 800781c:	3720      	adds	r7, #32
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	200009d4 	.word	0x200009d4
 8007828:	200009d8 	.word	0x200009d8
 800782c:	20000eb0 	.word	0x20000eb0

08007830 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007830:	b480      	push	{r7}
 8007832:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007834:	4b07      	ldr	r3, [pc, #28]	@ (8007854 <pvTaskIncrementMutexHeldCount+0x24>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d004      	beq.n	8007846 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800783c:	4b05      	ldr	r3, [pc, #20]	@ (8007854 <pvTaskIncrementMutexHeldCount+0x24>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007842:	3201      	adds	r2, #1
 8007844:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007846:	4b03      	ldr	r3, [pc, #12]	@ (8007854 <pvTaskIncrementMutexHeldCount+0x24>)
 8007848:	681b      	ldr	r3, [r3, #0]
	}
 800784a:	4618      	mov	r0, r3
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr
 8007854:	200009d4 	.word	0x200009d4

08007858 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007862:	4b21      	ldr	r3, [pc, #132]	@ (80078e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007868:	4b20      	ldr	r3, [pc, #128]	@ (80078ec <prvAddCurrentTaskToDelayedList+0x94>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3304      	adds	r3, #4
 800786e:	4618      	mov	r0, r3
 8007870:	f7fd ff74 	bl	800575c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787a:	d10a      	bne.n	8007892 <prvAddCurrentTaskToDelayedList+0x3a>
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d007      	beq.n	8007892 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007882:	4b1a      	ldr	r3, [pc, #104]	@ (80078ec <prvAddCurrentTaskToDelayedList+0x94>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3304      	adds	r3, #4
 8007888:	4619      	mov	r1, r3
 800788a:	4819      	ldr	r0, [pc, #100]	@ (80078f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800788c:	f7fd ff09 	bl	80056a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007890:	e026      	b.n	80078e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4413      	add	r3, r2
 8007898:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800789a:	4b14      	ldr	r3, [pc, #80]	@ (80078ec <prvAddCurrentTaskToDelayedList+0x94>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078a2:	68ba      	ldr	r2, [r7, #8]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d209      	bcs.n	80078be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078aa:	4b12      	ldr	r3, [pc, #72]	@ (80078f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80078ac:	681a      	ldr	r2, [r3, #0]
 80078ae:	4b0f      	ldr	r3, [pc, #60]	@ (80078ec <prvAddCurrentTaskToDelayedList+0x94>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3304      	adds	r3, #4
 80078b4:	4619      	mov	r1, r3
 80078b6:	4610      	mov	r0, r2
 80078b8:	f7fd ff17 	bl	80056ea <vListInsert>
}
 80078bc:	e010      	b.n	80078e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078be:	4b0e      	ldr	r3, [pc, #56]	@ (80078f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	4b0a      	ldr	r3, [pc, #40]	@ (80078ec <prvAddCurrentTaskToDelayedList+0x94>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3304      	adds	r3, #4
 80078c8:	4619      	mov	r1, r3
 80078ca:	4610      	mov	r0, r2
 80078cc:	f7fd ff0d 	bl	80056ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078d0:	4b0a      	ldr	r3, [pc, #40]	@ (80078fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68ba      	ldr	r2, [r7, #8]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d202      	bcs.n	80078e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80078da:	4a08      	ldr	r2, [pc, #32]	@ (80078fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	6013      	str	r3, [r2, #0]
}
 80078e0:	bf00      	nop
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	20000eac 	.word	0x20000eac
 80078ec:	200009d4 	.word	0x200009d4
 80078f0:	20000e94 	.word	0x20000e94
 80078f4:	20000e64 	.word	0x20000e64
 80078f8:	20000e60 	.word	0x20000e60
 80078fc:	20000ec8 	.word	0x20000ec8

08007900 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b08a      	sub	sp, #40	@ 0x28
 8007904:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007906:	2300      	movs	r3, #0
 8007908:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800790a:	f000 fb21 	bl	8007f50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800790e:	4b1e      	ldr	r3, [pc, #120]	@ (8007988 <xTimerCreateTimerTask+0x88>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d021      	beq.n	800795a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007916:	2300      	movs	r3, #0
 8007918:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800791a:	2300      	movs	r3, #0
 800791c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800791e:	1d3a      	adds	r2, r7, #4
 8007920:	f107 0108 	add.w	r1, r7, #8
 8007924:	f107 030c 	add.w	r3, r7, #12
 8007928:	4618      	mov	r0, r3
 800792a:	f7fd fe73 	bl	8005614 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800792e:	6879      	ldr	r1, [r7, #4]
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	9202      	str	r2, [sp, #8]
 8007936:	9301      	str	r3, [sp, #4]
 8007938:	2302      	movs	r3, #2
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	2300      	movs	r3, #0
 800793e:	460a      	mov	r2, r1
 8007940:	4912      	ldr	r1, [pc, #72]	@ (800798c <xTimerCreateTimerTask+0x8c>)
 8007942:	4813      	ldr	r0, [pc, #76]	@ (8007990 <xTimerCreateTimerTask+0x90>)
 8007944:	f7fe ffa8 	bl	8006898 <xTaskCreateStatic>
 8007948:	4603      	mov	r3, r0
 800794a:	4a12      	ldr	r2, [pc, #72]	@ (8007994 <xTimerCreateTimerTask+0x94>)
 800794c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800794e:	4b11      	ldr	r3, [pc, #68]	@ (8007994 <xTimerCreateTimerTask+0x94>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d001      	beq.n	800795a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007956:	2301      	movs	r3, #1
 8007958:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10d      	bne.n	800797c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007964:	b672      	cpsid	i
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	b662      	cpsie	i
 8007974:	613b      	str	r3, [r7, #16]
}
 8007976:	bf00      	nop
 8007978:	bf00      	nop
 800797a:	e7fd      	b.n	8007978 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800797c:	697b      	ldr	r3, [r7, #20]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3718      	adds	r7, #24
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	20000f04 	.word	0x20000f04
 800798c:	08008b5c 	.word	0x08008b5c
 8007990:	08007ad9 	.word	0x08007ad9
 8007994:	20000f08 	.word	0x20000f08

08007998 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b08a      	sub	sp, #40	@ 0x28
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
 80079a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80079a6:	2300      	movs	r3, #0
 80079a8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10d      	bne.n	80079cc <xTimerGenericCommand+0x34>
	__asm volatile
 80079b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b4:	b672      	cpsid	i
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	b662      	cpsie	i
 80079c4:	623b      	str	r3, [r7, #32]
}
 80079c6:	bf00      	nop
 80079c8:	bf00      	nop
 80079ca:	e7fd      	b.n	80079c8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80079cc:	4b19      	ldr	r3, [pc, #100]	@ (8007a34 <xTimerGenericCommand+0x9c>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d02a      	beq.n	8007a2a <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2b05      	cmp	r3, #5
 80079e4:	dc18      	bgt.n	8007a18 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80079e6:	f7ff fda1 	bl	800752c <xTaskGetSchedulerState>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b02      	cmp	r3, #2
 80079ee:	d109      	bne.n	8007a04 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80079f0:	4b10      	ldr	r3, [pc, #64]	@ (8007a34 <xTimerGenericCommand+0x9c>)
 80079f2:	6818      	ldr	r0, [r3, #0]
 80079f4:	f107 0110 	add.w	r1, r7, #16
 80079f8:	2300      	movs	r3, #0
 80079fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079fc:	f7fe f8a8 	bl	8005b50 <xQueueGenericSend>
 8007a00:	6278      	str	r0, [r7, #36]	@ 0x24
 8007a02:	e012      	b.n	8007a2a <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a04:	4b0b      	ldr	r3, [pc, #44]	@ (8007a34 <xTimerGenericCommand+0x9c>)
 8007a06:	6818      	ldr	r0, [r3, #0]
 8007a08:	f107 0110 	add.w	r1, r7, #16
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f7fe f89e 	bl	8005b50 <xQueueGenericSend>
 8007a14:	6278      	str	r0, [r7, #36]	@ 0x24
 8007a16:	e008      	b.n	8007a2a <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a18:	4b06      	ldr	r3, [pc, #24]	@ (8007a34 <xTimerGenericCommand+0x9c>)
 8007a1a:	6818      	ldr	r0, [r3, #0]
 8007a1c:	f107 0110 	add.w	r1, r7, #16
 8007a20:	2300      	movs	r3, #0
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	f7fe f99e 	bl	8005d64 <xQueueGenericSendFromISR>
 8007a28:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3728      	adds	r7, #40	@ 0x28
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	20000f04 	.word	0x20000f04

08007a38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b088      	sub	sp, #32
 8007a3c:	af02      	add	r7, sp, #8
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a42:	4b24      	ldr	r3, [pc, #144]	@ (8007ad4 <prvProcessExpiredTimer+0x9c>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	3304      	adds	r3, #4
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7fd fe83 	bl	800575c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a5c:	f003 0304 	and.w	r3, r3, #4
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d025      	beq.n	8007ab0 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	699a      	ldr	r2, [r3, #24]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	18d1      	adds	r1, r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	683a      	ldr	r2, [r7, #0]
 8007a70:	6978      	ldr	r0, [r7, #20]
 8007a72:	f000 f8d7 	bl	8007c24 <prvInsertTimerInActiveList>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d022      	beq.n	8007ac2 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	2300      	movs	r3, #0
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	2100      	movs	r1, #0
 8007a86:	6978      	ldr	r0, [r7, #20]
 8007a88:	f7ff ff86 	bl	8007998 <xTimerGenericCommand>
 8007a8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d116      	bne.n	8007ac2 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a98:	b672      	cpsid	i
 8007a9a:	f383 8811 	msr	BASEPRI, r3
 8007a9e:	f3bf 8f6f 	isb	sy
 8007aa2:	f3bf 8f4f 	dsb	sy
 8007aa6:	b662      	cpsie	i
 8007aa8:	60fb      	str	r3, [r7, #12]
}
 8007aaa:	bf00      	nop
 8007aac:	bf00      	nop
 8007aae:	e7fd      	b.n	8007aac <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ab6:	f023 0301 	bic.w	r3, r3, #1
 8007aba:	b2da      	uxtb	r2, r3
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	6978      	ldr	r0, [r7, #20]
 8007ac8:	4798      	blx	r3
}
 8007aca:	bf00      	nop
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20000efc 	.word	0x20000efc

08007ad8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ae0:	f107 0308 	add.w	r3, r7, #8
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f000 f859 	bl	8007b9c <prvGetNextExpireTime>
 8007aea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	4619      	mov	r1, r3
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 f805 	bl	8007b00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007af6:	f000 f8d7 	bl	8007ca8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007afa:	bf00      	nop
 8007afc:	e7f0      	b.n	8007ae0 <prvTimerTask+0x8>
	...

08007b00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b0a:	f7ff f917 	bl	8006d3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b0e:	f107 0308 	add.w	r3, r7, #8
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 f866 	bl	8007be4 <prvSampleTimeNow>
 8007b18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d130      	bne.n	8007b82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10a      	bne.n	8007b3c <prvProcessTimerOrBlockTask+0x3c>
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d806      	bhi.n	8007b3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b2e:	f7ff f913 	bl	8006d58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b32:	68f9      	ldr	r1, [r7, #12]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f7ff ff7f 	bl	8007a38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b3a:	e024      	b.n	8007b86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d008      	beq.n	8007b54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b42:	4b13      	ldr	r3, [pc, #76]	@ (8007b90 <prvProcessTimerOrBlockTask+0x90>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d101      	bne.n	8007b50 <prvProcessTimerOrBlockTask+0x50>
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e000      	b.n	8007b52 <prvProcessTimerOrBlockTask+0x52>
 8007b50:	2300      	movs	r3, #0
 8007b52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b54:	4b0f      	ldr	r3, [pc, #60]	@ (8007b94 <prvProcessTimerOrBlockTask+0x94>)
 8007b56:	6818      	ldr	r0, [r3, #0]
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	4619      	mov	r1, r3
 8007b62:	f7fe fe65 	bl	8006830 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b66:	f7ff f8f7 	bl	8006d58 <xTaskResumeAll>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10a      	bne.n	8007b86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007b70:	4b09      	ldr	r3, [pc, #36]	@ (8007b98 <prvProcessTimerOrBlockTask+0x98>)
 8007b72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	f3bf 8f6f 	isb	sy
}
 8007b80:	e001      	b.n	8007b86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007b82:	f7ff f8e9 	bl	8006d58 <xTaskResumeAll>
}
 8007b86:	bf00      	nop
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	20000f00 	.word	0x20000f00
 8007b94:	20000f04 	.word	0x20000f04
 8007b98:	e000ed04 	.word	0xe000ed04

08007b9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8007be0 <prvGetNextExpireTime+0x44>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <prvGetNextExpireTime+0x16>
 8007bae:	2201      	movs	r2, #1
 8007bb0:	e000      	b.n	8007bb4 <prvGetNextExpireTime+0x18>
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d105      	bne.n	8007bcc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bc0:	4b07      	ldr	r3, [pc, #28]	@ (8007be0 <prvGetNextExpireTime+0x44>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	60fb      	str	r3, [r7, #12]
 8007bca:	e001      	b.n	8007bd0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	20000efc 	.word	0x20000efc

08007be4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007bec:	f7ff f954 	bl	8006e98 <xTaskGetTickCount>
 8007bf0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8007c20 <prvSampleTimeNow+0x3c>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d205      	bcs.n	8007c08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007bfc:	f000 f940 	bl	8007e80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	601a      	str	r2, [r3, #0]
 8007c06:	e002      	b.n	8007c0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007c0e:	4a04      	ldr	r2, [pc, #16]	@ (8007c20 <prvSampleTimeNow+0x3c>)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c14:	68fb      	ldr	r3, [r7, #12]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	20000f0c 	.word	0x20000f0c

08007c24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
 8007c30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c32:	2300      	movs	r3, #0
 8007c34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d812      	bhi.n	8007c70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	1ad2      	subs	r2, r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d302      	bcc.n	8007c5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	617b      	str	r3, [r7, #20]
 8007c5c:	e01b      	b.n	8007c96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c5e:	4b10      	ldr	r3, [pc, #64]	@ (8007ca0 <prvInsertTimerInActiveList+0x7c>)
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	3304      	adds	r3, #4
 8007c66:	4619      	mov	r1, r3
 8007c68:	4610      	mov	r0, r2
 8007c6a:	f7fd fd3e 	bl	80056ea <vListInsert>
 8007c6e:	e012      	b.n	8007c96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d206      	bcs.n	8007c86 <prvInsertTimerInActiveList+0x62>
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d302      	bcc.n	8007c86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c80:	2301      	movs	r3, #1
 8007c82:	617b      	str	r3, [r7, #20]
 8007c84:	e007      	b.n	8007c96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c86:	4b07      	ldr	r3, [pc, #28]	@ (8007ca4 <prvInsertTimerInActiveList+0x80>)
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	3304      	adds	r3, #4
 8007c8e:	4619      	mov	r1, r3
 8007c90:	4610      	mov	r0, r2
 8007c92:	f7fd fd2a 	bl	80056ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007c96:	697b      	ldr	r3, [r7, #20]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	20000f00 	.word	0x20000f00
 8007ca4:	20000efc 	.word	0x20000efc

08007ca8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08e      	sub	sp, #56	@ 0x38
 8007cac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cae:	e0d4      	b.n	8007e5a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	da1b      	bge.n	8007cee <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007cb6:	1d3b      	adds	r3, r7, #4
 8007cb8:	3304      	adds	r3, #4
 8007cba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d10d      	bne.n	8007cde <prvProcessReceivedCommands+0x36>
	__asm volatile
 8007cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc6:	b672      	cpsid	i
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	b662      	cpsie	i
 8007cd6:	61fb      	str	r3, [r7, #28]
}
 8007cd8:	bf00      	nop
 8007cda:	bf00      	nop
 8007cdc:	e7fd      	b.n	8007cda <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ce4:	6850      	ldr	r0, [r2, #4]
 8007ce6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ce8:	6892      	ldr	r2, [r2, #8]
 8007cea:	4611      	mov	r1, r2
 8007cec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f2c0 80b2 	blt.w	8007e5a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d004      	beq.n	8007d0c <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d04:	3304      	adds	r3, #4
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fd fd28 	bl	800575c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d0c:	463b      	mov	r3, r7
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7ff ff68 	bl	8007be4 <prvSampleTimeNow>
 8007d14:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b09      	cmp	r3, #9
 8007d1a:	f200 809b 	bhi.w	8007e54 <prvProcessReceivedCommands+0x1ac>
 8007d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d24 <prvProcessReceivedCommands+0x7c>)
 8007d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d24:	08007d4d 	.word	0x08007d4d
 8007d28:	08007d4d 	.word	0x08007d4d
 8007d2c:	08007d4d 	.word	0x08007d4d
 8007d30:	08007dc7 	.word	0x08007dc7
 8007d34:	08007ddb 	.word	0x08007ddb
 8007d38:	08007e2b 	.word	0x08007e2b
 8007d3c:	08007d4d 	.word	0x08007d4d
 8007d40:	08007d4d 	.word	0x08007d4d
 8007d44:	08007dc7 	.word	0x08007dc7
 8007d48:	08007ddb 	.word	0x08007ddb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d52:	f043 0301 	orr.w	r3, r3, #1
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d5e:	68ba      	ldr	r2, [r7, #8]
 8007d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	18d1      	adds	r1, r2, r3
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d6c:	f7ff ff5a 	bl	8007c24 <prvInsertTimerInActiveList>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d070      	beq.n	8007e58 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d7c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d84:	f003 0304 	and.w	r3, r3, #4
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d065      	beq.n	8007e58 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d8c:	68ba      	ldr	r2, [r7, #8]
 8007d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	441a      	add	r2, r3
 8007d94:	2300      	movs	r3, #0
 8007d96:	9300      	str	r3, [sp, #0]
 8007d98:	2300      	movs	r3, #0
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d9e:	f7ff fdfb 	bl	8007998 <xTimerGenericCommand>
 8007da2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d156      	bne.n	8007e58 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8007daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dae:	b672      	cpsid	i
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	b662      	cpsie	i
 8007dbe:	61bb      	str	r3, [r7, #24]
}
 8007dc0:	bf00      	nop
 8007dc2:	bf00      	nop
 8007dc4:	e7fd      	b.n	8007dc2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007dcc:	f023 0301 	bic.w	r3, r3, #1
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007dd8:	e03f      	b.n	8007e5a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ddc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007de0:	f043 0301 	orr.w	r3, r3, #1
 8007de4:	b2da      	uxtb	r2, r3
 8007de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10d      	bne.n	8007e16 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8007dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfe:	b672      	cpsid	i
 8007e00:	f383 8811 	msr	BASEPRI, r3
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	b662      	cpsie	i
 8007e0e:	617b      	str	r3, [r7, #20]
}
 8007e10:	bf00      	nop
 8007e12:	bf00      	nop
 8007e14:	e7fd      	b.n	8007e12 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e18:	699a      	ldr	r2, [r3, #24]
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1c:	18d1      	adds	r1, r2, r3
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e24:	f7ff fefe 	bl	8007c24 <prvInsertTimerInActiveList>
					break;
 8007e28:	e017      	b.n	8007e5a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e30:	f003 0302 	and.w	r3, r3, #2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d103      	bne.n	8007e40 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8007e38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e3a:	f000 fbd3 	bl	80085e4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e3e:	e00c      	b.n	8007e5a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e46:	f023 0301 	bic.w	r3, r3, #1
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007e52:	e002      	b.n	8007e5a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8007e54:	bf00      	nop
 8007e56:	e000      	b.n	8007e5a <prvProcessReceivedCommands+0x1b2>
					break;
 8007e58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e5a:	4b08      	ldr	r3, [pc, #32]	@ (8007e7c <prvProcessReceivedCommands+0x1d4>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	1d39      	adds	r1, r7, #4
 8007e60:	2200      	movs	r2, #0
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fe f8ba 	bl	8005fdc <xQueueReceive>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f47f af20 	bne.w	8007cb0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007e70:	bf00      	nop
 8007e72:	bf00      	nop
 8007e74:	3730      	adds	r7, #48	@ 0x30
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	20000f04 	.word	0x20000f04

08007e80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b088      	sub	sp, #32
 8007e84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e86:	e04b      	b.n	8007f20 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e88:	4b2f      	ldr	r3, [pc, #188]	@ (8007f48 <prvSwitchTimerLists+0xc8>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e92:	4b2d      	ldr	r3, [pc, #180]	@ (8007f48 <prvSwitchTimerLists+0xc8>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fd fc5b 	bl	800575c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007eb4:	f003 0304 	and.w	r3, r3, #4
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d031      	beq.n	8007f20 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d90e      	bls.n	8007eec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007eda:	4b1b      	ldr	r3, [pc, #108]	@ (8007f48 <prvSwitchTimerLists+0xc8>)
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	4610      	mov	r0, r2
 8007ee6:	f7fd fc00 	bl	80056ea <vListInsert>
 8007eea:	e019      	b.n	8007f20 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007eec:	2300      	movs	r3, #0
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f7ff fd4e 	bl	8007998 <xTimerGenericCommand>
 8007efc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10d      	bne.n	8007f20 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f08:	b672      	cpsid	i
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	b662      	cpsie	i
 8007f18:	603b      	str	r3, [r7, #0]
}
 8007f1a:	bf00      	nop
 8007f1c:	bf00      	nop
 8007f1e:	e7fd      	b.n	8007f1c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f20:	4b09      	ldr	r3, [pc, #36]	@ (8007f48 <prvSwitchTimerLists+0xc8>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1ae      	bne.n	8007e88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007f2a:	4b07      	ldr	r3, [pc, #28]	@ (8007f48 <prvSwitchTimerLists+0xc8>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007f30:	4b06      	ldr	r3, [pc, #24]	@ (8007f4c <prvSwitchTimerLists+0xcc>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a04      	ldr	r2, [pc, #16]	@ (8007f48 <prvSwitchTimerLists+0xc8>)
 8007f36:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007f38:	4a04      	ldr	r2, [pc, #16]	@ (8007f4c <prvSwitchTimerLists+0xcc>)
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	6013      	str	r3, [r2, #0]
}
 8007f3e:	bf00      	nop
 8007f40:	3718      	adds	r7, #24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	20000efc 	.word	0x20000efc
 8007f4c:	20000f00 	.word	0x20000f00

08007f50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007f56:	f000 f949 	bl	80081ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007f5a:	4b15      	ldr	r3, [pc, #84]	@ (8007fb0 <prvCheckForValidListAndQueue+0x60>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d120      	bne.n	8007fa4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f62:	4814      	ldr	r0, [pc, #80]	@ (8007fb4 <prvCheckForValidListAndQueue+0x64>)
 8007f64:	f7fd fb70 	bl	8005648 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007f68:	4813      	ldr	r0, [pc, #76]	@ (8007fb8 <prvCheckForValidListAndQueue+0x68>)
 8007f6a:	f7fd fb6d 	bl	8005648 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007f6e:	4b13      	ldr	r3, [pc, #76]	@ (8007fbc <prvCheckForValidListAndQueue+0x6c>)
 8007f70:	4a10      	ldr	r2, [pc, #64]	@ (8007fb4 <prvCheckForValidListAndQueue+0x64>)
 8007f72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007f74:	4b12      	ldr	r3, [pc, #72]	@ (8007fc0 <prvCheckForValidListAndQueue+0x70>)
 8007f76:	4a10      	ldr	r2, [pc, #64]	@ (8007fb8 <prvCheckForValidListAndQueue+0x68>)
 8007f78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	9300      	str	r3, [sp, #0]
 8007f7e:	4b11      	ldr	r3, [pc, #68]	@ (8007fc4 <prvCheckForValidListAndQueue+0x74>)
 8007f80:	4a11      	ldr	r2, [pc, #68]	@ (8007fc8 <prvCheckForValidListAndQueue+0x78>)
 8007f82:	2110      	movs	r1, #16
 8007f84:	200a      	movs	r0, #10
 8007f86:	f7fd fc7f 	bl	8005888 <xQueueGenericCreateStatic>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	4a08      	ldr	r2, [pc, #32]	@ (8007fb0 <prvCheckForValidListAndQueue+0x60>)
 8007f8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007f90:	4b07      	ldr	r3, [pc, #28]	@ (8007fb0 <prvCheckForValidListAndQueue+0x60>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d005      	beq.n	8007fa4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f98:	4b05      	ldr	r3, [pc, #20]	@ (8007fb0 <prvCheckForValidListAndQueue+0x60>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	490b      	ldr	r1, [pc, #44]	@ (8007fcc <prvCheckForValidListAndQueue+0x7c>)
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fe fbf2 	bl	8006788 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007fa4:	f000 f958 	bl	8008258 <vPortExitCritical>
}
 8007fa8:	bf00      	nop
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	20000f04 	.word	0x20000f04
 8007fb4:	20000ed4 	.word	0x20000ed4
 8007fb8:	20000ee8 	.word	0x20000ee8
 8007fbc:	20000efc 	.word	0x20000efc
 8007fc0:	20000f00 	.word	0x20000f00
 8007fc4:	20000fb0 	.word	0x20000fb0
 8007fc8:	20000f10 	.word	0x20000f10
 8007fcc:	08008b64 	.word	0x08008b64

08007fd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	3b04      	subs	r3, #4
 8007fe0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007fe8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	3b04      	subs	r3, #4
 8007fee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	f023 0201 	bic.w	r2, r3, #1
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3b04      	subs	r3, #4
 8007ffe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008000:	4a0c      	ldr	r2, [pc, #48]	@ (8008034 <pxPortInitialiseStack+0x64>)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	3b14      	subs	r3, #20
 800800a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	3b04      	subs	r3, #4
 8008016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f06f 0202 	mvn.w	r2, #2
 800801e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	3b20      	subs	r3, #32
 8008024:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008026:	68fb      	ldr	r3, [r7, #12]
}
 8008028:	4618      	mov	r0, r3
 800802a:	3714      	adds	r7, #20
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr
 8008034:	08008039 	.word	0x08008039

08008038 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800803e:	2300      	movs	r3, #0
 8008040:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008042:	4b15      	ldr	r3, [pc, #84]	@ (8008098 <prvTaskExitError+0x60>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804a:	d00d      	beq.n	8008068 <prvTaskExitError+0x30>
	__asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008050:	b672      	cpsid	i
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	b662      	cpsie	i
 8008060:	60fb      	str	r3, [r7, #12]
}
 8008062:	bf00      	nop
 8008064:	bf00      	nop
 8008066:	e7fd      	b.n	8008064 <prvTaskExitError+0x2c>
	__asm volatile
 8008068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800806c:	b672      	cpsid	i
 800806e:	f383 8811 	msr	BASEPRI, r3
 8008072:	f3bf 8f6f 	isb	sy
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	b662      	cpsie	i
 800807c:	60bb      	str	r3, [r7, #8]
}
 800807e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008080:	bf00      	nop
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d0fc      	beq.n	8008082 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008088:	bf00      	nop
 800808a:	bf00      	nop
 800808c:	3714      	adds	r7, #20
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	20000010 	.word	0x20000010
 800809c:	00000000 	.word	0x00000000

080080a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80080a0:	4b07      	ldr	r3, [pc, #28]	@ (80080c0 <pxCurrentTCBConst2>)
 80080a2:	6819      	ldr	r1, [r3, #0]
 80080a4:	6808      	ldr	r0, [r1, #0]
 80080a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080aa:	f380 8809 	msr	PSP, r0
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f04f 0000 	mov.w	r0, #0
 80080b6:	f380 8811 	msr	BASEPRI, r0
 80080ba:	4770      	bx	lr
 80080bc:	f3af 8000 	nop.w

080080c0 <pxCurrentTCBConst2>:
 80080c0:	200009d4 	.word	0x200009d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80080c4:	bf00      	nop
 80080c6:	bf00      	nop

080080c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80080c8:	4808      	ldr	r0, [pc, #32]	@ (80080ec <prvPortStartFirstTask+0x24>)
 80080ca:	6800      	ldr	r0, [r0, #0]
 80080cc:	6800      	ldr	r0, [r0, #0]
 80080ce:	f380 8808 	msr	MSP, r0
 80080d2:	f04f 0000 	mov.w	r0, #0
 80080d6:	f380 8814 	msr	CONTROL, r0
 80080da:	b662      	cpsie	i
 80080dc:	b661      	cpsie	f
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	df00      	svc	0
 80080e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80080ea:	bf00      	nop
 80080ec:	e000ed08 	.word	0xe000ed08

080080f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80080f6:	4b37      	ldr	r3, [pc, #220]	@ (80081d4 <xPortStartScheduler+0xe4>)
 80080f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	22ff      	movs	r2, #255	@ 0xff
 8008106:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	b2db      	uxtb	r3, r3
 800810e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008110:	78fb      	ldrb	r3, [r7, #3]
 8008112:	b2db      	uxtb	r3, r3
 8008114:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008118:	b2da      	uxtb	r2, r3
 800811a:	4b2f      	ldr	r3, [pc, #188]	@ (80081d8 <xPortStartScheduler+0xe8>)
 800811c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800811e:	4b2f      	ldr	r3, [pc, #188]	@ (80081dc <xPortStartScheduler+0xec>)
 8008120:	2207      	movs	r2, #7
 8008122:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008124:	e009      	b.n	800813a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008126:	4b2d      	ldr	r3, [pc, #180]	@ (80081dc <xPortStartScheduler+0xec>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3b01      	subs	r3, #1
 800812c:	4a2b      	ldr	r2, [pc, #172]	@ (80081dc <xPortStartScheduler+0xec>)
 800812e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008130:	78fb      	ldrb	r3, [r7, #3]
 8008132:	b2db      	uxtb	r3, r3
 8008134:	005b      	lsls	r3, r3, #1
 8008136:	b2db      	uxtb	r3, r3
 8008138:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800813a:	78fb      	ldrb	r3, [r7, #3]
 800813c:	b2db      	uxtb	r3, r3
 800813e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008142:	2b80      	cmp	r3, #128	@ 0x80
 8008144:	d0ef      	beq.n	8008126 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008146:	4b25      	ldr	r3, [pc, #148]	@ (80081dc <xPortStartScheduler+0xec>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f1c3 0307 	rsb	r3, r3, #7
 800814e:	2b04      	cmp	r3, #4
 8008150:	d00d      	beq.n	800816e <xPortStartScheduler+0x7e>
	__asm volatile
 8008152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008156:	b672      	cpsid	i
 8008158:	f383 8811 	msr	BASEPRI, r3
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	b662      	cpsie	i
 8008166:	60bb      	str	r3, [r7, #8]
}
 8008168:	bf00      	nop
 800816a:	bf00      	nop
 800816c:	e7fd      	b.n	800816a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800816e:	4b1b      	ldr	r3, [pc, #108]	@ (80081dc <xPortStartScheduler+0xec>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	021b      	lsls	r3, r3, #8
 8008174:	4a19      	ldr	r2, [pc, #100]	@ (80081dc <xPortStartScheduler+0xec>)
 8008176:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008178:	4b18      	ldr	r3, [pc, #96]	@ (80081dc <xPortStartScheduler+0xec>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008180:	4a16      	ldr	r2, [pc, #88]	@ (80081dc <xPortStartScheduler+0xec>)
 8008182:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	b2da      	uxtb	r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800818c:	4b14      	ldr	r3, [pc, #80]	@ (80081e0 <xPortStartScheduler+0xf0>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a13      	ldr	r2, [pc, #76]	@ (80081e0 <xPortStartScheduler+0xf0>)
 8008192:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008196:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008198:	4b11      	ldr	r3, [pc, #68]	@ (80081e0 <xPortStartScheduler+0xf0>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a10      	ldr	r2, [pc, #64]	@ (80081e0 <xPortStartScheduler+0xf0>)
 800819e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80081a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80081a4:	f000 f8dc 	bl	8008360 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80081a8:	4b0e      	ldr	r3, [pc, #56]	@ (80081e4 <xPortStartScheduler+0xf4>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80081ae:	f000 f8fb 	bl	80083a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80081b2:	4b0d      	ldr	r3, [pc, #52]	@ (80081e8 <xPortStartScheduler+0xf8>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a0c      	ldr	r2, [pc, #48]	@ (80081e8 <xPortStartScheduler+0xf8>)
 80081b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80081bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80081be:	f7ff ff83 	bl	80080c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80081c2:	f7fe ff35 	bl	8007030 <vTaskSwitchContext>
	prvTaskExitError();
 80081c6:	f7ff ff37 	bl	8008038 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80081ca:	2300      	movs	r3, #0
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3710      	adds	r7, #16
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	e000e400 	.word	0xe000e400
 80081d8:	20001000 	.word	0x20001000
 80081dc:	20001004 	.word	0x20001004
 80081e0:	e000ed20 	.word	0xe000ed20
 80081e4:	20000010 	.word	0x20000010
 80081e8:	e000ef34 	.word	0xe000ef34

080081ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
	__asm volatile
 80081f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f6:	b672      	cpsid	i
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	b662      	cpsie	i
 8008206:	607b      	str	r3, [r7, #4]
}
 8008208:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800820a:	4b11      	ldr	r3, [pc, #68]	@ (8008250 <vPortEnterCritical+0x64>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3301      	adds	r3, #1
 8008210:	4a0f      	ldr	r2, [pc, #60]	@ (8008250 <vPortEnterCritical+0x64>)
 8008212:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008214:	4b0e      	ldr	r3, [pc, #56]	@ (8008250 <vPortEnterCritical+0x64>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d112      	bne.n	8008242 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800821c:	4b0d      	ldr	r3, [pc, #52]	@ (8008254 <vPortEnterCritical+0x68>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	b2db      	uxtb	r3, r3
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00d      	beq.n	8008242 <vPortEnterCritical+0x56>
	__asm volatile
 8008226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800822a:	b672      	cpsid	i
 800822c:	f383 8811 	msr	BASEPRI, r3
 8008230:	f3bf 8f6f 	isb	sy
 8008234:	f3bf 8f4f 	dsb	sy
 8008238:	b662      	cpsie	i
 800823a:	603b      	str	r3, [r7, #0]
}
 800823c:	bf00      	nop
 800823e:	bf00      	nop
 8008240:	e7fd      	b.n	800823e <vPortEnterCritical+0x52>
	}
}
 8008242:	bf00      	nop
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr
 800824e:	bf00      	nop
 8008250:	20000010 	.word	0x20000010
 8008254:	e000ed04 	.word	0xe000ed04

08008258 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008258:	b480      	push	{r7}
 800825a:	b083      	sub	sp, #12
 800825c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800825e:	4b13      	ldr	r3, [pc, #76]	@ (80082ac <vPortExitCritical+0x54>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10d      	bne.n	8008282 <vPortExitCritical+0x2a>
	__asm volatile
 8008266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800826a:	b672      	cpsid	i
 800826c:	f383 8811 	msr	BASEPRI, r3
 8008270:	f3bf 8f6f 	isb	sy
 8008274:	f3bf 8f4f 	dsb	sy
 8008278:	b662      	cpsie	i
 800827a:	607b      	str	r3, [r7, #4]
}
 800827c:	bf00      	nop
 800827e:	bf00      	nop
 8008280:	e7fd      	b.n	800827e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008282:	4b0a      	ldr	r3, [pc, #40]	@ (80082ac <vPortExitCritical+0x54>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3b01      	subs	r3, #1
 8008288:	4a08      	ldr	r2, [pc, #32]	@ (80082ac <vPortExitCritical+0x54>)
 800828a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800828c:	4b07      	ldr	r3, [pc, #28]	@ (80082ac <vPortExitCritical+0x54>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d105      	bne.n	80082a0 <vPortExitCritical+0x48>
 8008294:	2300      	movs	r3, #0
 8008296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	f383 8811 	msr	BASEPRI, r3
}
 800829e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	20000010 	.word	0x20000010

080082b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80082b0:	f3ef 8009 	mrs	r0, PSP
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	4b15      	ldr	r3, [pc, #84]	@ (8008310 <pxCurrentTCBConst>)
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	f01e 0f10 	tst.w	lr, #16
 80082c0:	bf08      	it	eq
 80082c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80082c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ca:	6010      	str	r0, [r2, #0]
 80082cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80082d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80082d4:	b672      	cpsid	i
 80082d6:	f380 8811 	msr	BASEPRI, r0
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	f3bf 8f6f 	isb	sy
 80082e2:	b662      	cpsie	i
 80082e4:	f7fe fea4 	bl	8007030 <vTaskSwitchContext>
 80082e8:	f04f 0000 	mov.w	r0, #0
 80082ec:	f380 8811 	msr	BASEPRI, r0
 80082f0:	bc09      	pop	{r0, r3}
 80082f2:	6819      	ldr	r1, [r3, #0]
 80082f4:	6808      	ldr	r0, [r1, #0]
 80082f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fa:	f01e 0f10 	tst.w	lr, #16
 80082fe:	bf08      	it	eq
 8008300:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008304:	f380 8809 	msr	PSP, r0
 8008308:	f3bf 8f6f 	isb	sy
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop

08008310 <pxCurrentTCBConst>:
 8008310:	200009d4 	.word	0x200009d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008314:	bf00      	nop
 8008316:	bf00      	nop

08008318 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
	__asm volatile
 800831e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008322:	b672      	cpsid	i
 8008324:	f383 8811 	msr	BASEPRI, r3
 8008328:	f3bf 8f6f 	isb	sy
 800832c:	f3bf 8f4f 	dsb	sy
 8008330:	b662      	cpsie	i
 8008332:	607b      	str	r3, [r7, #4]
}
 8008334:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008336:	f7fe fdbf 	bl	8006eb8 <xTaskIncrementTick>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d003      	beq.n	8008348 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008340:	4b06      	ldr	r3, [pc, #24]	@ (800835c <xPortSysTickHandler+0x44>)
 8008342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008346:	601a      	str	r2, [r3, #0]
 8008348:	2300      	movs	r3, #0
 800834a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	f383 8811 	msr	BASEPRI, r3
}
 8008352:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008354:	bf00      	nop
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	e000ed04 	.word	0xe000ed04

08008360 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008360:	b480      	push	{r7}
 8008362:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008364:	4b0b      	ldr	r3, [pc, #44]	@ (8008394 <vPortSetupTimerInterrupt+0x34>)
 8008366:	2200      	movs	r2, #0
 8008368:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800836a:	4b0b      	ldr	r3, [pc, #44]	@ (8008398 <vPortSetupTimerInterrupt+0x38>)
 800836c:	2200      	movs	r2, #0
 800836e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008370:	4b0a      	ldr	r3, [pc, #40]	@ (800839c <vPortSetupTimerInterrupt+0x3c>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a0a      	ldr	r2, [pc, #40]	@ (80083a0 <vPortSetupTimerInterrupt+0x40>)
 8008376:	fba2 2303 	umull	r2, r3, r2, r3
 800837a:	099b      	lsrs	r3, r3, #6
 800837c:	4a09      	ldr	r2, [pc, #36]	@ (80083a4 <vPortSetupTimerInterrupt+0x44>)
 800837e:	3b01      	subs	r3, #1
 8008380:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008382:	4b04      	ldr	r3, [pc, #16]	@ (8008394 <vPortSetupTimerInterrupt+0x34>)
 8008384:	2207      	movs	r2, #7
 8008386:	601a      	str	r2, [r3, #0]
}
 8008388:	bf00      	nop
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	e000e010 	.word	0xe000e010
 8008398:	e000e018 	.word	0xe000e018
 800839c:	20000000 	.word	0x20000000
 80083a0:	10624dd3 	.word	0x10624dd3
 80083a4:	e000e014 	.word	0xe000e014

080083a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80083a8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80083b8 <vPortEnableVFP+0x10>
 80083ac:	6801      	ldr	r1, [r0, #0]
 80083ae:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80083b2:	6001      	str	r1, [r0, #0]
 80083b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80083b6:	bf00      	nop
 80083b8:	e000ed88 	.word	0xe000ed88

080083bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80083c2:	f3ef 8305 	mrs	r3, IPSR
 80083c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2b0f      	cmp	r3, #15
 80083cc:	d917      	bls.n	80083fe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80083ce:	4a1a      	ldr	r2, [pc, #104]	@ (8008438 <vPortValidateInterruptPriority+0x7c>)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	4413      	add	r3, r2
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80083d8:	4b18      	ldr	r3, [pc, #96]	@ (800843c <vPortValidateInterruptPriority+0x80>)
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	7afa      	ldrb	r2, [r7, #11]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d20d      	bcs.n	80083fe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80083e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e6:	b672      	cpsid	i
 80083e8:	f383 8811 	msr	BASEPRI, r3
 80083ec:	f3bf 8f6f 	isb	sy
 80083f0:	f3bf 8f4f 	dsb	sy
 80083f4:	b662      	cpsie	i
 80083f6:	607b      	str	r3, [r7, #4]
}
 80083f8:	bf00      	nop
 80083fa:	bf00      	nop
 80083fc:	e7fd      	b.n	80083fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80083fe:	4b10      	ldr	r3, [pc, #64]	@ (8008440 <vPortValidateInterruptPriority+0x84>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008406:	4b0f      	ldr	r3, [pc, #60]	@ (8008444 <vPortValidateInterruptPriority+0x88>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	429a      	cmp	r2, r3
 800840c:	d90d      	bls.n	800842a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008412:	b672      	cpsid	i
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	b662      	cpsie	i
 8008422:	603b      	str	r3, [r7, #0]
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop
 8008428:	e7fd      	b.n	8008426 <vPortValidateInterruptPriority+0x6a>
	}
 800842a:	bf00      	nop
 800842c:	3714      	adds	r7, #20
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	e000e3f0 	.word	0xe000e3f0
 800843c:	20001000 	.word	0x20001000
 8008440:	e000ed0c 	.word	0xe000ed0c
 8008444:	20001004 	.word	0x20001004

08008448 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b08a      	sub	sp, #40	@ 0x28
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008450:	2300      	movs	r3, #0
 8008452:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008454:	f7fe fc72 	bl	8006d3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008458:	4b5d      	ldr	r3, [pc, #372]	@ (80085d0 <pvPortMalloc+0x188>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d101      	bne.n	8008464 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008460:	f000 f920 	bl	80086a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008464:	4b5b      	ldr	r3, [pc, #364]	@ (80085d4 <pvPortMalloc+0x18c>)
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4013      	ands	r3, r2
 800846c:	2b00      	cmp	r3, #0
 800846e:	f040 8094 	bne.w	800859a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d020      	beq.n	80084ba <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8008478:	2208      	movs	r2, #8
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4413      	add	r3, r2
 800847e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f003 0307 	and.w	r3, r3, #7
 8008486:	2b00      	cmp	r3, #0
 8008488:	d017      	beq.n	80084ba <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f023 0307 	bic.w	r3, r3, #7
 8008490:	3308      	adds	r3, #8
 8008492:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f003 0307 	and.w	r3, r3, #7
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00d      	beq.n	80084ba <pvPortMalloc+0x72>
	__asm volatile
 800849e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a2:	b672      	cpsid	i
 80084a4:	f383 8811 	msr	BASEPRI, r3
 80084a8:	f3bf 8f6f 	isb	sy
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	b662      	cpsie	i
 80084b2:	617b      	str	r3, [r7, #20]
}
 80084b4:	bf00      	nop
 80084b6:	bf00      	nop
 80084b8:	e7fd      	b.n	80084b6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d06c      	beq.n	800859a <pvPortMalloc+0x152>
 80084c0:	4b45      	ldr	r3, [pc, #276]	@ (80085d8 <pvPortMalloc+0x190>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d867      	bhi.n	800859a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084ca:	4b44      	ldr	r3, [pc, #272]	@ (80085dc <pvPortMalloc+0x194>)
 80084cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80084ce:	4b43      	ldr	r3, [pc, #268]	@ (80085dc <pvPortMalloc+0x194>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084d4:	e004      	b.n	80084e0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80084d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80084da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d903      	bls.n	80084f2 <pvPortMalloc+0xaa>
 80084ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1f1      	bne.n	80084d6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80084f2:	4b37      	ldr	r3, [pc, #220]	@ (80085d0 <pvPortMalloc+0x188>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d04e      	beq.n	800859a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80084fc:	6a3b      	ldr	r3, [r7, #32]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2208      	movs	r2, #8
 8008502:	4413      	add	r3, r2
 8008504:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	6a3b      	ldr	r3, [r7, #32]
 800850c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800850e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008510:	685a      	ldr	r2, [r3, #4]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	1ad2      	subs	r2, r2, r3
 8008516:	2308      	movs	r3, #8
 8008518:	005b      	lsls	r3, r3, #1
 800851a:	429a      	cmp	r2, r3
 800851c:	d922      	bls.n	8008564 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800851e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4413      	add	r3, r2
 8008524:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	f003 0307 	and.w	r3, r3, #7
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00d      	beq.n	800854c <pvPortMalloc+0x104>
	__asm volatile
 8008530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008534:	b672      	cpsid	i
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	b662      	cpsie	i
 8008544:	613b      	str	r3, [r7, #16]
}
 8008546:	bf00      	nop
 8008548:	bf00      	nop
 800854a:	e7fd      	b.n	8008548 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800854c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800854e:	685a      	ldr	r2, [r3, #4]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	1ad2      	subs	r2, r2, r3
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855a:	687a      	ldr	r2, [r7, #4]
 800855c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800855e:	69b8      	ldr	r0, [r7, #24]
 8008560:	f000 f902 	bl	8008768 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008564:	4b1c      	ldr	r3, [pc, #112]	@ (80085d8 <pvPortMalloc+0x190>)
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	4a1a      	ldr	r2, [pc, #104]	@ (80085d8 <pvPortMalloc+0x190>)
 8008570:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008572:	4b19      	ldr	r3, [pc, #100]	@ (80085d8 <pvPortMalloc+0x190>)
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	4b1a      	ldr	r3, [pc, #104]	@ (80085e0 <pvPortMalloc+0x198>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	429a      	cmp	r2, r3
 800857c:	d203      	bcs.n	8008586 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800857e:	4b16      	ldr	r3, [pc, #88]	@ (80085d8 <pvPortMalloc+0x190>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a17      	ldr	r2, [pc, #92]	@ (80085e0 <pvPortMalloc+0x198>)
 8008584:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008588:	685a      	ldr	r2, [r3, #4]
 800858a:	4b12      	ldr	r3, [pc, #72]	@ (80085d4 <pvPortMalloc+0x18c>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	431a      	orrs	r2, r3
 8008590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008592:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008596:	2200      	movs	r2, #0
 8008598:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800859a:	f7fe fbdd 	bl	8006d58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	f003 0307 	and.w	r3, r3, #7
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00d      	beq.n	80085c4 <pvPortMalloc+0x17c>
	__asm volatile
 80085a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ac:	b672      	cpsid	i
 80085ae:	f383 8811 	msr	BASEPRI, r3
 80085b2:	f3bf 8f6f 	isb	sy
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	b662      	cpsie	i
 80085bc:	60fb      	str	r3, [r7, #12]
}
 80085be:	bf00      	nop
 80085c0:	bf00      	nop
 80085c2:	e7fd      	b.n	80085c0 <pvPortMalloc+0x178>
	return pvReturn;
 80085c4:	69fb      	ldr	r3, [r7, #28]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3728      	adds	r7, #40	@ 0x28
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	20004c10 	.word	0x20004c10
 80085d4:	20004c1c 	.word	0x20004c1c
 80085d8:	20004c14 	.word	0x20004c14
 80085dc:	20004c08 	.word	0x20004c08
 80085e0:	20004c18 	.word	0x20004c18

080085e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b086      	sub	sp, #24
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d04e      	beq.n	8008694 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80085f6:	2308      	movs	r3, #8
 80085f8:	425b      	negs	r3, r3
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	4413      	add	r3, r2
 80085fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	685a      	ldr	r2, [r3, #4]
 8008608:	4b24      	ldr	r3, [pc, #144]	@ (800869c <vPortFree+0xb8>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4013      	ands	r3, r2
 800860e:	2b00      	cmp	r3, #0
 8008610:	d10d      	bne.n	800862e <vPortFree+0x4a>
	__asm volatile
 8008612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008616:	b672      	cpsid	i
 8008618:	f383 8811 	msr	BASEPRI, r3
 800861c:	f3bf 8f6f 	isb	sy
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	b662      	cpsie	i
 8008626:	60fb      	str	r3, [r7, #12]
}
 8008628:	bf00      	nop
 800862a:	bf00      	nop
 800862c:	e7fd      	b.n	800862a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00d      	beq.n	8008652 <vPortFree+0x6e>
	__asm volatile
 8008636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800863a:	b672      	cpsid	i
 800863c:	f383 8811 	msr	BASEPRI, r3
 8008640:	f3bf 8f6f 	isb	sy
 8008644:	f3bf 8f4f 	dsb	sy
 8008648:	b662      	cpsie	i
 800864a:	60bb      	str	r3, [r7, #8]
}
 800864c:	bf00      	nop
 800864e:	bf00      	nop
 8008650:	e7fd      	b.n	800864e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	685a      	ldr	r2, [r3, #4]
 8008656:	4b11      	ldr	r3, [pc, #68]	@ (800869c <vPortFree+0xb8>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4013      	ands	r3, r2
 800865c:	2b00      	cmp	r3, #0
 800865e:	d019      	beq.n	8008694 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d115      	bne.n	8008694 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	4b0b      	ldr	r3, [pc, #44]	@ (800869c <vPortFree+0xb8>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	43db      	mvns	r3, r3
 8008672:	401a      	ands	r2, r3
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008678:	f7fe fb60 	bl	8006d3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	4b07      	ldr	r3, [pc, #28]	@ (80086a0 <vPortFree+0xbc>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4413      	add	r3, r2
 8008686:	4a06      	ldr	r2, [pc, #24]	@ (80086a0 <vPortFree+0xbc>)
 8008688:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800868a:	6938      	ldr	r0, [r7, #16]
 800868c:	f000 f86c 	bl	8008768 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008690:	f7fe fb62 	bl	8006d58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008694:	bf00      	nop
 8008696:	3718      	adds	r7, #24
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	20004c1c 	.word	0x20004c1c
 80086a0:	20004c14 	.word	0x20004c14

080086a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086aa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80086ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80086b0:	4b27      	ldr	r3, [pc, #156]	@ (8008750 <prvHeapInit+0xac>)
 80086b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f003 0307 	and.w	r3, r3, #7
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00c      	beq.n	80086d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	3307      	adds	r3, #7
 80086c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f023 0307 	bic.w	r3, r3, #7
 80086ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	4a1f      	ldr	r2, [pc, #124]	@ (8008750 <prvHeapInit+0xac>)
 80086d4:	4413      	add	r3, r2
 80086d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80086dc:	4a1d      	ldr	r2, [pc, #116]	@ (8008754 <prvHeapInit+0xb0>)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80086e2:	4b1c      	ldr	r3, [pc, #112]	@ (8008754 <prvHeapInit+0xb0>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	4413      	add	r3, r2
 80086ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80086f0:	2208      	movs	r2, #8
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	1a9b      	subs	r3, r3, r2
 80086f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f023 0307 	bic.w	r3, r3, #7
 80086fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	4a15      	ldr	r2, [pc, #84]	@ (8008758 <prvHeapInit+0xb4>)
 8008704:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008706:	4b14      	ldr	r3, [pc, #80]	@ (8008758 <prvHeapInit+0xb4>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2200      	movs	r2, #0
 800870c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800870e:	4b12      	ldr	r3, [pc, #72]	@ (8008758 <prvHeapInit+0xb4>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2200      	movs	r2, #0
 8008714:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	1ad2      	subs	r2, r2, r3
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008724:	4b0c      	ldr	r3, [pc, #48]	@ (8008758 <prvHeapInit+0xb4>)
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	4a0a      	ldr	r2, [pc, #40]	@ (800875c <prvHeapInit+0xb8>)
 8008732:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	4a09      	ldr	r2, [pc, #36]	@ (8008760 <prvHeapInit+0xbc>)
 800873a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800873c:	4b09      	ldr	r3, [pc, #36]	@ (8008764 <prvHeapInit+0xc0>)
 800873e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008742:	601a      	str	r2, [r3, #0]
}
 8008744:	bf00      	nop
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr
 8008750:	20001008 	.word	0x20001008
 8008754:	20004c08 	.word	0x20004c08
 8008758:	20004c10 	.word	0x20004c10
 800875c:	20004c18 	.word	0x20004c18
 8008760:	20004c14 	.word	0x20004c14
 8008764:	20004c1c 	.word	0x20004c1c

08008768 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008770:	4b28      	ldr	r3, [pc, #160]	@ (8008814 <prvInsertBlockIntoFreeList+0xac>)
 8008772:	60fb      	str	r3, [r7, #12]
 8008774:	e002      	b.n	800877c <prvInsertBlockIntoFreeList+0x14>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	60fb      	str	r3, [r7, #12]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	429a      	cmp	r2, r3
 8008784:	d8f7      	bhi.n	8008776 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	4413      	add	r3, r2
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	429a      	cmp	r2, r3
 8008796:	d108      	bne.n	80087aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	685a      	ldr	r2, [r3, #4]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	441a      	add	r2, r3
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	441a      	add	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d118      	bne.n	80087f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	4b15      	ldr	r3, [pc, #84]	@ (8008818 <prvInsertBlockIntoFreeList+0xb0>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d00d      	beq.n	80087e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	685a      	ldr	r2, [r3, #4]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	441a      	add	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	601a      	str	r2, [r3, #0]
 80087e4:	e008      	b.n	80087f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80087e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008818 <prvInsertBlockIntoFreeList+0xb0>)
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	601a      	str	r2, [r3, #0]
 80087ee:	e003      	b.n	80087f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d002      	beq.n	8008806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008806:	bf00      	nop
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	20004c08 	.word	0x20004c08
 8008818:	20004c10 	.word	0x20004c10

0800881c <memset>:
 800881c:	4402      	add	r2, r0
 800881e:	4603      	mov	r3, r0
 8008820:	4293      	cmp	r3, r2
 8008822:	d100      	bne.n	8008826 <memset+0xa>
 8008824:	4770      	bx	lr
 8008826:	f803 1b01 	strb.w	r1, [r3], #1
 800882a:	e7f9      	b.n	8008820 <memset+0x4>

0800882c <__errno>:
 800882c:	4b01      	ldr	r3, [pc, #4]	@ (8008834 <__errno+0x8>)
 800882e:	6818      	ldr	r0, [r3, #0]
 8008830:	4770      	bx	lr
 8008832:	bf00      	nop
 8008834:	20000014 	.word	0x20000014

08008838 <__libc_init_array>:
 8008838:	b570      	push	{r4, r5, r6, lr}
 800883a:	4d0d      	ldr	r5, [pc, #52]	@ (8008870 <__libc_init_array+0x38>)
 800883c:	4c0d      	ldr	r4, [pc, #52]	@ (8008874 <__libc_init_array+0x3c>)
 800883e:	1b64      	subs	r4, r4, r5
 8008840:	10a4      	asrs	r4, r4, #2
 8008842:	2600      	movs	r6, #0
 8008844:	42a6      	cmp	r6, r4
 8008846:	d109      	bne.n	800885c <__libc_init_array+0x24>
 8008848:	4d0b      	ldr	r5, [pc, #44]	@ (8008878 <__libc_init_array+0x40>)
 800884a:	4c0c      	ldr	r4, [pc, #48]	@ (800887c <__libc_init_array+0x44>)
 800884c:	f000 f954 	bl	8008af8 <_init>
 8008850:	1b64      	subs	r4, r4, r5
 8008852:	10a4      	asrs	r4, r4, #2
 8008854:	2600      	movs	r6, #0
 8008856:	42a6      	cmp	r6, r4
 8008858:	d105      	bne.n	8008866 <__libc_init_array+0x2e>
 800885a:	bd70      	pop	{r4, r5, r6, pc}
 800885c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008860:	4798      	blx	r3
 8008862:	3601      	adds	r6, #1
 8008864:	e7ee      	b.n	8008844 <__libc_init_array+0xc>
 8008866:	f855 3b04 	ldr.w	r3, [r5], #4
 800886a:	4798      	blx	r3
 800886c:	3601      	adds	r6, #1
 800886e:	e7f2      	b.n	8008856 <__libc_init_array+0x1e>
 8008870:	080094e8 	.word	0x080094e8
 8008874:	080094e8 	.word	0x080094e8
 8008878:	080094e8 	.word	0x080094e8
 800887c:	080094ec 	.word	0x080094ec

08008880 <memcpy>:
 8008880:	440a      	add	r2, r1
 8008882:	4291      	cmp	r1, r2
 8008884:	f100 33ff 	add.w	r3, r0, #4294967295
 8008888:	d100      	bne.n	800888c <memcpy+0xc>
 800888a:	4770      	bx	lr
 800888c:	b510      	push	{r4, lr}
 800888e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008892:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008896:	4291      	cmp	r1, r2
 8008898:	d1f9      	bne.n	800888e <memcpy+0xe>
 800889a:	bd10      	pop	{r4, pc}
 800889c:	0000      	movs	r0, r0
	...

080088a0 <log>:
 80088a0:	b4f0      	push	{r4, r5, r6, r7}
 80088a2:	ee10 0a90 	vmov	r0, s1
 80088a6:	ee10 3a10 	vmov	r3, s0
 80088aa:	f04f 34ff 	mov.w	r4, #4294967295
 80088ae:	429c      	cmp	r4, r3
 80088b0:	f100 4140 	add.w	r1, r0, #3221225472	@ 0xc0000000
 80088b4:	4c70      	ldr	r4, [pc, #448]	@ (8008a78 <log+0x1d8>)
 80088b6:	f501 1190 	add.w	r1, r1, #1179648	@ 0x120000
 80088ba:	418c      	sbcs	r4, r1
 80088bc:	ed2d 8b02 	vpush	{d8}
 80088c0:	ea4f 4210 	mov.w	r2, r0, lsr #16
 80088c4:	d35a      	bcc.n	800897c <log+0xdc>
 80088c6:	4a6d      	ldr	r2, [pc, #436]	@ (8008a7c <log+0x1dc>)
 80088c8:	4290      	cmp	r0, r2
 80088ca:	bf08      	it	eq
 80088cc:	2b00      	cmpeq	r3, #0
 80088ce:	f000 80c4 	beq.w	8008a5a <log+0x1ba>
 80088d2:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 80088d6:	ee30 0b47 	vsub.f64	d0, d0, d7
 80088da:	4b69      	ldr	r3, [pc, #420]	@ (8008a80 <log+0x1e0>)
 80088dc:	ee20 2b00 	vmul.f64	d2, d0, d0
 80088e0:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 80088e4:	ee20 4b02 	vmul.f64	d4, d0, d2
 80088e8:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 80088ec:	eea6 7b00 	vfma.f64	d7, d6, d0
 80088f0:	ed93 6b14 	vldr	d6, [r3, #80]	@ 0x50
 80088f4:	ed93 5b18 	vldr	d5, [r3, #96]	@ 0x60
 80088f8:	eea6 7b02 	vfma.f64	d7, d6, d2
 80088fc:	ed93 6b16 	vldr	d6, [r3, #88]	@ 0x58
 8008900:	eea5 6b00 	vfma.f64	d6, d5, d0
 8008904:	ed93 5b1a 	vldr	d5, [r3, #104]	@ 0x68
 8008908:	ed93 3b1e 	vldr	d3, [r3, #120]	@ 0x78
 800890c:	eea5 6b02 	vfma.f64	d6, d5, d2
 8008910:	ed93 5b1c 	vldr	d5, [r3, #112]	@ 0x70
 8008914:	eea3 5b00 	vfma.f64	d5, d3, d0
 8008918:	ed93 3b20 	vldr	d3, [r3, #128]	@ 0x80
 800891c:	eea3 5b02 	vfma.f64	d5, d3, d2
 8008920:	ed93 3b22 	vldr	d3, [r3, #136]	@ 0x88
 8008924:	eea3 5b04 	vfma.f64	d5, d3, d4
 8008928:	eea5 6b04 	vfma.f64	d6, d5, d4
 800892c:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8008930:	eea6 7b04 	vfma.f64	d7, d6, d4
 8008934:	eeb0 2b47 	vmov.f64	d2, d7
 8008938:	ed9f 7b49 	vldr	d7, [pc, #292]	@ 8008a60 <log+0x1c0>
 800893c:	eeb0 6b40 	vmov.f64	d6, d0
 8008940:	eeb0 3b40 	vmov.f64	d3, d0
 8008944:	eea0 6b07 	vfma.f64	d6, d0, d7
 8008948:	eea0 6b47 	vfms.f64	d6, d0, d7
 800894c:	ee30 8b46 	vsub.f64	d8, d0, d6
 8008950:	ee26 1b06 	vmul.f64	d1, d6, d6
 8008954:	eea1 3b05 	vfma.f64	d3, d1, d5
 8008958:	ee30 7b43 	vsub.f64	d7, d0, d3
 800895c:	ee30 0b06 	vadd.f64	d0, d0, d6
 8008960:	eea1 7b05 	vfma.f64	d7, d1, d5
 8008964:	ee25 5b08 	vmul.f64	d5, d5, d8
 8008968:	eea5 7b00 	vfma.f64	d7, d5, d0
 800896c:	eea2 7b04 	vfma.f64	d7, d2, d4
 8008970:	ee33 0b07 	vadd.f64	d0, d3, d7
 8008974:	ecbd 8b02 	vpop	{d8}
 8008978:	bcf0      	pop	{r4, r5, r6, r7}
 800897a:	4770      	bx	lr
 800897c:	f1a2 0410 	sub.w	r4, r2, #16
 8008980:	f647 71df 	movw	r1, #32735	@ 0x7fdf
 8008984:	428c      	cmp	r4, r1
 8008986:	d923      	bls.n	80089d0 <log+0x130>
 8008988:	18d9      	adds	r1, r3, r3
 800898a:	eb40 0400 	adc.w	r4, r0, r0
 800898e:	4321      	orrs	r1, r4
 8008990:	d105      	bne.n	800899e <log+0xfe>
 8008992:	ecbd 8b02 	vpop	{d8}
 8008996:	2001      	movs	r0, #1
 8008998:	bcf0      	pop	{r4, r5, r6, r7}
 800899a:	f000 b885 	b.w	8008aa8 <__math_divzero>
 800899e:	4939      	ldr	r1, [pc, #228]	@ (8008a84 <log+0x1e4>)
 80089a0:	4288      	cmp	r0, r1
 80089a2:	bf08      	it	eq
 80089a4:	2b00      	cmpeq	r3, #0
 80089a6:	d0e5      	beq.n	8008974 <log+0xd4>
 80089a8:	0413      	lsls	r3, r2, #16
 80089aa:	d403      	bmi.n	80089b4 <log+0x114>
 80089ac:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80089b0:	4393      	bics	r3, r2
 80089b2:	d104      	bne.n	80089be <log+0x11e>
 80089b4:	ecbd 8b02 	vpop	{d8}
 80089b8:	bcf0      	pop	{r4, r5, r6, r7}
 80089ba:	f000 b88d 	b.w	8008ad8 <__math_invalid>
 80089be:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8008a68 <log+0x1c8>
 80089c2:	ee20 7b07 	vmul.f64	d7, d0, d7
 80089c6:	ec53 2b17 	vmov	r2, r3, d7
 80089ca:	f1a3 7050 	sub.w	r0, r3, #54525952	@ 0x3400000
 80089ce:	4613      	mov	r3, r2
 80089d0:	f100 4240 	add.w	r2, r0, #3221225472	@ 0xc0000000
 80089d4:	492a      	ldr	r1, [pc, #168]	@ (8008a80 <log+0x1e0>)
 80089d6:	eebf 5b00 	vmov.f64	d5, #240	@ 0xbf800000 -1.0
 80089da:	f502 12d0 	add.w	r2, r2, #1703936	@ 0x1a0000
 80089de:	f3c2 3446 	ubfx	r4, r2, #13, #7
 80089e2:	0d15      	lsrs	r5, r2, #20
 80089e4:	eb01 1c04 	add.w	ip, r1, r4, lsl #4
 80089e8:	052d      	lsls	r5, r5, #20
 80089ea:	ed9c 7b24 	vldr	d7, [ip, #144]	@ 0x90
 80089ee:	1e1e      	subs	r6, r3, #0
 80089f0:	1b47      	subs	r7, r0, r5
 80089f2:	ec47 6b16 	vmov	d6, r6, r7
 80089f6:	1512      	asrs	r2, r2, #20
 80089f8:	eea7 5b06 	vfma.f64	d5, d7, d6
 80089fc:	ee07 2a90 	vmov	s15, r2
 8008a00:	ee25 2b05 	vmul.f64	d2, d5, d5
 8008a04:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8008a08:	ed91 4b00 	vldr	d4, [r1]
 8008a0c:	ee25 1b02 	vmul.f64	d1, d5, d2
 8008a10:	ed9c 7b26 	vldr	d7, [ip, #152]	@ 0x98
 8008a14:	eea4 7b06 	vfma.f64	d7, d4, d6
 8008a18:	ee35 4b07 	vadd.f64	d4, d5, d7
 8008a1c:	ee37 0b44 	vsub.f64	d0, d7, d4
 8008a20:	ed91 7b02 	vldr	d7, [r1, #8]
 8008a24:	ee30 0b05 	vadd.f64	d0, d0, d5
 8008a28:	eea7 0b06 	vfma.f64	d0, d7, d6
 8008a2c:	ed91 7b04 	vldr	d7, [r1, #16]
 8008a30:	ed91 6b08 	vldr	d6, [r1, #32]
 8008a34:	eea7 0b02 	vfma.f64	d0, d7, d2
 8008a38:	ed91 7b06 	vldr	d7, [r1, #24]
 8008a3c:	ed91 3b0c 	vldr	d3, [r1, #48]	@ 0x30
 8008a40:	eea6 7b05 	vfma.f64	d7, d6, d5
 8008a44:	ed91 6b0a 	vldr	d6, [r1, #40]	@ 0x28
 8008a48:	eea3 6b05 	vfma.f64	d6, d3, d5
 8008a4c:	eea6 7b02 	vfma.f64	d7, d6, d2
 8008a50:	eea1 0b07 	vfma.f64	d0, d1, d7
 8008a54:	ee30 0b04 	vadd.f64	d0, d0, d4
 8008a58:	e78c      	b.n	8008974 <log+0xd4>
 8008a5a:	ed9f 0b05 	vldr	d0, [pc, #20]	@ 8008a70 <log+0x1d0>
 8008a5e:	e789      	b.n	8008974 <log+0xd4>
 8008a60:	00000000 	.word	0x00000000
 8008a64:	41a00000 	.word	0x41a00000
 8008a68:	00000000 	.word	0x00000000
 8008a6c:	43300000 	.word	0x43300000
	...
 8008a78:	000308ff 	.word	0x000308ff
 8008a7c:	3ff00000 	.word	0x3ff00000
 8008a80:	08008c50 	.word	0x08008c50
 8008a84:	7ff00000 	.word	0x7ff00000

08008a88 <with_errno>:
 8008a88:	b510      	push	{r4, lr}
 8008a8a:	ed2d 8b02 	vpush	{d8}
 8008a8e:	eeb0 8b40 	vmov.f64	d8, d0
 8008a92:	4604      	mov	r4, r0
 8008a94:	f7ff feca 	bl	800882c <__errno>
 8008a98:	eeb0 0b48 	vmov.f64	d0, d8
 8008a9c:	ecbd 8b02 	vpop	{d8}
 8008aa0:	6004      	str	r4, [r0, #0]
 8008aa2:	bd10      	pop	{r4, pc}
 8008aa4:	0000      	movs	r0, r0
	...

08008aa8 <__math_divzero>:
 8008aa8:	b082      	sub	sp, #8
 8008aaa:	2800      	cmp	r0, #0
 8008aac:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 8008ab0:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 8008ab4:	fe07 7b06 	vseleq.f64	d7, d7, d6
 8008ab8:	ed8d 7b00 	vstr	d7, [sp]
 8008abc:	ed9d 0b00 	vldr	d0, [sp]
 8008ac0:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 8008ad0 <__math_divzero+0x28>
 8008ac4:	2022      	movs	r0, #34	@ 0x22
 8008ac6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8008aca:	b002      	add	sp, #8
 8008acc:	f7ff bfdc 	b.w	8008a88 <with_errno>
	...

08008ad8 <__math_invalid>:
 8008ad8:	eeb0 7b40 	vmov.f64	d7, d0
 8008adc:	eeb4 7b47 	vcmp.f64	d7, d7
 8008ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ae4:	ee30 6b40 	vsub.f64	d6, d0, d0
 8008ae8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8008aec:	d602      	bvs.n	8008af4 <__math_invalid+0x1c>
 8008aee:	2021      	movs	r0, #33	@ 0x21
 8008af0:	f7ff bfca 	b.w	8008a88 <with_errno>
 8008af4:	4770      	bx	lr
	...

08008af8 <_init>:
 8008af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afa:	bf00      	nop
 8008afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008afe:	bc08      	pop	{r3}
 8008b00:	469e      	mov	lr, r3
 8008b02:	4770      	bx	lr

08008b04 <_fini>:
 8008b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b06:	bf00      	nop
 8008b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b0a:	bc08      	pop	{r3}
 8008b0c:	469e      	mov	lr, r3
 8008b0e:	4770      	bx	lr
